'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactToastify = require('react-toastify');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Notification = function (_Component) {
    _inherits(Notification, _Component);

    function Notification() {
        _classCallCheck(this, Notification);

        return _possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).apply(this, arguments));
    }

    _createClass(Notification, [{
        key: 'notify',
        value: function notify(message) {
            var hasError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var options = {};
            hasError ? _reactToastify.toast.error(message, options) : _reactToastify.toast.success(message, options);
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var _props$toast = this.props.toast,
                message = _props$toast.message,
                hasError = _props$toast.hasError;

            message && this.notify(message, hasError);
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            return this.props.toast && nextProps.toast && this.props.toast.timestamp !== nextProps.toast.timestamp;
        }
    }, {
        key: 'render',
        value: function render() {
            var message = this.props.toast.message;

            if (message) {
                return _react2.default.createElement(_reactToastify.ToastContainer, {
                    position: 'top-right',
                    type: 'default',
                    autoClose: 5000,
                    hideProgressBar: false,
                    newestOnTop: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    className: 'toastify_class',
                    bodyClassName: 'toastify_body_class'
                });
            } else {
                return null;
            }
        }
    }]);

    return Notification;
}(_react.Component);

exports.default = Notification;
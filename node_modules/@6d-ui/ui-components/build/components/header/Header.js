"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require("reactstrap");

var _reactRouterDom = require("react-router-dom");

var _reactLiveClock = require("react-live-clock");

var _reactLiveClock2 = _interopRequireDefault(_reactLiveClock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Header = function (_Component) {
  _inherits(Header, _Component);

  function Header(props) {
    _classCallCheck(this, Header);

    var _this = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));

    _this.toggle = _this.toggle.bind(_this);
    _this.tooltipToggle = _this.tooltipToggle.bind(_this);
    _this.revokeObject = _this.revokeObject.bind(_this);
    _this.state = {
      dispDate: props.dispDate ? props.dispDate : false
    };
    return _this;
  }

  _createClass(Header, [{
    key: "toggle",
    value: function toggle(id) {
      this.setState(_defineProperty({}, "dropdownOpen_" + id, !this.state["dropdownOpen_" + id]));
    }
  }, {
    key: "tooltipToggle",
    value: function tooltipToggle(id) {
      this.setState(_defineProperty({}, "tooltipOpen_" + id, !this.state["tooltipOpen_" + id]));
    }
  }, {
    key: "revokeObject",
    value: function revokeObject(id) {
      console.log("REVOKE CALLLED", id);
      var urlObjects = _.filter(this.props.header.notificationItems, function (o) {
        return o.id == id;
      });
      var timeout = null;
      if (urlObjects && urlObjects.length > 0) {
        timeout = setTimeout(function () {
          console.log("REVOKING URL =>", urlObjects[0].url);
          window.URL.revokeObjectURL(urlObjects[0].url);
          if (timeout != null) clearTimeout(timeout);
        }, 10000);
      } else console.log("URL NOT REVOKED =>", id);
      this.props.removeFromExport(id);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var getHeaderItems = function getHeaderItems() {
        return _this2.props.items.map(function (item) {
          switch (item.type) {
            case 1:
              //Button Type
              // return (
              // <li key={item.id} className="nav-item">
              //   <a className="nav-link" onClick={()=>this.props.onHeaderItemClick(item.id, 0)}  style={{ cursor: "pointer" }}>
              //     <i className={`fa ${item.icon} notif-menu-drawer`}/>
              //   </a>
              // </li>
              // )
              var getNotificationItems = function getNotificationItems(subItems) {
                /*[{
                  id: 1,
                  message: "Transaction Report",
                  url: 324567uhygtrfde2345t6y7t4gf3ds2345t6y7h4gf3d2e
                  downloadable: true
                }]*/
                var buttonStyle = {
                  marginLeft: '10px', width: '28%', textAlign: 'right'
                };
                var messageStyle = { overflow: 'hidden', textOverflow: 'ellipsis', width: '70%' };
                if (subItems && subItems.length > 0) {
                  return subItems.map(function (subItem, index) {
                    if (!subItem.downloadable) {
                      buttonStyle.marginLeft = '0px';
                      buttonStyle.width = '1%';
                      messageStyle.width = '98%';
                    }
                    if (subItem.downloadable) {
                      return _react2.default.createElement(
                        _reactstrap.DropdownItem,
                        { key: subItem.id, onClick: function onClick() {
                            return _this2.revokeObject(subItem.id);
                          } },
                        _react2.default.createElement(
                          "div",
                          { className: "header_cogs d-flex align-items-center" },
                          _react2.default.createElement(
                            "div",
                            { className: "float-left", style: messageStyle },
                            subItem.message
                          ),
                          _react2.default.createElement(
                            "div",
                            { className: "float-left", style: buttonStyle },
                            subItem.downloadable ? _react2.default.createElement(
                              "a",
                              { href: subItem.url, className: "btn btn-info btn-sm", download: subItem.message, id: "downloader-" + subItem.id },
                              _react2.default.createElement("i", { className: "fa fa-download" })
                            ) : null,
                            _react2.default.createElement(
                              _reactstrap.Tooltip,
                              { placement: "left", isOpen: _this2.state["tooltipOpen_" + subItem.id], autohide: false, target: "downloader-" + subItem.id, toggle: function toggle() {
                                  return _this2.tooltipToggle(subItem.id);
                                } },
                              subItem.downloadable ? "Download " + subItem.message : subItem.message
                            )
                          )
                        )
                      );
                    } else {
                      switch (subItem.type) {
                        case "Redirect":
                          return _react2.default.createElement(
                            _reactRouterDom.Link,
                            { to: subItem.url },
                            _react2.default.createElement(
                              _reactstrap.DropdownItem,
                              { key: subItem.id },
                              _react2.default.createElement(
                                "div",
                                { className: "header_cogs d-flex align-items-center" },
                                _react2.default.createElement(
                                  "div",
                                  { className: "float-left", style: messageStyle },
                                  subItem.message
                                )
                              )
                            )
                          );
                        case "Alerts":
                          return _react2.default.createElement(
                            _reactstrap.DropdownItem,
                            { key: subItem.id, onClick: function onClick() {
                                return _this2.props.removeAlert(subItem.id);
                              } },
                            _react2.default.createElement(
                              "div",
                              { className: "header_cogs d-flex align-items-center" },
                              _react2.default.createElement(
                                "div",
                                { className: "float-left", style: messageStyle },
                                subItem.message
                              )
                            )
                          );
                        default:
                          return _react2.default.createElement(
                            _reactstrap.DropdownItem,
                            { key: subItem.id },
                            _react2.default.createElement(
                              "div",
                              { className: "header_cogs d-flex align-items-center" },
                              _react2.default.createElement(
                                "div",
                                { className: "float-left", style: messageStyle },
                                subItem.message
                              )
                            )
                          );
                      }
                    }
                  });
                } else {
                  return _react2.default.createElement(
                    "div",
                    { className: "header_cogs d-flex align-items-center" },
                    _react2.default.createElement(
                      "div",
                      { className: "float-left" },
                      "No Notifications"
                    )
                  );
                }
              };
              var count = _this2.props.header.notificationItems && _this2.props.header.notificationItems.length > 0 ? _this2.props.header.notificationItems.length : 0;
              var badgeStyle = _extends({}, STYLE.badgeStyle);
              if (count < 10) badgeStyle.right = '18px';
              return _react2.default.createElement(
                "li",
                { key: item.id, className: "nav-item" },
                _react2.default.createElement(
                  _reactstrap.Dropdown,
                  { isOpen: _this2.state["dropdownOpen_" + item.id], toggle: function toggle() {
                      return _this2.toggle(item.id);
                    } },
                  _react2.default.createElement(
                    _reactstrap.DropdownToggle,
                    { className: "nav-link nav-link", nav: true },
                    _react2.default.createElement(
                      "div",
                      { className: "user-ico" },
                      _react2.default.createElement("i", { className: _this2.props.header.notificationItems && _this2.props.header.notificationItems.length > 0 ? "fa " + item.animatedIcon : "fa " + item.icon }),
                      count > 0 ? _react2.default.createElement(
                        _reactstrap.Badge,
                        { color: "light", style: badgeStyle },
                        count > 9 ? "9+" : count
                      ) : null
                    )
                  ),
                  _react2.default.createElement(
                    _reactstrap.DropdownMenu,
                    { right: true },
                    _react2.default.createElement("div", { className: "triangle-up" }),
                    getNotificationItems(_this2.props.header.notificationItems)
                  )
                )
              );
              break;
            case 2:
              //Dropdown Type
              var getDropdownItems = function getDropdownItems(menuId, subItems) {
                return subItems.map(function (subItem, index) {
                  return _react2.default.createElement(
                    _reactstrap.DropdownItem,
                    { key: index, tag: "a", href: "javascript:void(0)", onClick: function onClick() {
                        return _this2.props.onHeaderItemClick(menuId, subItem.id);
                      } },
                    _react2.default.createElement(
                      "div",
                      { className: "header_cogs d-flex align-items-center" },
                      _react2.default.createElement(
                        "div",
                        { className: "float-left ico" },
                        _react2.default.createElement("i", { className: "fa " + subItem.icon })
                      ),
                      _react2.default.createElement(
                        "div",
                        { className: "float-left" },
                        subItem.name
                      )
                    )
                  );
                });
              };
              return _react2.default.createElement(
                "li",
                { key: item.id, className: "nav-item" },
                _react2.default.createElement(
                  _reactstrap.Dropdown,
                  { isOpen: _this2.state["dropdownOpen_" + item.id], toggle: function toggle() {
                      return _this2.toggle(item.id);
                    } },
                  _react2.default.createElement(
                    _reactstrap.DropdownToggle,
                    { className: "nav-link nav-link", nav: true },
                    _react2.default.createElement(
                      "div",
                      { className: "user-ico" },
                      _react2.default.createElement("i", { className: "fa " + item.icon })
                    )
                  ),
                  _react2.default.createElement(
                    _reactstrap.DropdownMenu,
                    { right: true },
                    _react2.default.createElement("div", { className: "triangle-up" }),
                    _react2.default.createElement(
                      "div",
                      { className: "header_fullName d-flex align-items-center primary-color" },
                      _react2.default.createElement(
                        "div",
                        { className: "float-left ico" },
                        _react2.default.createElement("i", { className: "fa " + item.subIcon })
                      ),
                      _react2.default.createElement(
                        "div",
                        {
                          className: "float-left setOverflow",
                          title: item.subHeader
                        },
                        item.subHeader
                      )
                    ),
                    getDropdownItems(item.id, item.subItems)
                  )
                )
              );
              break;
            default:
              break;
          }
        });
      };
      return _react2.default.createElement(
        "header",
        { className: "app-header navbar primary-background" },
        _react2.default.createElement(
          "div",
          null,
          this.props.hideMenuToggle ? '' : _react2.default.createElement(
            "div",
            { className: "menu-toggle d-flex align-items-center", onClick: function onClick() {
                return _this2.props.toggleSideNav();
              } },
            _react2.default.createElement(
              "span",
              { className: "menu-toggle-ico" },
              _react2.default.createElement("i", { className: "fa fa-bars" })
            )
          ),
          _react2.default.createElement(
            "div",
            { className: "page-heading d-flex align-items-center", style: this.props.hideMenuToggle && { paddingLeft: 30 } },
            this.props.header && this.props.header.name ? this.props.header.name : "Dashboard"
          )
        ),
        _react2.default.createElement(
          "div",
          { className: "d-flex align-items-center" },
          this.state.dispDate && _react2.default.createElement(
            "div",
            { className: "pr-1" },
            _react2.default.createElement(_reactLiveClock2.default, {
              format: 'dddd, MMMM D, YYYY, h:mm:ss A',
              ticking: true
            })
          ),
          _react2.default.createElement(
            "ul",
            { className: "nav navbar-nav ml-auto" },
            getHeaderItems()
          )
        )
      );
    }
  }]);

  return Header;
}(_react.Component);

exports.default = Header;


var STYLE = {
  badgeStyle: {
    fontSize: '11px',
    position: 'absolute',
    right: '12px',
    backgroundColor: 'red',
    color: 'white'
  }
};
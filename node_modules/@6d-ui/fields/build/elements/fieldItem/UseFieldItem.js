'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = useFieldItem;

var _FormValidator = require('../formValidator/FormValidator');

var _react = require('react');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function useFieldItem(FIELDS) {
    var initialValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var preValidation = options.preValidation,
        postValidation = options.postValidation,
        onValueChange = options.onValueChange;

    var _useState = (0, _react.useState)(initialValues),
        _useState2 = _slicedToArray(_useState, 2),
        values = _useState2[0],
        setValues = _useState2[1];

    var _useState3 = (0, _react.useState)({}),
        _useState4 = _slicedToArray(_useState3, 2),
        fields = _useState4[0],
        setFields = _useState4[1];

    (0, _react.useEffect)(function () {
        if (!_lodash2.default.isEmpty(initialValues)) setValues(initialValues);
    }, [initialValues]);

    var changeHandler = function changeHandler(name, value, obj) {
        var _ref = obj || {
            isTouched: false
        },
            isTouched = _ref.isTouched;

        if (isTouched) {
            // value = values[name];
            return false;
        }

        var fieldValues = _extends({}, fields);

        if (FIELDS[name]) {
            var validate = (0, _FormValidator.validateForm)(name, value, FIELDS[name], preValidation, postValidation);
            if (validate) {
                fieldValues[name] = validate;
            } else {
                fieldValues[name] = {
                    hasError: false,
                    errorMsg: ''
                };
            }
        }

        var _ref2 = onValueChange ? onValueChange(name, value, values, fieldValues) : [],
            _ref3 = _slicedToArray(_ref2, 1),
            _ref3$ = _ref3[0],
            newValues = _ref3$ === undefined ? null : _ref3$;

        setValues(function (values) {
            if (newValues != null) return newValues;

            return _extends({}, values, _defineProperty({}, name, value));
        });
        setFields(fieldValues);

        if (isTouched && fields[name] && fields[name].hasError) {
            setFields(fields);
            return false;
        }
    };

    var validator = function validator(keys) {
        var removedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        var fieldValues = _extends({}, fields);
        if (removedKeys.length > 0) {
            removedKeys.map(function (key) {
                fieldValues[key] = {
                    hasError: false,
                    errorMsg: ''
                };
            });
        }
        keys.map(function (key) {
            var validate = (0, _FormValidator.validateForm)(key, values[key], FIELDS[key], preValidation, postValidation);
            if (validate) {
                fieldValues[key] = validate;
            } else {
                fieldValues[key] = {
                    hasError: false,
                    errorMsg: ''
                };
            }
        });
        var hasError = fieldValues ? Object.values(fieldValues).some(function (f) {
            return f.hasError;
        }) : false;
        setFields(fieldValues);
        return hasError;
    };

    var valuesReset = function valuesReset() {
        setValues(initialValues);
        setFields({});
    };

    var updateValues = function updateValues(newValue) {
        if (newValue) {
            Object.keys(newValue).map(function (val) {
                return changeHandler(val, newValue[val], {});
            });
            setValues(function (values) {
                return _extends({}, values, newValue);
            });
        }
    };

    var handleChange = (0, _react.useCallback)(changeHandler, [FIELDS, values, fields]);

    var validateValues = (0, _react.useCallback)(validator, [FIELDS, values, fields]);

    var reset = (0, _react.useCallback)(valuesReset, [FIELDS, values, fields]);

    var updateValue = (0, _react.useCallback)(updateValues, [FIELDS, values, fields]);

    return [values, fields, handleChange, { validateValues: validateValues, reset: reset, updateValue: updateValue }];
}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

var _reactDatepicker = require('react-datepicker');

var _reactDatepicker2 = _interopRequireDefault(_reactDatepicker);

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

var _FieldTypes = require('./FieldTypes');

var _FieldTypes2 = _interopRequireDefault(_FieldTypes);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactDropzone = require('react-dropzone');

var _reactDropzone2 = _interopRequireDefault(_reactDropzone);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FieldItem = function FieldItem(props) {
  var onBlur = function onBlur(e) {
    if (props.onChange) props.onChange(null, { isTouched: true }, e);
  };

  var dateFormat = "YYYY-MM-DD";
  var getRadioButton = function getRadioButton() {
    var value = (0, _utils.expandSelectValue)(props.value, props.values);
    var getLabel = function getLabel(selectedClass, label) {
      if (!props.isWithoutLabel) {
        return _react2.default.createElement(
          'div',
          { className: 'float-left checkBoxRadio_label ' + selectedClass },
          label
        );
      } else {
        return null;
      }
    };
    if (props.values) {
      return props.values.map(function (data, index) {
        var selectedClass = _lodash2.default.isEqual(value, data) ? 'checked_box' : 'nc_box';
        return _react2.default.createElement(
          'div',
          { className: 'checkBoxRadio_container' + (props.isListedInput ? ' cb-listed' : ' cb-left'), key: index },
          _react2.default.createElement(
            'label',
            { className: 'checkBoxRadio radio' },
            _react2.default.createElement(
              'div',
              { className: 'float-left btn_container' },
              _react2.default.createElement('input', { type: 'radio', checked: value && _lodash2.default.isEqual(value, data) ? 'checked' : false, onChange: function onChange() {
                  props.onChange(data);
                } }),
              _react2.default.createElement('span', { className: 'checkmark' })
            ),
            getLabel(selectedClass, data.label)
          )
        );
      });
    }
  };
  var getCheckBox = function getCheckBox() {
    var getLabel = function getLabel(selectedClass, data) {
      if (!props.isWithoutLabel) {
        if (props.isWithoutValue) {
          return _react2.default.createElement(
            'div',
            { className: 'float-left checkBoxRadio_label ' + selectedClass },
            data.label
          );
        } else {
          return _react2.default.createElement(
            'div',
            { className: 'float-left checkBoxRadio_label ' + selectedClass },
            data.label,
            '(',
            data.value,
            ')',
            _react2.default.createElement(
              'div',
              null,
              data.subLabel
            )
          );
        }
      } else {
        return null;
      }
    };
    if (props.values) {
      return props.values.map(function (data, index) {
        var selectedClass = props.value && _lodash2.default.some(props.value, data) ? 'checked_box' : 'nc_box';
        return _react2.default.createElement(
          'div',
          { className: 'checkBoxRadio_container' + (props.isListedInput ? ' cb-listed' : ' cb-left'), key: index },
          _react2.default.createElement(
            'label',
            { className: 'checkBoxRadio check' },
            _react2.default.createElement(
              'div',
              { className: 'float-left btn_container' },
              _react2.default.createElement('input', { type: 'checkbox', checked: props.value && _lodash2.default.some(props.value, data) ? 'checked' : false, onChange: function onChange() {
                  props.onChange(data);
                } }),
              _react2.default.createElement('span', { className: 'checkmark' })
            ),
            getLabel(selectedClass, data)
          )
        );
      });
    }
  };
  var className = 'custom-field' + (!props.getOnlyInput ? " form-group" : "") + (props.touched ? " has-danger" : "");
  var getInput = function getInput() {
    switch (props.type) {
      //Drop down
      case _FieldTypes2.default.DROP_DOWN:
        return _react2.default.createElement(_reactSelect2.default, {
          className: 'Select ' + (props.style ? props.style : ''),
          classNamePrefix: 'Select',
          placeholder: props.placeholder
          // value={props.value}
          , value: (0, _utils.expandSelectValue)(props.value, props.values),
          options: props.isNoSort ? props.values : (0, _utils.sortOptionsByLabel)(props.values),
          onChange: props.onChange,
          disabled: props.disabled,
          onBlur: onBlur,
          isClearable: props.isClearable ? props.isClearable : true
        });
      //Multi Select
      case _FieldTypes2.default.MUTLI_SELECT:
        return _react2.default.createElement(_reactSelect2.default, {
          className: 'Select ' + (props.style ? props.style : ''),
          classNamePrefix: 'Select',
          placeholder: props.placeholder
          // value={props.value}
          , value: (0, _utils.expandSelectValue)(props.value, props.values),
          options: props.isNoSort ? props.values : (0, _utils.sortOptionsByLabel)(props.values),
          onChange: props.onChange,
          isMulti: true,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.DATE_PICKER:
        //Date Picker
        return _react2.default.createElement(_reactDatepicker2.default, {
          dateFormat: props.dateFormat || dateFormat,
          peekNextMonth: true,
          showMonthDropdown: true,
          showYearDropdown: true,
          dropdownMode: 'select',
          isClearable: true,
          selected: props.value
          //selected={props.value ?  moment(props.value, "DD/MM/YYYY") : null}
          , onChange: props.onChange,
          className: 'form-control ' + (props.style ? props.style : ''),
          todayButton: "Today",
          minDate: props.minDate,
          maxDate: props.maxDate,
          excludeDates: props.excludeDates,
          placeholderText: props.placeholder,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.DATE_TIME_PICKER:
        //Date Time Picker
        return _react2.default.createElement(_reactDatepicker2.default, {
          dateFormat: (props.dateFormat || dateFormat) + ' HH:mm',
          peekNextMonth: true,
          showMonthDropdown: true,
          showYearDropdown: true,
          dropdownMode: 'select',
          isClearable: true,
          selected: props.value,
          onChange: props.onChange,
          className: 'form-control ' + (props.style ? props.style : ''),
          todayButton: "Today",
          showTimeSelect: true,
          timeFormat: 'HH:mm',
          timeIntervals: props.interval,
          excludeTimes: props.excludeTimes,
          minTime: props.minTime,
          maxTime: props.maxTime,
          minDate: props.minDate,
          maxDate: props.maxDate,
          excludeDates: props.excludeDates,
          placeholderText: props.placeholder,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.START_DATE_PICKER:
        //Start Date Picker
        return _react2.default.createElement(_reactDatepicker2.default, {
          dateFormat: props.dateFormat || dateFormat,
          peekNextMonth: true,
          showMonthDropdown: true,
          showYearDropdown: true,
          dropdownMode: 'select',
          isClearable: true,
          selected: props.startDate,
          onChange: props.onChange,
          className: 'form-control ' + (props.style ? props.style : ''),
          todayButton: "Today",
          minDate: props.minDate,
          maxDate: props.endDate,
          selectsStart: true,
          startDate: props.startDate,
          endDate: props.endDate,
          placeholderText: props.placeholder,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.START_DATE_TIME_PICKER:
        //Start Date Time Picker
        return _react2.default.createElement(_reactDatepicker2.default, {
          dateFormat: (props.dateFormat || dateFormat) + ' HH:mm',
          peekNextMonth: true,
          showMonthDropdown: true,
          showYearDropdown: true,
          dropdownMode: 'select',
          isClearable: true,
          selected: props.startDate,
          onChange: props.onChange,
          className: 'form-control ' + (props.style ? props.style : ''),
          todayButton: "Today",
          showTimeSelect: true,
          timeFormat: 'HH:mm',
          timeIntervals: props.interval,
          minTime: props.minTime,
          maxTime: props.maxTime,
          minDate: props.minDate,
          maxDate: props.maxDate,
          selectsStart: true,
          startDate: props.startDate,
          endDate: props.endDate,
          placeholderText: props.placeholder,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.END_DATE_PICKER:
        //End Date Picker
        return _react2.default.createElement(_reactDatepicker2.default, {
          dateFormat: props.dateFormat || dateFormat,
          peekNextMonth: true,
          showMonthDropdown: true,
          showYearDropdown: true,
          dropdownMode: 'select',
          isClearable: true,
          selected: props.endDate,
          onChange: props.onChange,
          className: 'form-control ' + (props.style ? props.style : ''),
          todayButton: "Today",
          minDate: props.startDate,
          maxDate: props.maxDate,
          selectsEnd: true,
          startDate: props.startDate,
          endDate: props.endDate,
          placeholderText: props.placeholder,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.END_DATE_TIME_PICKER:
        //End Date Time Picker
        return _react2.default.createElement(_reactDatepicker2.default, {
          dateFormat: (props.dateFormat || dateFormat) + ' HH:mm',
          peekNextMonth: true,
          showMonthDropdown: true,
          showYearDropdown: true,
          dropdownMode: 'select',
          isClearable: true,
          selected: props.endDate,
          onChange: props.onChange,
          className: 'form-control ' + (props.style ? props.style : ''),
          todayButton: "Today",
          showTimeSelect: true,
          timeFormat: 'HH:mm',
          timeIntervals: props.interval,
          minTime: props.minTime,
          maxTime: props.maxTime,
          minDate: props.startDate,
          maxDate: props.maxDate,
          selectsEnd: true,
          startDate: props.startDate,
          endDate: props.endDate,
          placeholderText: props.placeholder,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.ASYNC_DROP_DOWN:
        //Ajax Search dropDown
        return _react2.default.createElement(_reactSelect2.default.Async, {
          className: 'Select ' + (props.style ? props.style : ''),
          classNamePrefix: 'Select',
          value: props.value,
          onChange: props.onChange,
          loadOptions: props.loadOptions,
          backspaceRemoves: true,
          placeholder: props.placeholder,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.ASYNC_MUTLI_SELECT:
        //Ajax Search multiSelect dropDown
        return _react2.default.createElement(_reactSelect2.default.Async, {
          className: 'Select ' + (props.style ? props.style : ''),
          classNamePrefix: 'Select',
          value: props.value,
          onChange: props.onChange,
          loadOptions: props.loadOptions,
          backspaceRemoves: true,
          multi: true,
          placeholder: props.placeholder,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.TEXT_BOX_DISABLED:
        //Disabled Text Box
        return _react2.default.createElement('input', {
          readOnly: 'true',
          value: props.value,
          placeholder: props.placeholder,
          className: 'disabled-input form-control disabed-text ' + (props.style ? props.style : ''), type: 'text',
          onBlur: onBlur
        });
      case _FieldTypes2.default.RADIO_BUTTON:
        //Radio Buttons
        if (props.isListedInput) {
          return _react2.default.createElement(
            'div',
            { className: props.listedClassName ? props.listedClassName : '' },
            _react2.default.createElement(
              'div',
              { className: 'checkBoxRadio_main' + (!props.isWithoutLabel ? ' rc-mandatory' : '') + ' rc-listed ' + (props.style ? props.style : '') },
              getRadioButton()
            )
          );
        } else {
          return _react2.default.createElement(
            'div',
            { className: 'checkBoxRadio_main ' + (!props.isWithoutLabel ? ' rc-mandatory ' : '') + ' ' + (props.style ? props.style : '') },
            getRadioButton()
          );
        }

      case _FieldTypes2.default.CHECK_BOX:
        //CheckBox
        if (props.isListedInput) {
          return _react2.default.createElement(
            'div',
            { className: props.listedClassName ? props.listedClassName : '' },
            _react2.default.createElement(
              'div',
              { className: 'checkBoxRadio_main' + (!props.isWithoutLabel ? ' rc-mandatory' : '') + ' rc-listed ' + (props.style ? props.style : '') },
              getCheckBox()
            )
          );
        } else {
          return _react2.default.createElement(
            'div',
            { className: 'checkBoxRadio_main ' + (!props.isWithoutLabel ? ' rc-mandatory ' : '') + ' ' + (props.style ? props.style : '') },
            getCheckBox()
          );
        }

      case _FieldTypes2.default.TEXT_AREA_DISABLED:
        //Disabled Text area
        return _react2.default.createElement('textarea', {
          readOnly: 'true',
          value: props.value,
          className: 'form-control disabed-text ' + (props.style ? props.style : '')
        });

      case _FieldTypes2.default.SEARCH_BOX_ICON:
        //Search Box With icon
        return _react2.default.createElement(
          'div',
          { className: 'select-modal ' + (props.style ? props.style : '') },
          _react2.default.createElement(
            'span',
            { className: 'select-modal-label' },
            props.fieldValue
          ),
          _react2.default.createElement(
            'div',
            { className: 'icon-box', onClick: props.onClick },
            _react2.default.createElement('span', { className: 'icon fa ' + (props.icon || 'fa-plus') })
          )
        );

      case _FieldTypes2.default.TEXT_AREA:
        //Text Area
        return _react2.default.createElement('textarea', {
          value: props.value,
          placeholder: props.placeholder,
          onChange: function onChange(event) {
            return props.onChange ? props.onChange(event.target.value, {}, event) : null;
          },
          className: 'form-control ' + (props.style ? props.style : ''),
          disabled: props.disabled ? true : false,
          onBlur: onBlur
        });
      case _FieldTypes2.default.NESTED_DROP_DOWN:
        //nested drop down
        var getNestedList = function getNestedList(option) {
          var nestedArray = [];
          var nestedObj = {};

          for (var k in option) {
            if (k !== 'children') nestedObj[k] = option[k];
          }

          if (option.children) {
            option.children.forEach(function (child) {
              var childElement = getNestedList(child);
              nestedArray.push(childElement);
            });
            nestedObj.options = nestedArray;
          }
          return nestedObj;
        };
        var getOptions = function getOptions() {
          var optionList = [];
          if (props.values) {
            props.values.forEach(function (value) {
              optionList.push(getNestedList(value));
            });
          }
          return optionList;
        };
        return _react2.default.createElement(_reactSelect2.default, {
          className: 'Select ' + (props.style ? props.style : ''),
          classNamePrefix: 'Select',
          placeholder: props.placeholder
          // value={props.value}
          , value: (0, _utils.expandSelectValue)(props.value, props.values),
          options: getOptions(),
          onChange: props.onChange,
          disabled: props.disabled,
          onBlur: onBlur
        });
      case _FieldTypes2.default.INPUT_WITH_BUTTON:
        //input with button
        return _react2.default.createElement(
          'div',
          { className: 'input-group' },
          _react2.default.createElement('input', {
            disabled: props.disabled ? true : false,
            value: props.value,
            placeholder: props.placeholder,
            maxLength: props.maxLength,
            onChange: function onChange(event) {
              return props.onChange ? props.onChange(event.target.value) : null;
            },
            className: 'form-control ' + (props.style ? props.style : ''), type: props.inputType || "text",
            onBlur: onBlur
          }),
          _react2.default.createElement(
            'div',
            { className: 'input-group-append' },
            _react2.default.createElement(
              'button',
              { className: 'btn btn-outline-secondary', type: 'button', onClick: props.onButtonClick },
              props.buttonLabel
            )
          )
        );
      case _FieldTypes2.default.VIEW_DETAILS_BOX:
        //View Box
        return _react2.default.createElement(
          'div',
          {
            className: 'disabled-input form-control disabed-text disabled-input-div ' + (props.style ? props.style : '') },
          props.value
        );
      case _FieldTypes2.default.FILE_UPLOAD:
        //File upload
        var dropzoneRef = void 0;
        return _react2.default.createElement(
          'div',
          { className: 'input-group field-file' },
          _react2.default.createElement(
            'div',
            { className: 'form-control ' + (props.style ? props.style : '') },
            _react2.default.createElement(
              _reactDropzone2.default,
              {
                ref: function ref(node) {
                  dropzoneRef = node;
                },
                onDrop: props.onChange,
                className: 'field-file-drop-zone' },
              _react2.default.createElement(
                'span',
                { className: (!(props.value && props.value.length > 0) ? "value-empty " : "") + 'field-file-drop-zone-text' },
                props.value && props.value.length > 0 ? props.value.map(function (file) {
                  return file.name;
                }).join(', ') : 'Choose file..'
              )
            ),
            props.value && props.value.length > 0 && _react2.default.createElement(
              'button',
              { className: 'field-file-reset', onClick: function onClick() {
                  return props.onChange();
                } },
              _react2.default.createElement(
                'svg',
                { height: '20', width: '20', viewBox: '0 0 20 20', 'aria-hidden': 'true', focusable: 'false' },
                _react2.default.createElement('path', { d: 'M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z' })
              )
            )
          ),
          _react2.default.createElement(
            _reactstrap.InputGroupAddon,
            { onClick: function onClick() {
                dropzoneRef.open();
              }, addonType: 'append', style: { cursor: 'pointer' } },
            _react2.default.createElement(
              'span',
              { className: 'input-group-text' },
              'Browse'
            )
          )
        );
      //Normal Text Box
      default:
        return _react2.default.createElement('input', {
          value: props.value,
          maxLength: props.maxLength,
          placeholder: props.placeholder,
          onChange: function onChange(event) {
            return props.onChange ? props.onChange(event.target.value) : null;
          },
          className: 'form-control ' + (props.style ? props.style : ''), type: props.inputType || "text",
          readOnly: props.disabled ? true : false,
          onBlur: onBlur
        });
    }
  };
  var getWidth = function getWidth() {
    switch (props.width) {
      case "xs":
        return { xs: 12 };
      case "md":
        return { md: 4, sm: 6, xs: 12 };
      case "sm":
        return { sm: 6, xs: 12 };
      default:
        return { md: 4, lg: 3, sm: 6, xs: 12 };
    }
  };
  var getInputContainer = function getInputContainer() {
    return _react2.default.createElement(
      'div',
      { className: props.ismandatory ? className + ' required' : className },
      _react2.default.createElement(
        'label',
        { className: props.ismandatory ? 'form-control-label required' : 'form-control-label' },
        props.label
      ),
      getInput(),
      _react2.default.createElement(
        'div',
        { className: 'text-help' },
        props.touched && props.error ? props.error : ""
      )
    );
  };
  var getFinalData = function getFinalData() {
    if (props.isListedInput) {
      return getInput();
    } else if (props.getOnlyInput) {
      return _react2.default.createElement(
        'div',
        { className: props.ismandatory ? className + ' required only-input-field' : className + ' only-input-field' },
        getInput(),
        _react2.default.createElement(
          'div',
          { className: 'text-help' },
          props.touched ? props.error : ""
        )
      );
    } else if (props.customWidth) {
      return _react2.default.createElement(
        'div',
        null,
        getInputContainer()
      );
    } else {
      return _react2.default.createElement(
        _reactstrap.Col,
        getWidth(),
        getInputContainer()
      );
    }
  };
  return getFinalData();
};

exports.default = FieldItem;
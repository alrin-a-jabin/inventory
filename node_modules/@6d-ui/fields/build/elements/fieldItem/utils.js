'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.sortOptionsByLabel = sortOptionsByLabel;
var expandSelectValue = exports.expandSelectValue = function expandSelectValue(valueArray, options) {
    if (isArray(valueArray)) {
        return valueArray.map(function (value) {
            return expandValue(value, options);
        });
    }
    return expandValue(valueArray, options);
};

var expandValue = function expandValue(value, options) {
    var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
    if (valueType !== 'string' && valueType !== 'number' && valueType !== 'boolean') return value;
    if (!options) return;
    for (var i = 0; i < options.length; i++) {
        if (String(options[i].value) === String(value)) return options[i];
    }
};

var isArray = function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
};

function sortOptionsByLabel() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (options == null || !Array.isArray(options)) ;

    try {
        if (options) {
            options.sort(function () {
                var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var _a$label = a.label,
                    aLabel = _a$label === undefined ? "" : _a$label;
                var _b$label = b.label,
                    bLabel = _b$label === undefined ? "" : _b$label;

                if (aLabel == null) aLabel = "";
                if (bLabel == null) bLabel = "";
                if (aLabel.toLowerCase() < bLabel.toLowerCase()) return -1;else if (aLabel.toLowerCase() > bLabel.toLowerCase()) return 1;else return 0;
            });
        }
    } catch (error) {
        console.warn(error);
    }

    return options;
};
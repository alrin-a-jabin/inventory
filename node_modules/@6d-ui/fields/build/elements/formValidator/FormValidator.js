'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateForm = undefined;

var _Messages = require('./constants/Messages');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var validateForm = exports.validateForm = function validateForm(name, value, field, preValidation, postValidation) {
  if (!field) return { hasError: false, errorMsg: '' };

  if (preValidation) {
    var validationResult = preValidation(name, value, field);
    if (validationResult) return validationResult;
  }
  var spaceRegex = /^\S.*/;

  if (field.ismandatory === true && (!value || _lodash2.default.isArray(value) && _lodash2.default.size(value) < 1)) return { hasError: true, errorMsg: field.messages && field.messages.mandatory ? field.messages.mandatory : _Messages.MESSAGES.MANDATORY };

  if (value && !field.regex && field.type == 0 && !spaceRegex.test(value)) return { hasError: true, errorMsg: field.messages && field.messages.spaceError ? field.messages.spaceError : _Messages.MESSAGES.SPACE };

  if (value && field.minSize && field.minSize > value.length) return {
    hasError: true,
    errorMsg: field.messages && field.messages.minSize ? field.messages.minSize : _Messages.MESSAGES.MIN_SIZE.replace("#{value}", field.minSize)
  };
  if (value && field.maxSize && field.maxSize < value.length) return {
    hasError: true,
    errorMsg: field.messages && field.messages.maxSize ? field.messages.maxSize : _Messages.MESSAGES.MAX_SIZE.replace("#{value}", field.maxSize)
  };
  if (value && field.maxLength && field.maxLength < value.length) return {
    hasError: true,
    errorMsg: field.messages && field.messages.maxLength ? field.messages.maxLength : _Messages.MESSAGES.MAX_LENGTH.replace("#{value}", field.maxLength)
  };
  if (value && field.minLength && field.minLength > value.length) return {
    hasError: true,
    errorMsg: field.messages && field.messages.minLength ? field.messages.minLength : _Messages.MESSAGES.MIN_LENGTH.replace("#{value}", field.minLength)
  };

  if (value && field.regex && !field.regex.test(value)) return { hasError: true, errorMsg: field.messages && field.messages.regex ? field.messages.regex : _Messages.MESSAGES.REG_EX };

  if (postValidation) {
    var _validationResult = postValidation(name, value, field);
    if (_validationResult) return _validationResult;
  }
  return { hasError: false, errorMsg: '' };
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getToken = getToken;
exports.setToken = setToken;
exports.getuuid = getuuid;
exports.encrypt = encrypt;
exports.encryptAuth = encryptAuth;

var _v = require('uuid/v1');

var _v2 = _interopRequireDefault(_v);

var _md = require('md5');

var _md2 = _interopRequireDefault(_md);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _cryptoJs = require('crypto-js');

var _cryptoJs2 = _interopRequireDefault(_cryptoJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getToken(auth, channel) {
    var isEncrpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var encrptKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "key";

    var autVal = auth;
    if (isEncrpt && getCookie("X-Auth-Token")) autVal = encryptAuth((0, _moment2.default)(new Date()).format("DDMMYYYYhhmmssSSS") + '||' + getCookie("X-Auth-Token"), encrptKey);

    var entity = getCookie("X-Entity") ? { "X-Entity": getCookie("X-Entity") } : {};
    return _extends({
        "X-Auth-Token": getCookie("X-Auth-Token"),
        "X-UserId": getCookie("X-UserId"),
        "X-Msisdn": getCookie("X-Msisdn"),
        "orderId": getuuid(),
        "Authorization": autVal,
        "channel": channel,
        "Access-Control-Allow-Origin": "*"
    }, entity);
}
function getCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') {
            c = c.substring(1, c.length);
        }if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
function setToken(token, userId) {
    var msisdn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

    if (!token && !userId) {
        document.cookie = 'X-Auth-Token=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
        document.cookie = 'X-UserId=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
        document.cookie = 'X-Msisdn=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
    } else {
        var date = new Date();
        date.setTime(date.getTime() + 24 * 60 * 60 * 1000);
        document.cookie = 'X-Auth-Token=' + token + ';expires=' + date.toUTCString() + ';path=/';
        document.cookie = 'X-UserId=' + userId + ';expires=' + date.toUTCString() + ';path=/';
        document.cookie = 'X-Msisdn=' + msisdn + ';expires=' + date.toUTCString() + ';path=/';
    }
}
function getuuid() {
    return (0, _v2.default)();
}
function encrypt(type, value) {
    switch (type) {
        case 'md5':
            return (0, _md2.default)(value);
        default:
            return value;
    }
}

function encryptAuth(data, key) {
    var keyHex = _cryptoJs2.default.enc.Utf8.parse(key);
    var encrypted = _cryptoJs2.default.TripleDES.encrypt(data, keyHex, {
        mode: _cryptoJs2.default.mode.ECB,
        padding: _cryptoJs2.default.pad.Pkcs7
    });

    return encrypted.toString();
}
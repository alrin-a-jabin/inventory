'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _StatusCode = require('../../../constants/StatusCode');

var _Messages = require('../../../constants/Messages');

var _Ajax = require('../Ajax');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AjaxUtil = function () {
  function AjaxUtil(obj) {
    _classCallCheck(this, AjaxUtil);

    this.RESPONSE_CODES = {
      STATUS_SUCCESS: obj.responseCode ? obj.responseCode.success || _StatusCode.BL_STATUS_CODES.SUCCESS : _StatusCode.BL_STATUS_CODES.SUCCESS,
      STATUS_UNAUTH: obj.responseCode ? obj.responseCode.resultParam || _StatusCode.BL_STATUS_CODES.UNATHORIZED : _StatusCode.BL_STATUS_CODES.UNATHORIZED,
      RESULT_PARAM: obj.responseCode.resultParam || 'resultCode',
      RESULT_SUCCESS: obj.responseCode ? obj.responseCode.resultSuccess || _StatusCode.BL_RESULT_CODES.SUCCESS : _StatusCode.BL_RESULT_CODES.SUCCESS
    };
    this.MESSAGES = {
      RESULT_PARAM: obj.messages.resultParam || 'message',
      SUCCESS: obj.messages ? obj.messages.success || _Messages.GENERIC_SUCCESS_MSG : _Messages.GENERIC_SUCCESS_MSG,
      FAILURE: obj.messages ? obj.messages.failure || _Messages.GENERIC_ERROR_MSG : _Messages.GENERIC_ERROR_MSG
    };
    this.setNotification = obj.setNotification;
    this.logout = obj.logout;
    this.authKey = obj.authKey;
    this.channel = obj.channel;
    this.entity = obj.XENTITY;
    this.isEncrpt = obj.isEncrpt;
    this.encrptKey = obj.encrptKey;
    this.makeCallBack = this.makeCallBack.bind(this);
    this.sendRequest = this.sendRequest.bind(this);
  }

  _createClass(AjaxUtil, [{
    key: 'makeCallBack',
    value: function makeCallBack(response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse, isLogout) {
      if (response && response.status === this.RESPONSE_CODES.STATUS_SUCCESS) {
        if (response.data && response.data[this.RESPONSE_CODES.RESULT_PARAM]) {
          var hasError = response.data[this.RESPONSE_CODES.RESULT_PARAM] === this.RESPONSE_CODES.RESULT_SUCCESS ? false : true;
          if (hasError && isProceedOnError) {
            if (callback) callback(returnFullResponse ? response : response.data, hasError);
          } else if (!hasError) {
            if (callback) callback(returnFullResponse ? response : response.data, hasError);
          }
          if (isShowSuccess && !hasError) {
            if (response.data[this.MESSAGES.RESULT_PARAM]) {
              if (this.setNotification) this.setNotification({ "message": response.data[this.MESSAGES.RESULT_PARAM], "hasError": hasError, "timestamp": new Date().getTime() });
            } else if (isShowGenericMessage) {
              if (this.setNotification) this.setNotification({ "message": this.MESSAGES.SUCCESS, "hasError": hasError, "timestamp": new Date().getTime() });
            }
          } else if (isShowFailure && hasError) {
            if (response.data[this.MESSAGES.RESULT_PARAM]) {
              if (this.setNotification) this.setNotification({ "message": response.data[this.MESSAGES.RESULT_PARAM], "hasError": hasError, "timestamp": new Date().getTime() });
            } else if (isShowGenericMessage) {
              if (this.setNotification) this.setNotification({ "message": this.MESSAGES.FAILURE, "hasError": hasError, "timestamp": new Date().getTime() });
            }
          }
        } else {
          callback(returnFullResponse ? response : response.data, false);
          if (isShowSuccess) {
            if (response.data && response.data[this.MESSAGES.RESULT_PARAM]) {
              if (this.setNotification) this.setNotification({ "message": response.data[this.MESSAGES.RESULT_PARAM], "hasError": false, "timestamp": new Date().getTime() });
            } else if (isShowGenericMessage) {
              if (this.setNotification) this.setNotification({ "message": this.MESSAGES.SUCCESS, "hasError": false, "timestamp": new Date().getTime() });
            }
          }
        }
      } else if (response && response.status && response.status !== this.RESPONSE_CODES.STATUS_UNAUTH) {
        if (isProceedOnError) {
          if (callback) callback(returnFullResponse ? response : response ? response.data : null, true);
        }

        if (isShowFailure) {
          if (response && response.data && response.data[this.MESSAGES.RESULT_PARAM]) {
            if (this.setNotification) this.setNotification({ "message": response.data[this.MESSAGES.RESULT_PARAM], "hasError": true, "timestamp": new Date().getTime() });
          } else if (isShowGenericMessage) {
            if (this.setNotification) this.setNotification({ "message": this.MESSAGES.FAILURE, "hasError": true, "timestamp": new Date().getTime() });
          }
        }
      } else if (response && (response.status === this.RESPONSE_CODES.STATUS_UNAUTH || response.status === '' + this.RESPONSE_CODES.STATUS_UNAUTH)) {
        //Status 401 unauthorized -> Logging Out
        if (this.logout && isLogout) this.logout();else callback(returnFullResponse ? response : response.data, true);
      } else if ((!response || !response.status) && isShowFailure) {
        if (this.setNotification) this.setNotification({ "message": this.MESSAGES.FAILURE, "hasError": true, "timestamp": new Date().getTime() });
      }
    }
  }, {
    key: 'getAuthKey',
    value: function getAuthKey() {
      return this.authKey;
    }
  }, {
    key: 'getChannel',
    value: function getChannel() {
      return this.channel;
    }
  }, {
    key: 'getEntity',
    value: function getEntity() {
      return this.entity;
    }
  }, {
    key: 'getIsEncrpt',
    value: function getIsEncrpt() {
      return this.isEncrpt;
    }
  }, {
    key: 'getEncrptKey',
    value: function getEncrptKey() {
      return this.encrptKey;
    }
  }, {
    key: 'sendRequest',
    value: function sendRequest(url, request, callback, loadingFunction) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      (0, _Ajax.ajax)(url, request, this.makeCallBack, callback, loadingFunction, _extends({}, options, { 'authKey': this.authKey, 'channel': this.channel, 'XENTITY': this.entity, isEncrpt: this.isEncrpt, encrptKey: this.encrptKey }));
    }
  }]);

  return AjaxUtil;
}();

exports.default = AjaxUtil;
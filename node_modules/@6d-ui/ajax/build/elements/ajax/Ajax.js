'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ajax = ajax;
exports.ajaxRequest = ajaxRequest;
exports.setCredentials = setCredentials;
exports.getHeaders = getHeaders;
exports.encryptData = encryptData;
exports.setBaseURL = setBaseURL;
exports.getUuid = getUuid;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _Utils = require('../util/Utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ajax(url, request, makeCallBack, callback, loadingFunction, options) {
  var loadingId = 0;

  var _ref = options || {},
      _ref$method = _ref.method,
      method = _ref$method === undefined ? 'POST' : _ref$method,
      _ref$isShowGenericMes = _ref.isShowGenericMessage,
      isShowGenericMessage = _ref$isShowGenericMes === undefined ? true : _ref$isShowGenericMes,
      _ref$isShowSuccess = _ref.isShowSuccess,
      isShowSuccess = _ref$isShowSuccess === undefined ? true : _ref$isShowSuccess,
      _ref$isShowFailure = _ref.isShowFailure,
      isShowFailure = _ref$isShowFailure === undefined ? true : _ref$isShowFailure,
      firstLoad = _ref.firstLoad,
      _ref$isProceedOnError = _ref.isProceedOnError,
      isProceedOnError = _ref$isProceedOnError === undefined ? true : _ref$isProceedOnError,
      isGetFile = _ref.isGetFile,
      authKey = _ref.authKey,
      channel = _ref.channel,
      _ref$returnFullRespon = _ref.returnFullResponse,
      returnFullResponse = _ref$returnFullRespon === undefined ? false : _ref$returnFullRespon,
      responseType = _ref.responseType,
      _ref$isLogout = _ref.isLogout,
      isLogout = _ref$isLogout === undefined ? true : _ref$isLogout,
      isEncrpt = _ref.isEncrpt,
      encrptKey = _ref.encrptKey;

  var headers = (0, _Utils.getToken)(authKey, channel, isEncrpt, encrptKey);
  if (isGetFile) headers['content-type'] = 'multipart/form-data';

  var authOptions = {
    method: method,
    url: url,
    data: request,
    headers: headers,
    json: true
  };

  if (method && method.trim().toUpperCase() == 'GET') {
    authOptions.params = request;
  }

  if (responseType) authOptions.responseType = responseType;

  if (loadingFunction) loadingId = loadingFunction({ isLoading: true, firstLoad: firstLoad });

  (0, _axios2.default)(authOptions).then(function (response) {
    if (makeCallBack) makeCallBack(response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse, isLogout);else if (callback) callback(response);

    if (loadingFunction) loadingFunction({ isLoading: false, firstLoad: firstLoad, timestamp: loadingId });
  }).catch(function (err) {
    if (makeCallBack) makeCallBack(err.response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse, isLogout);else if (callback) callback(err.response);

    if (loadingFunction) loadingFunction({ isLoading: false, firstLoad: firstLoad, timestamp: loadingId });
  });
}
function ajaxRequest(url, requestData, options) {
  var _ref2 = options || {},
      _ref2$method = _ref2.method,
      method = _ref2$method === undefined ? 'POST' : _ref2$method,
      authKey = _ref2.authKey,
      channel = _ref2.channel,
      isEncrpt = _ref2.isEncrpt,
      encrptKey = _ref2.encrptKey;

  var headers = (0, _Utils.getToken)(authKey, channel, isEncrpt, encrptKey);
  var authOptions = {
    method: method,
    url: url,
    data: requestData,
    headers: headers,
    json: true
  };
  var request = (0, _axios2.default)(authOptions);
  return request;
}
function setCredentials(token, userId, msisdn, entity) {
  (0, _Utils.setToken)(token, userId, msisdn, entity);
}
function getHeaders(auth) {
  return (0, _Utils.getToken)(auth);
}
function encryptData(type, value) {
  return (0, _Utils.encrypt)(type, value);
}
function setBaseURL(baseURL) {
  _axios2.default.defaults.baseURL = baseURL;
}
function getUuid() {
  return (0, _Utils.getuuid)();
}
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DragDropItem = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

var _reactDragDropContainer = require('react-drag-drop-container');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DragDropItem = exports.DragDropItem = function (_Component) {
    _inherits(DragDropItem, _Component);

    function DragDropItem(props) {
        _classCallCheck(this, DragDropItem);

        var _this = _possibleConstructorReturn(this, (DragDropItem.__proto__ || Object.getPrototypeOf(DragDropItem)).call(this, props));

        _this.toggle = _this.toggle.bind(_this);
        _this.state = { isOpen: false };
        return _this;
    }

    _createClass(DragDropItem, [{
        key: 'toggle',
        value: function toggle() {
            this.setState({ isOpen: !this.state.isOpen });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                listItem = _props.listItem,
                iconClass = _props.iconClass,
                isDraggableContent = _props.isDraggableContent;

            return _react2.default.createElement(
                _reactstrap.ListGroupItem,
                { key: listItem.id },
                listItem.children && Array.isArray(listItem.children) && listItem.children.length > 0 ? [_react2.default.createElement(
                    'a',
                    { className: 'opened list-icon',
                        onClick: function onClick() {
                            return _this2.toggle();
                        }, key: 'anchor-' + listItem.id },
                    _react2.default.createElement('i', { className: this.state.isOpen ? iconClass : "fa fa-folder" }),
                    _react2.default.createElement(
                        'span',
                        { className: 'pl-1' },
                        listItem.label
                    ),
                    _react2.default.createElement('i', _extends({ className: 'fa fa-angle-right submenu-icon'
                    }, this.state.isOpen ? { style: { transform: 'rotate(90deg)' } } : {}))
                ), _react2.default.createElement(
                    _reactstrap.Collapse,
                    { isOpen: this.state.isOpen, key: 'submenu-' + listItem.id },
                    _react2.default.createElement(
                        _reactstrap.ListGroup,
                        { key: listItem.id, className: 'list-submenu-item' },
                        listItem.children.map(function (item, i) {
                            return _react2.default.createElement(DragDropItem, _extends({ key: i
                            }, _this2.props, {
                                listItem: item,
                                iconClass: 'fa fa-folder-open' }));
                        })
                    )
                )] : _react2.default.createElement(
                    'div',
                    { className: 'draggable-div', onClick: function onClick() {
                            return _this2.props.onClick(listItem);
                        } },
                    _react2.default.createElement(
                        'div',
                        { className: 'list-draggable c-pointer' },
                        isDraggableContent && _react2.default.createElement(
                            _reactDragDropContainer.DragDropContainer,
                            {
                                targetKey: this.props.targetKey ? this.props.targetKey : "dragKey",
                                dragData: listItem,
                                onDragStart: this.props.onDragStart,
                                onDrop: this.props.onDrop,
                                returnToBase: true },
                            _react2.default.createElement(
                                'div',
                                { className: 'draggable-item' },
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    listItem.label
                                )
                            )
                        ),
                        !isDraggableContent && _react2.default.createElement(
                            'div',
                            null,
                            _react2.default.createElement(
                                'span',
                                null,
                                listItem.label
                            )
                        )
                    )
                )
            );
        }
    }]);

    return DragDropItem;
}(_react.Component);

var TreeMenu = function (_Component2) {
    _inherits(TreeMenu, _Component2);

    function TreeMenu() {
        _classCallCheck(this, TreeMenu);

        return _possibleConstructorReturn(this, (TreeMenu.__proto__ || Object.getPrototypeOf(TreeMenu)).apply(this, arguments));
    }

    _createClass(TreeMenu, [{
        key: 'render',
        value: function render() {
            var _this4 = this;

            return _react2.default.createElement(
                _reactstrap.ListGroup,
                { className: 'list-menu-item' },
                this.props.listItems.map(function (item, i) {
                    return _react2.default.createElement(DragDropItem, { key: i,
                        listItem: item,
                        iconClass: 'fa fa-folder-open',
                        isDraggableContent: _this4.props.isDraggableContent,
                        targetKey: _this4.props.targetKey,
                        onClick: _this4.props.onClick
                    });
                })
            );
        }
    }]);

    return TreeMenu;
}(_react.Component);

exports.default = TreeMenu;
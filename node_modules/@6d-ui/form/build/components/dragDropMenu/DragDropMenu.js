'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DragDropItem = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

var _reactDragDropContainer = require('react-drag-drop-container');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DragDropItem = exports.DragDropItem = function (_Component) {
    _inherits(DragDropItem, _Component);

    function DragDropItem(props) {
        _classCallCheck(this, DragDropItem);

        var _this = _possibleConstructorReturn(this, (DragDropItem.__proto__ || Object.getPrototypeOf(DragDropItem)).call(this, props));

        _this.toggle = _this.toggle.bind(_this);
        _this.onDrop = _this.onDrop.bind(_this);
        _this.state = { isOpen: false };
        return _this;
    }

    _createClass(DragDropItem, [{
        key: 'toggle',
        value: function toggle() {
            this.setState({ isOpen: !this.state.isOpen });
        }
    }, {
        key: 'onDragStart',
        value: function onDragStart() {
            // console.log("onDragStart")
        }
    }, {
        key: 'onDrop',
        value: function onDrop(e) {
            // console.log('onDrop',e )
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                listItem = _props.listItem,
                iconClass = _props.iconClass;

            return _react2.default.createElement(
                _reactstrap.ListGroupItem,
                { key: listItem.id },
                listItem.children && Array.isArray(listItem.children) && listItem.children.length > 0 ? [_react2.default.createElement(
                    'a',
                    { className: 'opened list-icon',
                        onClick: function onClick() {
                            return _this2.toggle();
                        }, key: 'anchor-' + listItem.id },
                    _react2.default.createElement('i', { className: this.state.isOpen ? iconClass : "fa fa-folder" }),
                    _react2.default.createElement(
                        'span',
                        { className: 'pl-1' },
                        listItem.label
                    ),
                    _react2.default.createElement('i', _extends({ className: 'fa fa-angle-right submenu-icon'
                    }, this.state.isOpen ? { style: { transform: 'rotate(90deg)' } } : {}))
                ), _react2.default.createElement(
                    _reactstrap.Collapse,
                    { isOpen: this.state.isOpen, key: 'submenu-' + listItem.id },
                    _react2.default.createElement(
                        _reactstrap.ListGroup,
                        { className: 'list-submenu-item' },
                        listItem.children.map(function (item) {
                            return _react2.default.createElement(DragDropItem, {
                                listItem: item,
                                iconClass: 'fa fa-folder-open' });
                        })
                    )
                )] : _react2.default.createElement(
                    'div',
                    { className: 'draggable-div ' },
                    _react2.default.createElement(
                        'div',
                        { className: 'list-draggable' },
                        _react2.default.createElement(
                            'div',
                            { className: 'draggable-item' },
                            _react2.default.createElement('i', { className: 'fa fa-arrows-alt list-icon' }),
                            _react2.default.createElement(
                                _reactDragDropContainer.DragDropContainer,
                                {
                                    targetKey: 'data',
                                    dragData: listItem,
                                    onDragStart: this.onDragStart.bind(this),
                                    onDrop: this.onDrop,
                                    returnToBase: true },
                                _react2.default.createElement(
                                    'span',
                                    null,
                                    'Draggable ',
                                    listItem.label
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return DragDropItem;
}(_react.Component);

var DragDropMenu = function (_Component2) {
    _inherits(DragDropMenu, _Component2);

    function DragDropMenu(props) {
        _classCallCheck(this, DragDropMenu);

        var _this3 = _possibleConstructorReturn(this, (DragDropMenu.__proto__ || Object.getPrototypeOf(DragDropMenu)).call(this, props));

        _this3.state = { isHovering: false };
        _this3.dropped = _this3.dropped.bind(_this3);
        _this3.highlight = _this3.highlight.bind(_this3);
        _this3.unHighlight = _this3.unHighlight.bind(_this3);

        return _this3;
    }

    _createClass(DragDropMenu, [{
        key: 'highlight',
        value: function highlight(ev) {
            this.setState({ isHovering: true });
        }
    }, {
        key: 'unHighlight',
        value: function unHighlight(ev) {
            this.setState({ isHovering: false });
        }
    }, {
        key: 'dropped',
        value: function dropped(e) {
            console.log("data:::::::", e.dragData);
            this.setState({ isHovering: false });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: 'custom-container' },
                _react2.default.createElement(
                    _reactstrap.Container,
                    { className: 'pt-3' },
                    _react2.default.createElement(
                        _reactstrap.Row,
                        null,
                        _react2.default.createElement(
                            _reactstrap.Col,
                            { lg: '3' },
                            _react2.default.createElement(
                                _reactstrap.ListGroup,
                                { className: 'list-menu-item' },
                                this.props.listItems.map(function (item) {
                                    return _react2.default.createElement(DragDropItem, { listItem: item, iconClass: 'fa fa-folder-open' });
                                })
                            )
                        ),
                        _react2.default.createElement(
                            _reactstrap.Col,
                            { lg: '9', className: 'bg-white p-0' },
                            _react2.default.createElement(
                                'div',
                                { className: 'drop-div', style: { width: "100%", height: "100%" } },
                                _react2.default.createElement(
                                    _reactDragDropContainer.DropTarget,
                                    {
                                        targetKey: 'data',
                                        onDragEnter: this.highlight,
                                        onDragLeave: this.unHighlight,
                                        onHit: this.dropped },
                                    _react2.default.createElement(
                                        'div',
                                        { className: 'w-100 h-100' },
                                        this.state.isHovering && _react2.default.createElement(
                                            'span',
                                            null,
                                            'Drop Here'
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return DragDropMenu;
}(_react.Component);

exports.default = DragDropMenu;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StyledDropDown = function (_Component) {
    _inherits(StyledDropDown, _Component);

    function StyledDropDown(props) {
        _classCallCheck(this, StyledDropDown);

        var _this = _possibleConstructorReturn(this, (StyledDropDown.__proto__ || Object.getPrototypeOf(StyledDropDown)).call(this, props));

        _this.toggle = _this.toggle.bind(_this);
        _this.onSelect = _this.onSelect.bind(_this);
        _this.state = {
            dropdownOpen: false
        };
        return _this;
    }

    _createClass(StyledDropDown, [{
        key: 'getSelectedOption',
        value: function getSelectedOption(value, options) {
            if (!options) {
                return;
            } else {
                for (var i = 0, len = options.length; i < len; i++) {
                    if (options[i].value === value) return options[i];
                }
            }
        }
    }, {
        key: 'toggle',
        value: function toggle() {
            this.setState({
                dropdownOpen: !this.state.dropdownOpen
            });
        }
    }, {
        key: 'onSelect',
        value: function onSelect(selected) {
            var _this2 = this;

            this.setState({ selected: selected }, function () {
                _this2.props.onSelect && _this2.props.onSelect(_this2.state.selected);
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var options = this.props.options;

            var selected = this.getSelectedOption(this.props.value, this.props.options) || this.state.selected;
            return _react2.default.createElement(
                _reactstrap.Dropdown,
                { isOpen: this.state.dropdownOpen, toggle: this.toggle },
                _react2.default.createElement(
                    _reactstrap.DropdownToggle,
                    { tag: 'span', className: 'fs-12 text-primary', style: { cursor: 'pointer' } },
                    selected ? _react2.default.createElement(
                        'span',
                        null,
                        selected.label
                    ) : _react2.default.createElement(
                        'span',
                        { className: 'text-muted' },
                        'Select'
                    ),
                    _react2.default.createElement('i', { className: 'fa fa-chevron-down pl-2' })
                ),
                _react2.default.createElement(
                    _reactstrap.DropdownMenu,
                    { className: 'fs-12' },
                    options && options.length > 0 ? options.map(function (option) {
                        return _react2.default.createElement(
                            _reactstrap.DropdownItem,
                            { key: option.id ? option.id : option.value, onClick: function onClick(e) {
                                    return _this3.onSelect(option);
                                } },
                            option.label
                        );
                    }) : _react2.default.createElement(
                        'span',
                        { className: 'font-italic text-muted px-2' },
                        'No values...'
                    )
                )
            );
        }
    }]);

    return StyledDropDown;
}(_react.Component);

exports.default = StyledDropDown;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

var _reactDropzone = require('react-dropzone');

var _reactDropzone2 = _interopRequireDefault(_reactDropzone);

var _buttons = require('@6d-ui/buttons');

var _fields = require('@6d-ui/fields');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
// import FieldItem from '../common/FieldItem';


var getEnabledOptions = function getEnabledOptions(options, inputs) {
    var selectedOpts = inputs.map(function (input) {
        return input && input.docType ? input.docType.value : null;
    });
    return options ? options.map(function (option) {
        option.disabled = selectedOpts.indexOf(option.value) >= 0;
        return option;
    }) : [];
};

var DocumentRow = function DocumentRow(props) {
    var document = props.document,
        options = props.options,
        onDocTypeChange = props.onDocTypeChange,
        onRemove = props.onRemove,
        _onDrop = props.onDrop,
        index = props.index,
        dzStyle = props.dzStyle;

    var drzStyle = dzStyle ? dzStyle : {
        width: '100px',
        padding: '5px 10px',
        marginRight: '8px',
        border: '1px solid',
        color: '#0096DE',
        cursor: 'pointer',
        textAlign: 'center',
        lineHeight: 1.5,
        fontSize: '1rem'
    };
    var handleDocTypeChange = function handleDocTypeChange(value, obj) {
        var _ref = obj || { isTouched: false },
            isTouched = _ref.isTouched;

        if (isTouched) return;
        onDocTypeChange(value, index);
    };
    return _react2.default.createElement(
        _reactstrap.Row,
        { className: 'mx-0 mb-2' },
        _react2.default.createElement(_fields.FieldItem, {
            width: 'md',
            type: '1',
            values: options,
            value: document.docType
            // onChange={value => onDocTypeChange(value, index)}
            , onChange: handleDocTypeChange,
            label: 'Document Type'
        }),
        _react2.default.createElement(
            _reactstrap.Col,
            { md: '4' },
            _react2.default.createElement(
                'label',
                { className: 'form-control-label' },
                'Document Name'
            ),
            _react2.default.createElement('input', { disabled: true, className: 'form-control', value: document.file && document.file.name, style: { borderColor: '#cccccc' } })
        ),
        _react2.default.createElement(
            _reactstrap.Col,
            { md: '4' },
            _react2.default.createElement(
                'label',
                { className: 'form-control-label' },
                '\xA0'
            ),
            _react2.default.createElement(
                'div',
                { className: 'onClick={() => onRemove(index)}' },
                _react2.default.createElement(
                    _reactDropzone2.default,
                    { style: drzStyle, onDrop: function onDrop(files) {
                            return _onDrop(files, index);
                        }, className: 'fs-600 float-left rounded' },
                    _react2.default.createElement(
                        'span',
                        null,
                        'Browse'
                    )
                ),
                _react2.default.createElement(_buttons.CustomButton, _defineProperty({
                    style: _buttons.BUTTON_STYLE.BRICK,
                    type: _buttons.BUTTON_TYPE.SECONDARY,
                    size: _buttons.BUTTON_SIZE.MEDIUM_LARGE,
                    align: 'left',
                    label: 'Remove',
                    isButtonGroup: true,
                    onClick: function onClick() {
                        return onRemove(index);
                    }, outline: true }, 'style', { width: '100px' }))
            )
        )
    );
};

var DocumentInput = function DocumentInput(props) {
    var documents = props.documents,
        onDocTypeChange = props.onDocTypeChange,
        onRemoveInput = props.onRemoveInput,
        onDocumentDrop = props.onDocumentDrop,
        dzStyle = props.dzStyle;

    var docTypeOptions = getEnabledOptions(props.docTypeOptions, documents);

    return _react2.default.createElement(
        _reactstrap.Container,
        { className: 'form-Brick-body mb-3' },
        documents && documents.map(function (document, index) {
            return _react2.default.createElement(DocumentRow, {
                key: index,
                document: document,
                index: index,
                options: docTypeOptions,
                onDocTypeChange: onDocTypeChange,
                onRemove: onRemoveInput,
                onDrop: onDocumentDrop,
                dzStyle: dzStyle
            });
        }),
        _react2.default.createElement(
            _reactstrap.Row,
            null,
            _react2.default.createElement(
                _reactstrap.Col,
                { className: 'clearfix mt-3 mr-4' },
                _react2.default.createElement(_buttons.CustomButton, {
                    style: _buttons.BUTTON_STYLE.BRICK,
                    type: _buttons.BUTTON_TYPE.PRIMARY,
                    size: _buttons.BUTTON_SIZE.MEDIUM,
                    align: 'right',
                    label: 'Add',
                    isButtonGroup: true,
                    disabled: docTypeOptions.length <= documents.length,
                    onClick: docTypeOptions.length <= documents.length ? null : props.onAddInput
                })
            )
        )
    );
};

exports.default = DocumentInput;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

var _popup = require('@6d-ui/popup');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DocumentViewer = function (_Component) {
    _inherits(DocumentViewer, _Component);

    function DocumentViewer(props) {
        _classCallCheck(this, DocumentViewer);

        var _this = _possibleConstructorReturn(this, (DocumentViewer.__proto__ || Object.getPrototypeOf(DocumentViewer)).call(this, props));

        _this.getFileToView = function () {

            _this.props.ajaxUtil.sendRequest(_this.props.srcPath, _this.props.requestData, function (response, hasError) {

                if (response && !hasError) {
                    var headers = response.headers;

                    var contentType = headers['content-type'];
                    if (contentType.indexOf('pdf') > -1 || contentType.indexOf('image') > -1) {
                        var fileUrl = window.URL.createObjectURL(response.data);
                        _this.setState({ fileUrl: fileUrl, isfileSupported: true, isOpen: true });
                    } else {
                        _this.setState({ isfileSupported: false });
                        _this.props.toggleModal();
                    }
                } else {
                    _this.toggleModal(_this.props.isOpen);
                }
            }, _this.props.loadingFunction, {
                isShowSuccess: false,
                method: 'GET',
                returnFullResponse: true,
                responseType: 'blob'
            });
        };

        _this.toggleModal = function (isOpen) {
            _this.setState({ isOpen: false }, function () {
                return _this.props.toggleModal();
            });
        };

        _this.state = { isfileSupported: true, isOpen: false };
        _this.updateWindowDimensions = _this.updateWindowDimensions.bind(_this);
        return _this;
    }

    _createClass(DocumentViewer, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.updateWindowDimensions();
            window.addEventListener("resize", this.updateWindowDimensions);
            this.props.isOpen && this.getFileToView();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            if (this.props.isOpen && prevProps.isOpen !== this.props.isOpen) {
                this.getFileToView();
            }
        }
    }, {
        key: 'updateWindowDimensions',
        value: function updateWindowDimensions() {
            this.setState({ windowHeight: window.innerHeight });
        }
    }, {
        key: 'render',
        value: function render() {
            var height = { height: this.state.windowHeight - 131 };
            return _react2.default.createElement(_popup.Popup, {
                type: _popup.POPUP_ALIGN.RIGHT,
                title: 'View Document',
                isOpen: this.state.isOpen,
                close: this.toggleModal,
                minWidth: '85%',
                component: _react2.default.createElement(
                    _reactstrap.ModalBody,
                    { className: 'px-4 py-4' },
                    _react2.default.createElement(
                        'div',
                        { className: 'form-tab overlay_position', style: height },
                        this.state.fileUrl && _react2.default.createElement('iframe', {
                            title: 'documentViewModalIframe',
                            src: this.state.fileUrl,
                            style: { width: '95%', height: '500px' },
                            frameBorder: '0' }),
                        !this.state.isfileSupported && _react2.default.createElement(
                            'div',
                            { className: 'errorMsg_login text-center' },
                            'Downloading...'
                        )
                    )
                )
            });
        }
    }]);

    return DocumentViewer;
}(_react.Component);

exports.default = DocumentViewer;
{"ast":null,"code":"var _jsxFileName = \"/home/alrin/Downloads/INVENTORY22/src/components/inventory/component/Pagination.js\";\n// import React from 'react';\n// import PropTypes from 'prop-types';\n// const propTypes = {\n//     items: PropTypes.array.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     initialPage: PropTypes.number,\n//     pageSize: PropTypes.number\n// }\n// const defaultProps = {\n//     initialPage: 1,\n//     pageSize: 5\n// }\n// class Pagination extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { pager: {} };\n//     }\n//     componentWillMount() {\n//         // set page if items array isn't empty\n//         if (this.props.items && this.props.items.length) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n//     componentDidUpdate(prevProps, prevState) {\n//         // reset page if items array has changed\n//         if (this.props.items !== prevProps.items) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n//     setPage(page) {\n//         var { items, pageSize } = this.props;\n//         var pager = this.state.pager;\n//         if (page < 1 || page > pager.totalPages) {\n//             return;\n//         }\n//         // get new pager object for specified page\n//         pager = this.getPager(items.length, page, pageSize);\n//         // get new page of items from items array\n//         // var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n//         var pageOfItems =this.state.pager.currentPage;\n//         // update state\n//         this.setState({ pager: pager });\n//         // call change page function in parent component\n//         this.props.onChangePage(pageOfItems);\n//     }\n//     getPager(totalItems, currentPage, pageSize) {\n//         // default to first page\n//         currentPage = currentPage || 1;\n//         // default page size is 10\n//         pageSize = pageSize || 5;\n//         // calculate total pages\n//         var totalPages = Math.ceil(totalItems / pageSize);\n//         var startPage, endPage;\n//         if (totalPages <= 10) {\n//             // less than 10 total pages so show all\n//             startPage = 1;\n//             endPage = totalPages;\n//         } else {\n//             // more than 10 total pages so calculate start and end pages\n//             if (currentPage <= 6) {\n//                 startPage = 1;\n//                 endPage = 10;\n//             } else if (currentPage + 4 >= totalPages) {\n//                 startPage = totalPages - 9;\n//                 endPage = totalPages;\n//             } else {\n//                 startPage = currentPage - 5;\n//                 endPage = currentPage + 4;\n//             }\n//         }\n//         // var startPage, endPage;\n//         // if (totalPages <= 5) {\n//         //     // less than 10 total pages so show all\n//         //     startPage = 1;\n//         //     endPage = totalPages;\n//         // } else {\n//         //     // more than 10 total pages so calculate start and end pages\n//         //     if (currentPage <= 3) {\n//         //         startPage = 1;\n//         //         endPage = 5;\n//         //     } else if (currentPage + 2 >= totalPages) {\n//         //         startPage = totalPages - 4;\n//         //         endPage = totalPages;\n//         //     } else {\n//         //         startPage = currentPage - 1;\n//         //         endPage = currentPage + 3;\n//         //     }\n//         // }\n//         // calculate start and end item indexes\n//         var startIndex = (currentPage - 1) * pageSize;\n//         var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n//         // create an array of pages to ng-repeat in the pager control\n//         var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n//         console.log(pages);\n//         // return object with all pager properties required by the view\n//         return {\n//             totalItems: totalItems,\n//             currentPage: currentPage,\n//             pageSize: pageSize,\n//             totalPages: totalPages,\n//             startPage: startPage,\n//             endPage: endPage,\n//             startIndex: startIndex,\n//             endIndex: endIndex,\n//             pages: pages\n//         };\n//     }\n//     render() {\n//         var pager = this.state.pager;\n//         if (!pager.pages || pager.pages.length <= 1) {\n//             // don't display pager if there is only 1 page\n//             return null;\n//         }\n//         return (\n//             <div>\n//             <nav aria-label=\"Page navigation\">\n//                 <ul className=\"pagination\">\n//                     <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n//                     </li>\n//                     <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//                     </li>\n//                     {pager.pages.map((page, index) =>\n//                         <li  key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n//                             <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n//                         </li>\n//                     )}\n//                     <li  className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//                     </li>\n//                     <li className=\"\" className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//                     </li>\n//                 </ul>\n//             </nav>\n//             </div>\n//         );\n//     }\n// }\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n// export default Pagination;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number,\n  totalItems: PropTypes.number\n};\nconst defaultProps = {\n  initialPage: 1,\n  pageSize: 10\n};\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pager: {}\n    };\n  } // componentWillMount() {\n  //     // set page if items array isn't empty\n  //     if (this.props.items && this.props.items.length) {\n  //         this.setPage(this.props.initialPage);\n  //     }\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //     // reset page if items array has changed\n  //     if (this.props.items !== prevProps.items) {\n  //         this.setPage(this.props.initialPage);\n  //     }\n  // }\n\n\n  setPage(page) {\n    var {\n      totalItems,\n      items,\n      pageSize\n    } = this.props;\n    var pager = this.state.pager;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    } // get new pager object for specified page\n\n\n    pager = this.getPager(totalItems, page, pageSize);\n    console.log(pager); // get new page of items from items array\n\n    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1); // var pageOfItems =this.setState.pager;\n    // update state\n\n    this.setState({\n      pager: pager\n    }); // call change page function in parent component\n\n    this.props.onChangePage(pager);\n  }\n\n  getPager(totalItems, currentPage, pageSize) {\n    // default to first page\n    currentPage = currentPage || 1; // default page size is 10\n\n    pageSize = pageSize || 10; // calculate total pages\n\n    var totalPages = Math.ceil(totalItems / pageSize);\n    var startPage, endPage;\n\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    } // var startPage, endPage;\n    // if (totalPages <= 5) {\n    //     // less than 10 total pages so show all\n    //     startPage = 1;\n    //     endPage = totalPages;\n    // } else {\n    //     // more than 10 total pages so calculate start and end pages\n    //     if (currentPage <= 3) {\n    //         startPage = 1;\n    //         endPage = 5;\n    //     } else if (currentPage + 2 >= totalPages) {\n    //         startPage = totalPages - 4;\n    //         endPage = totalPages;\n    //     } else {\n    //         startPage = currentPage - 1;\n    //         endPage = currentPage + 3;\n    //     }\n    // }\n    // calculate start and end item indexes\n\n\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n    console.log(pages); // return object with all pager properties required by the view\n\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  }\n\n  render() {\n    var pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      \"aria-label\": \"Page navigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"page-item\",\n      className: pager.currentPage === 1 ? 'disabled' : ' ',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"First\")), React.createElement(\"li\", {\n      className: \"page-item\",\n      className: pager.currentPage === 1 ? 'disabled' : ' ',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(pager.currentPage - 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"Previous\")), pager.pages.map((page, index) => React.createElement(\"li\", {\n      className: \"page-item\",\n      key: index,\n      className: \"page-item\",\n      className: pager.currentPage === page ? 'active' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(page),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, page))), React.createElement(\"li\", {\n      className: \"page-item\",\n      className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(pager.currentPage + 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Next\")), React.createElement(\"li\", {\n      className: \"page-item\",\n      className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(pager.totalPages),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"Last\")))));\n  }\n\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/inventory/component/Pagination.js"],"names":["React","PropTypes","propTypes","items","array","isRequired","onChangePage","func","initialPage","number","pageSize","totalItems","defaultProps","Pagination","Component","constructor","props","state","pager","setPage","page","totalPages","getPager","console","log","pageOfItems","slice","startIndex","endIndex","setState","currentPage","Math","ceil","startPage","endPage","min","pages","Array","keys","map","i","render","length","index"],"mappingskB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAEF,SAAS,CAACG,KAAV,CAAgBC,UADT;AAEdC,EAAAA,YAAY,EAAEL,SAAS,CAACM,IAAV,CAAeF,UAFf;AAGdG,EAAAA,WAAW,EAAEP,SAAS,CAACQ,MAHT;AAIdC,EAAAA,QAAQ,EAAET,SAAS,CAACQ,MAJN;AAKdE,EAAAA,UAAU,EAACV,SAAS,CAACQ;AALP,CAAlB;AAQA,MAAMG,YAAY,GAAG;AACjBJ,EAAAA,WAAW,EAAE,CADI;AAEjBE,EAAAA,QAAQ,EAAE;AAFO,CAArB;;AAKA,MAAMG,UAAN,SAAyBb,KAAK,CAACc,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AAEH,GALoC,CAOrC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,QAAI;AAAET,MAAAA,UAAF;AAAaR,MAAAA,KAAb;AAAoBO,MAAAA;AAApB,QAAiC,KAAKM,KAA1C;AACA,QAAIE,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAEA,QAAIE,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAGF,KAAK,CAACG,UAA7B,EAAyC;AACrC;AACH,KANS,CAQV;;;AACAH,IAAAA,KAAK,GAAG,KAAKI,QAAL,CAAcX,UAAd,EAA0BS,IAA1B,EAAgCV,QAAhC,CAAR;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAVU,CAYV;;AACA,QAAIO,WAAW,GAAGtB,KAAK,CAACuB,KAAN,CAAYR,KAAK,CAACS,UAAlB,EAA8BT,KAAK,CAACU,QAAN,GAAiB,CAA/C,CAAlB,CAbU,CAcV;AAGA;;AACA,SAAKC,QAAL,CAAc;AAAEX,MAAAA,KAAK,EAAEA;AAAT,KAAd,EAlBU,CAoBV;;AACA,SAAKF,KAAL,CAAWV,YAAX,CAAwBY,KAAxB;AACH;;AAEDI,EAAAA,QAAQ,CAACX,UAAD,EAAamB,WAAb,EAA0BpB,QAA1B,EAAoC;AACxC;AACAoB,IAAAA,WAAW,GAAGA,WAAW,IAAI,CAA7B,CAFwC,CAIxC;;AACApB,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB,CALwC,CAOxC;;AACA,QAAIW,UAAU,GAAGU,IAAI,CAACC,IAAL,CAAUrB,UAAU,GAAGD,QAAvB,CAAjB;AAEA,QAAIuB,SAAJ,EAAeC,OAAf;;AACA,QAAIb,UAAU,IAAI,EAAlB,EAAsB;AAClB;AACAY,MAAAA,SAAS,GAAG,CAAZ;AACAC,MAAAA,OAAO,GAAGb,UAAV;AACH,KAJD,MAIO;AACH;AACA,UAAIS,WAAW,IAAI,CAAnB,EAAsB;AAClBG,QAAAA,SAAS,GAAG,CAAZ;AACAC,QAAAA,OAAO,GAAG,EAAV;AACH,OAHD,MAGO,IAAIJ,WAAW,GAAG,CAAd,IAAmBT,UAAvB,EAAmC;AACtCY,QAAAA,SAAS,GAAGZ,UAAU,GAAG,CAAzB;AACAa,QAAAA,OAAO,GAAGb,UAAV;AACH,OAHM,MAGA;AACHY,QAAAA,SAAS,GAAGH,WAAW,GAAG,CAA1B;AACAI,QAAAA,OAAO,GAAGJ,WAAW,GAAG,CAAxB;AACH;AACJ,KA3BuC,CA6BxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,QAAIH,UAAU,GAAG,CAACG,WAAW,GAAG,CAAf,IAAoBpB,QAArC;AACA,QAAIkB,QAAQ,GAAGG,IAAI,CAACI,GAAL,CAASR,UAAU,GAAGjB,QAAb,GAAwB,CAAjC,EAAoCC,UAAU,GAAG,CAAjD,CAAf,CAlDwC,CAoDxC;;AACA,QAAIyB,KAAK,GAAG,CAAC,GAAGC,KAAK,CAAEH,OAAO,GAAG,CAAX,GAAgBD,SAAjB,CAAL,CAAiCK,IAAjC,EAAJ,EAA6CC,GAA7C,CAAiDC,CAAC,IAAIP,SAAS,GAAGO,CAAlE,CAAZ;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ,EAtDwC,CAwDxC;;AACA,WAAO;AACHzB,MAAAA,UAAU,EAAEA,UADT;AAEHmB,MAAAA,WAAW,EAAEA,WAFV;AAGHpB,MAAAA,QAAQ,EAAEA,QAHP;AAIHW,MAAAA,UAAU,EAAEA,UAJT;AAKHY,MAAAA,SAAS,EAAEA,SALR;AAMHC,MAAAA,OAAO,EAAEA,OANN;AAOHP,MAAAA,UAAU,EAAEA,UAPT;AAQHC,MAAAA,QAAQ,EAAEA,QARP;AASHQ,MAAAA,KAAK,EAAEA;AATJ,KAAP;AAWH;;AAEDK,EAAAA,MAAM,GAAG;AACL,QAAIvB,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAEA,QAAI,CAACA,KAAK,CAACkB,KAAP,IAAgBlB,KAAK,CAACkB,KAAN,CAAYM,MAAZ,IAAsB,CAA1C,EAA6C;AACzC;AACA,aAAO,IAAP;AACH;;AAED,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,oBAAW,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,WAAd;AAA2B,MAAA,SAAS,EAAExB,KAAK,CAACY,WAAN,KAAsB,CAAtB,GAA0B,UAA1B,GAAuC,GAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKX,OAAL,CAAa,CAAb,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CADJ,EAII;AAAI,MAAA,SAAS,EAAC,WAAd;AAA2B,MAAA,SAAS,EAAED,KAAK,CAACY,WAAN,KAAsB,CAAtB,GAA0B,UAA1B,GAAuC,GAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKX,OAAL,CAAaD,KAAK,CAACY,WAAN,GAAoB,CAAjC,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAJJ,EAOKZ,KAAK,CAACkB,KAAN,CAAYG,GAAZ,CAAgB,CAACnB,IAAD,EAAOuB,KAAP,KACb;AAAI,MAAA,SAAS,EAAC,WAAd;AAA2B,MAAA,GAAG,EAAEA,KAAhC;AAAuC,MAAA,SAAS,EAAC,WAAjD;AAA6D,MAAA,SAAS,EAAEzB,KAAK,CAACY,WAAN,KAAsBV,IAAtB,GAA6B,QAA7B,GAAwC,EAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKD,OAAL,CAAaC,IAAb,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6DA,IAA7D,CADJ,CADH,CAPL,EAYI;AAAI,MAAA,SAAS,EAAC,WAAd;AAA2B,MAAA,SAAS,EAAEF,KAAK,CAACY,WAAN,KAAsBZ,KAAK,CAACG,UAA5B,GAAyC,UAAzC,GAAsD,EAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKF,OAAL,CAAaD,KAAK,CAACY,WAAN,GAAoB,CAAjC,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAZJ,EAeI;AAAI,MAAA,SAAS,EAAC,WAAd;AAA0B,MAAA,SAAS,EAAEZ,KAAK,CAACY,WAAN,KAAsBZ,KAAK,CAACG,UAA5B,GAAyC,UAAzC,GAAsD,EAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKF,OAAL,CAAaD,KAAK,CAACG,UAAnB,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAfJ,CAFJ,CADA,CADJ;AA0BH;;AArJoC;;AAwJzCR,UAAU,CAACX,SAAX,GAAuBA,SAAvB;AACAW,UAAU,CAACD,YAAX,GAA0BA,YAA1B;AACA,eAAeC,UAAf","sourcesContent":["// import React from 'react';\n// import PropTypes from 'prop-types';\n\n// const propTypes = {\n//     items: PropTypes.array.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     initialPage: PropTypes.number,\n//     pageSize: PropTypes.number\n// }\n\n// const defaultProps = {\n//     initialPage: 1,\n//     pageSize: 5\n// }\n\n// class Pagination extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { pager: {} };\n//     }\n\n//     componentWillMount() {\n//         // set page if items array isn't empty\n//         if (this.props.items && this.props.items.length) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n\n//     componentDidUpdate(prevProps, prevState) {\n//         // reset page if items array has changed\n//         if (this.props.items !== prevProps.items) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n\n//     setPage(page) {\n//         var { items, pageSize } = this.props;\n//         var pager = this.state.pager;\n\n//         if (page < 1 || page > pager.totalPages) {\n//             return;\n//         }\n\n//         // get new pager object for specified page\n//         pager = this.getPager(items.length, page, pageSize);\n\n//         // get new page of items from items array\n//         // var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n//         var pageOfItems =this.state.pager.currentPage;\n\n//         // update state\n//         this.setState({ pager: pager });\n\n//         // call change page function in parent component\n//         this.props.onChangePage(pageOfItems);\n//     }\n\n//     getPager(totalItems, currentPage, pageSize) {\n//         // default to first page\n//         currentPage = currentPage || 1;\n\n//         // default page size is 10\n//         pageSize = pageSize || 5;\n\n//         // calculate total pages\n//         var totalPages = Math.ceil(totalItems / pageSize);\n\n//         var startPage, endPage;\n//         if (totalPages <= 10) {\n//             // less than 10 total pages so show all\n//             startPage = 1;\n//             endPage = totalPages;\n//         } else {\n//             // more than 10 total pages so calculate start and end pages\n//             if (currentPage <= 6) {\n//                 startPage = 1;\n//                 endPage = 10;\n//             } else if (currentPage + 4 >= totalPages) {\n//                 startPage = totalPages - 9;\n//                 endPage = totalPages;\n//             } else {\n//                 startPage = currentPage - 5;\n//                 endPage = currentPage + 4;\n//             }\n//         }\n\n//         // var startPage, endPage;\n//         // if (totalPages <= 5) {\n//         //     // less than 10 total pages so show all\n//         //     startPage = 1;\n//         //     endPage = totalPages;\n//         // } else {\n//         //     // more than 10 total pages so calculate start and end pages\n//         //     if (currentPage <= 3) {\n//         //         startPage = 1;\n//         //         endPage = 5;\n//         //     } else if (currentPage + 2 >= totalPages) {\n//         //         startPage = totalPages - 4;\n//         //         endPage = totalPages;\n//         //     } else {\n//         //         startPage = currentPage - 1;\n//         //         endPage = currentPage + 3;\n//         //     }\n//         // }\n\n//         // calculate start and end item indexes\n//         var startIndex = (currentPage - 1) * pageSize;\n//         var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n//         // create an array of pages to ng-repeat in the pager control\n//         var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n//         console.log(pages);\n\n//         // return object with all pager properties required by the view\n//         return {\n//             totalItems: totalItems,\n//             currentPage: currentPage,\n//             pageSize: pageSize,\n//             totalPages: totalPages,\n//             startPage: startPage,\n//             endPage: endPage,\n//             startIndex: startIndex,\n//             endIndex: endIndex,\n//             pages: pages\n//         };\n//     }\n\n//     render() {\n//         var pager = this.state.pager;\n\n//         if (!pager.pages || pager.pages.length <= 1) {\n//             // don't display pager if there is only 1 page\n//             return null;\n//         }\n\n//         return (\n//             <div>\n//             <nav aria-label=\"Page navigation\">\n\n//                 <ul className=\"pagination\">\n//                     <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n//                     </li>\n//                     <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//                     </li>\n//                     {pager.pages.map((page, index) =>\n//                         <li  key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n//                             <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n//                         </li>\n//                     )}\n//                     <li  className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//                     </li>\n//                     <li className=\"\" className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//                     </li>\n//                 </ul>\n//             </nav>\n//             </div>\n//         );\n//     }\n// }\n\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n// export default Pagination;\n\n\n\n\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n    items: PropTypes.array.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    initialPage: PropTypes.number,\n    pageSize: PropTypes.number,\n    totalItems:PropTypes.number\n}\n\nconst defaultProps = {\n    initialPage: 1,\n    pageSize: 10\n}\n\nclass Pagination extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { pager: {} };\n\n    }\n\n    // componentWillMount() {\n    //     // set page if items array isn't empty\n    //     if (this.props.items && this.props.items.length) {\n    //         this.setPage(this.props.initialPage);\n    //     }\n    // }\n\n    // componentDidUpdate(prevProps, prevState) {\n    //     // reset page if items array has changed\n    //     if (this.props.items !== prevProps.items) {\n    //         this.setPage(this.props.initialPage);\n    //     }\n    // }\n\n    setPage(page) {\n        var { totalItems,items, pageSize } = this.props;\n        var pager = this.state.pager;\n\n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n\n        // get new pager object for specified page\n        pager = this.getPager(totalItems, page, pageSize);\n        console.log(pager)\n\n        // get new page of items from items array\n        var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n        // var pageOfItems =this.setState.pager;\n  \n\n        // update state\n        this.setState({ pager: pager });\n\n        // call change page function in parent component\n        this.props.onChangePage(pager);\n    }\n\n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n\n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n\n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (currentPage + 4 >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n\n        // var startPage, endPage;\n        // if (totalPages <= 5) {\n        //     // less than 10 total pages so show all\n        //     startPage = 1;\n        //     endPage = totalPages;\n        // } else {\n        //     // more than 10 total pages so calculate start and end pages\n        //     if (currentPage <= 3) {\n        //         startPage = 1;\n        //         endPage = 5;\n        //     } else if (currentPage + 2 >= totalPages) {\n        //         startPage = totalPages - 4;\n        //         endPage = totalPages;\n        //     } else {\n        //         startPage = currentPage - 1;\n        //         endPage = currentPage + 3;\n        //     }\n        // }\n\n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n        console.log(pages);\n\n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages\n        };\n    }\n\n    render() {\n        var pager = this.state.pager;\n\n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n\n        return (\n            <div>\n            <nav aria-label=\"Page navigation\">\n\n                <ul className=\"pagination\">\n                    <li className=\"page-item\"  className={pager.currentPage === 1 ? 'disabled' : ' '}>\n                        <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n                    </li>\n                    <li className=\"page-item\"  className={pager.currentPage === 1 ? 'disabled' : ' '}>\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n                    </li>\n                    {pager.pages.map((page, index) =>\n                        <li className=\"page-item\"  key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n                            <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n                        </li>\n                    )}\n                    <li className=\"page-item\"  className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n                    </li>\n                    <li className=\"page-item\" className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n                    </li>\n                </ul>\n            </nav>\n            </div>\n        );\n    }\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
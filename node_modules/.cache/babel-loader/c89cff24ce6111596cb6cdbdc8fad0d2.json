{"ast":null,"code":"// import React, { Component } from 'react';\n// import moment from 'moment';\n// import DateRangePicker from 'react-bootstrap-daterangepicker';\n// import 'bootstrap-daterangepicker/daterangepicker.css';\n// import { Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n// export default class AddEditBuyBack extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       buyBackType: '',\n//       channel: '',\n//       region: '',\n//       cluster: '',\n//       distribution: '',\n//       outlet: '',\n//       fgCode: '',\n//       startDate: '',\n//       endDate: '',\n//       sellCheck: 'yes',\n//       buyBackTypeList: [],\n//       channelsLis: [],\n//       regionList: [],\n//       clusterList: [],\n//       distributionList: [],\n//       outletList: [],\n//       fgCodeList: [],\n//     }\n//   }\n//   componentDidMount() {\n//     this.getBuyBackTypes();\n//     this.getChannels();\n//     this.getDistributionList();\n//     this.getOutletList();\n//     this.getFgCode();\n//   }\n//   getFgCode = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_FGCODE + '?isPageable=false&pageNo=0&pageSize=10000',\n//       {},\n//       (response) => {\n//         this.setState({ fgCodeList: response.data })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getDistributionList = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_DISTRIBUTION,\n//       {},\n//       (response) => {\n//         this.setState({ distributionList: response.content })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getOutletList = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_OUTLET,\n//       {},\n//       (response) => {\n//         this.setState({ outletList: response.content })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getChannels = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_CHANNEL,\n//       {},\n//       (response) => {\n//         this.setState({ channelsLis: response });\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getBuyBackTypes = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_TYPE + '?isPageable=false&pageNo=0&pageSize=1000',\n//       {},\n//       (response) => {\n//         if (!response.status) {\n//           this.props.setNotification({\n//             message: response.message,\n//             hasError: response.status,\n//             timestamp: new Date().getTime()\n//           });\n//         } else {\n//           if (response.hasOwnProperty('data')) {\n//             this.setState({ buyBackTypeList: response.data })\n//           }\n//         }\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getRegions = (channelId) => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_REGION + `?channelId=${channelId}&typeId=2`,\n//       {},\n//       (response) => {\n//         this.setState({ regionList: response })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   save = () => {\n//     const { buyBackType, channel, region, cluster, distribution, outlet, fgCode, startDate, endDate, sellCheck } = this.state;\n//     if (buyBackType.trim().length <= 0 ||\n//       channel.trim().length <= 0 ||\n//       region.trim().length <= 0 ||\n//       cluster.trim().length <= 0 ||\n//       distribution.trim().length <= 0 ||\n//       outlet.trim().length <= 0 ||\n//       fgCode.trim().length <= 0 ||\n//       startDate.trim().length <= 0 ||\n//       endDate.trim().length <= 0 ||\n//       sellCheck.trim().length <= 0) {\n//       this.props.setNotification({\n//         message: 'please fill up',\n//         hasError: true,\n//         timestamp: new Date().getTime()\n//       });\n//       return;\n//     }\n//     let channelName = '';\n//     this.state.channelsLis.forEach((ch) => {\n//       if (ch.id == channel) {\n//         channelName = ch.channelName;\n//       }\n//     })\n//     let clusterName = '';\n//     this.state.clusterList.forEach((clu) => {\n//       if (clu.id == cluster) {\n//         clusterName = clu.locationName\n//       }\n//     });\n//     let distributerName = '';\n//     this.state.distributionList.forEach((dis) => {\n//       if (dis.id == distribution) {\n//         distributerName = dis.customerName\n//       }\n//     });\n//     let outletName = '';\n//     this.state.outletList.forEach((out) => {\n//       if (out.id == outlet) {\n//         outletName = out.name\n//       }\n//     });\n//     let regionName = '';\n//     this.state.regionList.forEach((reg) => {\n//       if (reg.id == region) {\n//         regionName = reg.locationName\n//       }\n//     });\n//     let submitData = {\n//       \"buyBackType\": buyBackType,\n//       \"channel\": channel,\n//       \"channelName\": channelName,\n//       \"cluster\": cluster,\n//       \"clusterName\": clusterName,\n//       \"distributer\": distribution,\n//       \"distributerName\": distributerName,\n//       \"fgCode\": fgCode,\n//       \"fromDate\": moment(startDate, 'DD-MM-YYYY').format('YYYY-MM-DD'),\n//       \"id\": 0,\n//       \"outlet\": outlet,\n//       \"outletName\": outletName,\n//       \"region\": region,\n//       \"regionName\": regionName,\n//       \"sellThruCheck\": (sellCheck == 'yes') ? true : false,\n//       \"toDate\": moment(endDate, 'DD-MM-YYYY').format('YYYY-MM-DD')\n//     }\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_SAVE,\n//       submitData,\n//       (response) => {\n//         this.props.setNotification({\n//           message: response.message,\n//           hasError: !response.status,\n//           timestamp: new Date().getTime()\n//         });\n//         if (response.status) {\n//           this.props.closeBuybackModal();\n//         }\n//       },\n//       this.props.loadingFunction,\n//       { method: 'POST', isShowSuccess: false }\n//     );\n//   }\n//   getClusters = (regionId) => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_CLUSTER + `/${regionId}`,\n//       {},\n//       (response) => {\n//         this.setState({ clusterList: response })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   handleChange = (event) => {\n//     switch (event.currentTarget.name) {\n//       case 'channel':\n//         this.getRegions(event.currentTarget.value);\n//         break;\n//       case 'region':\n//         this.getClusters(event.currentTarget.value);\n//         break;\n//       default:\n//         break;\n//     }\n//     this.setState({ [event.currentTarget.name]: event.currentTarget.value })\n//   }\n//   handleEvent = (event, picker) => {\n//     this.setState({\n//       startDate: moment(picker.startDate).format(\"DD-MM-YYYY\"),\n//       endDate: moment(picker.endDate).format(\"DD-MM-YYYY\")\n//     });\n//   }\n//   render() {\n//     return (\n//       <div className=\"container-fluid\" style={{ overflowY: 'scroll' }}>\n//         <div className=\"row\">\n//           <div className=\"col-md-12\">\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Buyback Type:</label>\n//               <select\n//                 name=\"buyBackType\"\n//                 required\n//                 onChange={this.handleChange}\n//                 value={this.state.buyBackType}\n//                 className=\"distributer form-control required\">\n//                 <option value=\"\">Choose Buyback</option>\n//                 {this.state.buyBackTypeList.map((type, index) => (\n//                   <option key={index} value={type.id}>{type.typeName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Channel:</label>\n//               <select\n//                 name=\"channel\"\n//                 required\n//                 onChange={this.handleChange}\n//                 value={this.state.channel}\n//                 className=\"distributer form-control required \">\n//                 <option value=\"\">Choose Channel</option>\n//                 {this.state.channelsLis.map((channel, index) => (\n//                   <option key={index} value={channel.id}>{channel.channelName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Region:</label>\n//               <select\n//                 name=\"region\"\n//                 required\n//                 value={this.state.region}\n//                 onChange={this.handleChange}\n//                 className=\"distributer form-control required \" >\n//                 <option value=\"\">Choose Region</option>\n//                 {this.state.regionList.map((region, index) => (\n//                   <option key={index} value={region.id}>{region.locationName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Cluster:</label>\n//               <select\n//                 name=\"cluster\"\n//                 required\n//                 value={this.state.cluster}\n//                 onChange={this.handleChange}\n//                 className=\"distributer form-control required \" >\n//                 <option value=\"\">Choose Cluster</option>\n//                 {this.state.clusterList.map((cluster, index) => (\n//                   <option key={index} value={cluster.id}>{cluster.locationName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Distribution:</label>\n//               <select\n//                 name=\"distribution\"\n//                 required\n//                 value={this.state.distribution}\n//                 onChange={this.handleChange}\n//                 className=\"distributer form-control required \">\n//                 <option value=\"\">Choose Distribution</option>\n//                 {this.state.distributionList.map((distribution, index) => (\n//                   <option key={index} value={distribution.id}>{distribution.customerName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Outlet:</label>\n//               <select\n//                 name=\"outlet\"\n//                 required\n//                 value={this.state.outlet}\n//                 onChange={this.handleChange}\n//                 className=\"distributer form-control required\">\n//                 <option value=\"\">Choose Outlet</option>\n//                 {/* {this.state.outletList.map((outlet, index) => (\n//                   <option key={index} value={outlet.id}>{outlet.name}</option>\n//                 ))} */}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Date Range Picker:</label>\n//               <br />\n//               <DateRangePicker\n//                 containerStyles={{\n//                   display: 'inline-block',\n//                   width: '100%'\n//                 }}\n//                 onEvent={this.handleEvent}>\n//                 <input\n//                   className=\"form-control required w-100 \"\n//                   type=\"text\"\n//                   required\n//                   value={`${this.state.startDate} - ${this.state.endDate}`}\n//                   name=\"datefilter\"\n//                   placeholder=\"Select Date\"\n//                 />\n//               </DateRangePicker>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">FG Code:</label>\n//               <select\n//                 className=\"distributer form-control required \"\n//                 required\n//                 name=\"fgCode\"\n//                 value={this.state.fgCode}\n//                 onChange={this.handleChange}\n//               >\n//                 <option value=\"\">Choose FG Code</option>\n//                 {this.state.fgCodeList.map((fgCode, index) => (\n//                   <option key={index} value={fgCode.id}>{fgCode.fgCode}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <p className=\"col-form-label label\">Sell Thru Check:</p>\n//               <div className=\"d-flex justify-content-around\">\n//                 <div className=\"form-check ml-3 w-40\">\n//                   <input value={this.state.sellCheck} onChange={this.handleChange} className=\"form-check-input\" type=\"radio\" name=\"sellCheck\" id=\"sellCheck1\" value=\"yes\" checked={this.state.sellCheck === 'yes'} />\n//                   <label className=\"form-check-label cursor-pointer\" htmlFor=\"sellCheck1\">\n//                     Yes\n//                   </label>\n//                 </div>\n//                 <div className=\"form-check w-50\">\n//                   <input value={this.state.sellCheck} onChange={this.handleChange} className=\"form-check-input\" type=\"radio\" name=\"sellCheck\" id=\"sellCheck2\" value=\"no\" checked={this.state.sellCheck === 'no'} />\n//                   <label className=\"form-check-label cursor-pointer\" htmlFor=\"sellCheck2\">\n//                     No\n//                   </label>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-md-12 p-0\">\n//             <div class=\"modal-footer modal__footer__bg\">\n//               <button\n//                 type=\"button\"\n//                 class=\"btn btn-secondary-border cursor-pointer\">\n//                 Close\n//               </button>\n//               <button type=\"button\" class=\"btn cursor-pointer btn-primary-border\">\n//                 Reset\n//               </button>\n//               <button onClick={this.save} type=\"button\" class=\"btn cursor-pointer btn-primary\">Add</button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/inventory/buyback-config/components/AddEditBuyBack.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n// import moment from 'moment';\n// import DateRangePicker from 'react-bootstrap-daterangepicker';\n// import 'bootstrap-daterangepicker/daterangepicker.css';\n\n// import { Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\n// export default class AddEditBuyBack extends Component {\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       buyBackType: '',\n//       channel: '',\n//       region: '',\n//       cluster: '',\n//       distribution: '',\n//       outlet: '',\n//       fgCode: '',\n//       startDate: '',\n//       endDate: '',\n//       sellCheck: 'yes',\n//       buyBackTypeList: [],\n//       channelsLis: [],\n//       regionList: [],\n//       clusterList: [],\n//       distributionList: [],\n//       outletList: [],\n//       fgCodeList: [],\n//     }\n//   }\n\n//   componentDidMount() {\n//     this.getBuyBackTypes();\n//     this.getChannels();\n//     this.getDistributionList();\n//     this.getOutletList();\n//     this.getFgCode();\n//   }\n//   getFgCode = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_FGCODE + '?isPageable=false&pageNo=0&pageSize=10000',\n//       {},\n//       (response) => {\n//         this.setState({ fgCodeList: response.data })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getDistributionList = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_DISTRIBUTION,\n//       {},\n//       (response) => {\n//         this.setState({ distributionList: response.content })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getOutletList = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_OUTLET,\n//       {},\n//       (response) => {\n//         this.setState({ outletList: response.content })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getChannels = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_CHANNEL,\n//       {},\n//       (response) => {\n//         this.setState({ channelsLis: response });\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n//   getBuyBackTypes = () => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_TYPE + '?isPageable=false&pageNo=0&pageSize=1000',\n//       {},\n//       (response) => {\n//         if (!response.status) {\n//           this.props.setNotification({\n//             message: response.message,\n//             hasError: response.status,\n//             timestamp: new Date().getTime()\n//           });\n//         } else {\n//           if (response.hasOwnProperty('data')) {\n//             this.setState({ buyBackTypeList: response.data })\n//           }\n//         }\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n\n//   getRegions = (channelId) => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_REGION + `?channelId=${channelId}&typeId=2`,\n//       {},\n//       (response) => {\n//         this.setState({ regionList: response })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n\n//   save = () => {\n//     const { buyBackType, channel, region, cluster, distribution, outlet, fgCode, startDate, endDate, sellCheck } = this.state;\n//     if (buyBackType.trim().length <= 0 ||\n//       channel.trim().length <= 0 ||\n//       region.trim().length <= 0 ||\n//       cluster.trim().length <= 0 ||\n//       distribution.trim().length <= 0 ||\n//       outlet.trim().length <= 0 ||\n//       fgCode.trim().length <= 0 ||\n//       startDate.trim().length <= 0 ||\n//       endDate.trim().length <= 0 ||\n//       sellCheck.trim().length <= 0) {\n//       this.props.setNotification({\n//         message: 'please fill up',\n//         hasError: true,\n//         timestamp: new Date().getTime()\n//       });\n//       return;\n//     }\n//     let channelName = '';\n//     this.state.channelsLis.forEach((ch) => {\n//       if (ch.id == channel) {\n//         channelName = ch.channelName;\n//       }\n//     })\n//     let clusterName = '';\n//     this.state.clusterList.forEach((clu) => {\n//       if (clu.id == cluster) {\n//         clusterName = clu.locationName\n//       }\n//     });\n//     let distributerName = '';\n//     this.state.distributionList.forEach((dis) => {\n//       if (dis.id == distribution) {\n//         distributerName = dis.customerName\n//       }\n//     });\n//     let outletName = '';\n//     this.state.outletList.forEach((out) => {\n//       if (out.id == outlet) {\n//         outletName = out.name\n//       }\n//     });\n//     let regionName = '';\n//     this.state.regionList.forEach((reg) => {\n//       if (reg.id == region) {\n//         regionName = reg.locationName\n//       }\n//     });\n//     let submitData = {\n//       \"buyBackType\": buyBackType,\n//       \"channel\": channel,\n//       \"channelName\": channelName,\n//       \"cluster\": cluster,\n//       \"clusterName\": clusterName,\n//       \"distributer\": distribution,\n//       \"distributerName\": distributerName,\n//       \"fgCode\": fgCode,\n//       \"fromDate\": moment(startDate, 'DD-MM-YYYY').format('YYYY-MM-DD'),\n//       \"id\": 0,\n//       \"outlet\": outlet,\n//       \"outletName\": outletName,\n//       \"region\": region,\n//       \"regionName\": regionName,\n//       \"sellThruCheck\": (sellCheck == 'yes') ? true : false,\n//       \"toDate\": moment(endDate, 'DD-MM-YYYY').format('YYYY-MM-DD')\n//     }\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_SAVE,\n//       submitData,\n//       (response) => {\n//         this.props.setNotification({\n//           message: response.message,\n//           hasError: !response.status,\n//           timestamp: new Date().getTime()\n//         });\n//         if (response.status) {\n//           this.props.closeBuybackModal();\n//         }\n\n//       },\n//       this.props.loadingFunction,\n//       { method: 'POST', isShowSuccess: false }\n//     );\n//   }\n\n//   getClusters = (regionId) => {\n//     this.props.ajaxUtil.sendRequest(\n//       this.props.url_Inventory.BUYBACK_CLUSTER + `/${regionId}`,\n//       {},\n//       (response) => {\n//         this.setState({ clusterList: response })\n//       },\n//       this.props.loadingFunction,\n//       { method: 'GET', isShowSuccess: false }\n//     );\n//   }\n\n//   handleChange = (event) => {\n//     switch (event.currentTarget.name) {\n//       case 'channel':\n//         this.getRegions(event.currentTarget.value);\n//         break;\n//       case 'region':\n//         this.getClusters(event.currentTarget.value);\n//         break;\n\n//       default:\n//         break;\n//     }\n//     this.setState({ [event.currentTarget.name]: event.currentTarget.value })\n//   }\n//   handleEvent = (event, picker) => {\n//     this.setState({\n//       startDate: moment(picker.startDate).format(\"DD-MM-YYYY\"),\n//       endDate: moment(picker.endDate).format(\"DD-MM-YYYY\")\n//     });\n//   }\n//   render() {\n//     return (\n//       <div className=\"container-fluid\" style={{ overflowY: 'scroll' }}>\n//         <div className=\"row\">\n//           <div className=\"col-md-12\">\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Buyback Type:</label>\n//               <select\n//                 name=\"buyBackType\"\n//                 required\n//                 onChange={this.handleChange}\n//                 value={this.state.buyBackType}\n//                 className=\"distributer form-control required\">\n//                 <option value=\"\">Choose Buyback</option>\n//                 {this.state.buyBackTypeList.map((type, index) => (\n//                   <option key={index} value={type.id}>{type.typeName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Channel:</label>\n//               <select\n//                 name=\"channel\"\n//                 required\n//                 onChange={this.handleChange}\n//                 value={this.state.channel}\n//                 className=\"distributer form-control required \">\n//                 <option value=\"\">Choose Channel</option>\n//                 {this.state.channelsLis.map((channel, index) => (\n//                   <option key={index} value={channel.id}>{channel.channelName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Region:</label>\n//               <select\n//                 name=\"region\"\n//                 required\n//                 value={this.state.region}\n//                 onChange={this.handleChange}\n//                 className=\"distributer form-control required \" >\n//                 <option value=\"\">Choose Region</option>\n//                 {this.state.regionList.map((region, index) => (\n//                   <option key={index} value={region.id}>{region.locationName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Cluster:</label>\n//               <select\n//                 name=\"cluster\"\n//                 required\n//                 value={this.state.cluster}\n//                 onChange={this.handleChange}\n//                 className=\"distributer form-control required \" >\n//                 <option value=\"\">Choose Cluster</option>\n//                 {this.state.clusterList.map((cluster, index) => (\n//                   <option key={index} value={cluster.id}>{cluster.locationName}</option>\n//                 ))}\n//               </select>\n//             </div>\n         \n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Distribution:</label>\n//               <select\n//                 name=\"distribution\"\n//                 required\n//                 value={this.state.distribution}\n//                 onChange={this.handleChange}\n//                 className=\"distributer form-control required \">\n//                 <option value=\"\">Choose Distribution</option>\n//                 {this.state.distributionList.map((distribution, index) => (\n//                   <option key={index} value={distribution.id}>{distribution.customerName}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Outlet:</label>\n//               <select\n//                 name=\"outlet\"\n//                 required\n//                 value={this.state.outlet}\n//                 onChange={this.handleChange}\n//                 className=\"distributer form-control required\">\n//                 <option value=\"\">Choose Outlet</option>\n//                 {/* {this.state.outletList.map((outlet, index) => (\n//                   <option key={index} value={outlet.id}>{outlet.name}</option>\n//                 ))} */}\n//               </select>\n//             </div>\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">Date Range Picker:</label>\n//               <br />\n//               <DateRangePicker\n//                 containerStyles={{\n//                   display: 'inline-block',\n//                   width: '100%'\n//                 }}\n//                 onEvent={this.handleEvent}>\n//                 <input\n//                   className=\"form-control required w-100 \"\n//                   type=\"text\"\n//                   required\n//                   value={`${this.state.startDate} - ${this.state.endDate}`}\n//                   name=\"datefilter\"\n//                   placeholder=\"Select Date\"\n//                 />\n//               </DateRangePicker>\n//             </div>\n\n//             <div className=\"form-group\">\n//               <label className=\"col-form-label\">FG Code:</label>\n//               <select\n//                 className=\"distributer form-control required \"\n//                 required\n//                 name=\"fgCode\"\n//                 value={this.state.fgCode}\n//                 onChange={this.handleChange}\n//               >\n//                 <option value=\"\">Choose FG Code</option>\n//                 {this.state.fgCodeList.map((fgCode, index) => (\n//                   <option key={index} value={fgCode.id}>{fgCode.fgCode}</option>\n//                 ))}\n//               </select>\n//             </div>\n\n\n\n//             <div className=\"form-group\">\n//               <p className=\"col-form-label label\">Sell Thru Check:</p>\n//               <div className=\"d-flex justify-content-around\">\n//                 <div className=\"form-check ml-3 w-40\">\n//                   <input value={this.state.sellCheck} onChange={this.handleChange} className=\"form-check-input\" type=\"radio\" name=\"sellCheck\" id=\"sellCheck1\" value=\"yes\" checked={this.state.sellCheck === 'yes'} />\n//                   <label className=\"form-check-label cursor-pointer\" htmlFor=\"sellCheck1\">\n//                     Yes\n//                   </label>\n//                 </div>\n//                 <div className=\"form-check w-50\">\n//                   <input value={this.state.sellCheck} onChange={this.handleChange} className=\"form-check-input\" type=\"radio\" name=\"sellCheck\" id=\"sellCheck2\" value=\"no\" checked={this.state.sellCheck === 'no'} />\n//                   <label className=\"form-check-label cursor-pointer\" htmlFor=\"sellCheck2\">\n//                     No\n//                   </label>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-md-12 p-0\">\n//             <div class=\"modal-footer modal__footer__bg\">\n//               <button\n//                 type=\"button\"\n//                 class=\"btn btn-secondary-border cursor-pointer\">\n//                 Close\n//               </button>\n//               <button type=\"button\" class=\"btn cursor-pointer btn-primary-border\">\n//                 Reset\n//               </button>\n//               <button onClick={this.save} type=\"button\" class=\"btn cursor-pointer btn-primary\">Add</button>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}
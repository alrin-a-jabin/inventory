{"ast":null,"code":"import { AUTH_URL, LOGIN_URL, LOGOUT_URL, AUTH_KEY } from '../util/Constants';\nimport { LOGIN, LOGOUT, VALIDATE, SET_LOADING, SET_TOAST_NOTIF, SET_MODAL_POPUP, SET_HEADER, SAVE_STATE, SET_BREAD_CRUMB, ADD_TO_NOTIFICATION, REMOVE_FROM_NOTIFICATION, CLEAR_ALL_NOTIFICATION } from '../util/ActionConstants';\nimport { setCredentials, encryptData, ajaxRequest } from '../components/ajax/index';\nimport { encrypt } from '../util/Util';\nexport function addToNotification(data) {\n  return {\n    type: ADD_TO_NOTIFICATION,\n    payload: data\n  };\n}\n;\nexport function removeFromNotification(id) {\n  return {\n    type: REMOVE_FROM_NOTIFICATION,\n    payload: id\n  };\n}\n;\nexport function clearAllNotification() {\n  return {\n    type: CLEAR_ALL_NOTIFICATION,\n    payload: []\n  };\n}\n;\nexport function logIn(payload) {\n  const data = {\n    \"userId\": payload.username,\n    //   \"password\": encryptData('md5', payload.password)\n    //\"password\": encrypt(payload.password)\n    \"password\": payload.password\n  };\n  const request = ajaxRequest(LOGIN_URL, data, {\n    authKey: AUTH_KEY\n  });\n  return {\n    type: LOGIN,\n    payload: request\n  };\n}\nexport function validateLogin(showResonse = true) {\n  const request = ''; //const request = ajaxRequest(AUTH_URL, null, { authKey : AUTH_KEY });\n\n  return {\n    type: VALIDATE,\n    payload: request\n  };\n}\nexport function logOut(msg) {\n  const request = ajaxRequest(LOGOUT_URL, null, {\n    authKey: AUTH_KEY\n  });\n  setCredentials('', '');\n  return {\n    type: LOGOUT,\n    isLoggedIn: true,\n    payload: {\n      msg\n    }\n  };\n}\nexport function setLogOut() {\n  return {\n    type: LOGOUT,\n    payload: {}\n  };\n}\nexport function setLoading(isLoading, isFirstLoad, timestamp) {\n  return {\n    type: SET_LOADING,\n    payload: {\n      isLoading,\n      isFirstLoad,\n      timestamp\n    }\n  };\n}\nexport function setToastNotif(options) {\n  if (options) options.timestamp = new Date().getTime();\n  return {\n    type: SET_TOAST_NOTIF,\n    payload: options\n  };\n}\nexport function setModalPopup(options) {\n  return {\n    type: SET_MODAL_POPUP,\n    payload: options\n  };\n}\nexport function saveCurrentState(prevState) {\n  return {\n    type: SAVE_STATE,\n    payload: prevState\n  };\n}\nexport function setHeader(options) {\n  return {\n    type: SET_HEADER,\n    payload: options\n  };\n}\nexport function setBreadCrumb(options) {\n  return {\n    type: SET_BREAD_CRUMB,\n    payload: options\n  };\n} // import {\n//   AUTH_URL,\n//   LOGIN_URL,\n//   LOGOUT_URL,\n//   AUTH_KEY\n// } from '../util/Constants';\n// import {\n//   LOGIN,\n//   LOGOUT,\n//   VALIDATE,\n//   SET_LOADING,\n//   SET_TOAST_NOTIF,\n//   SET_MODAL_POPUP,\n//   SET_HEADER,\n//   SAVE_STATE,\n//   SET_BREAD_CRUMB,\n//   ADD_TO_NOTIFICATION,\n//   REMOVE_FROM_NOTIFICATION,\n//   CLEAR_ALL_NOTIFICATION\n// } from '../util/ActionConstants'\n// import { setCredentials, encryptData, ajaxRequest } from '../components/ajax/index';\n// import { encrypt } from '../util/Util';\n// export function addToNotification(data) {\n//     return {\n//         type: ADD_TO_NOTIFICATION,\n//         payload: data\n//     };\n// };\n// export function removeFromNotification(id) {\n//     return {\n//         type: REMOVE_FROM_NOTIFICATION,\n//         payload: id\n//     };\n// };\n// export function clearAllNotification() {\n//     return {\n//         type: CLEAR_ALL_NOTIFICATION,\n//         payload: []\n//     };\n// };\n// export function logIn(payload) {\n//   const data = {\n//       \"userId\": payload.username,\n//     //   \"password\": encryptData('md5', payload.password)\n//       //\"password\": encrypt(payload.password)\n//       \"password\":payload.password\n//   };\n//   const request = ajaxRequest(LOGIN_URL, data, { authKey : AUTH_KEY });\n//   return {\n//       type: LOGIN,\n//       payload: request\n//   };\n// }\n// export function validateLogin(showResonse = true) {\n//   const request = ajaxRequest(AUTH_URL, null, { authKey : AUTH_KEY });\n//   return {\n//       type: VALIDATE,\n//       payload: request\n//   };\n// }\n// export function logOut(msg) {\n//     const request = ajaxRequest(LOGOUT_URL, null, { authKey : AUTH_KEY });\n//     setCredentials('','');\n//     return {\n//         type: LOGOUT,\n//         isLoggedIn:true,\n//         payload: {msg}\n//     };\n// }\n// export function setLogOut() {\n//     return {\n//         type: LOGOUT,\n//         payload: {}\n//     };\n// }\n// export function setLoading(isLoading, isFirstLoad, timestamp) {\n//     return {\n//         type: SET_LOADING,\n//         payload: {isLoading, isFirstLoad, timestamp}\n//     };\n// }\n// export function setToastNotif(options) {\n//     if (options)\n//       options.timestamp = new Date().getTime();\n//     return {\n//         type: SET_TOAST_NOTIF,\n//         payload: options\n//     };\n// }\n// export function setModalPopup(options) {\n//     return {\n//         type: SET_MODAL_POPUP,\n//         payload: options\n//     };\n// }\n// export function saveCurrentState(prevState) {\n//     return {\n//         type: SAVE_STATE,\n//         payload:prevState\n//     };\n// }\n// export function setHeader(options) {\n//     return {\n//         type: SET_HEADER,\n//         payload: options\n//     };\n// }\n// export function setBreadCrumb(options) {\n//   return {\n//       type: SET_BREAD_CRUMB,\n//       payload: options\n//   };\n// }","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/actions/index.js"],"names":["AUTH_URL","LOGIN_URL","LOGOUT_URL","AUTH_KEY","LOGIN","LOGOUT","VALIDATE","SET_LOADING","SET_TOAST_NOTIF","SET_MODAL_POPUP","SET_HEADER","SAVE_STATE","SET_BREAD_CRUMB","ADD_TO_NOTIFICATION","REMOVE_FROM_NOTIFICATION","CLEAR_ALL_NOTIFICATION","setCredentials","encryptData","ajaxRequest","encrypt","addToNotification","data","type","payload","removeFromNotification","id","clearAllNotification","logIn","username","password","request","authKey","validateLogin","showResonse","logOut","msg","isLoggedIn","setLogOut","setLoading","isLoading","isFirstLoad","timestamp","setToastNotif","options","Date","getTime","setModalPopup","saveCurrentState","prevState","setHeader","setBreadCrumb"],"mappings":"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C,CAwsourcesContent":["\r\nimport {\r\n    AUTH_URL,\r\n    LOGIN_URL,\r\n    LOGOUT_URL,\r\n    AUTH_KEY\r\n  } from '../util/Constants';\r\n  import {\r\n    LOGIN,\r\n    LOGOUT,\r\n    VALIDATE,\r\n    SET_LOADING,\r\n    SET_TOAST_NOTIF,\r\n    SET_MODAL_POPUP,\r\n    SET_HEADER,\r\n    SAVE_STATE,\r\n    SET_BREAD_CRUMB,\r\n    ADD_TO_NOTIFICATION,\r\n    REMOVE_FROM_NOTIFICATION,\r\n    CLEAR_ALL_NOTIFICATION\r\n  } from '../util/ActionConstants'\r\n  import { setCredentials, encryptData, ajaxRequest } from '../components/ajax/index';\r\n  import { encrypt } from '../util/Util';\r\n  \r\n  export function addToNotification(data) {\r\n      return {\r\n          type: ADD_TO_NOTIFICATION,\r\n          payload: data\r\n      };\r\n  };\r\n  \r\n  export function removeFromNotification(id) {\r\n      return {\r\n          type: REMOVE_FROM_NOTIFICATION,\r\n          payload: id\r\n      };\r\n  };\r\n  \r\n  export function clearAllNotification() {\r\n      return {\r\n          type: CLEAR_ALL_NOTIFICATION,\r\n          payload: []\r\n      };\r\n  };\r\n  export function logIn(payload) {\r\n    const data = {\r\n        \"userId\": payload.username,\r\n      //   \"password\": encryptData('md5', payload.password)\r\n        //\"password\": encrypt(payload.password)\r\n        \"password\":payload.password\r\n        \r\n    };\r\n    const request = ajaxRequest(LOGIN_URL, data, { authKey : AUTH_KEY });\r\n    return {\r\n        type: LOGIN,\r\n        payload: request\r\n    };\r\n  }\r\n  \r\n  export function validateLogin(showResonse = true) {\r\n    const request = '';\r\n    //const request = ajaxRequest(AUTH_URL, null, { authKey : AUTH_KEY });\r\n    return {\r\n        type: VALIDATE,\r\n        payload: request\r\n    };\r\n  }\r\n  \r\n  export function logOut(msg) {\r\n      const request = ajaxRequest(LOGOUT_URL, null, { authKey : AUTH_KEY });\r\n      setCredentials('','');\r\n      return {\r\n          type: LOGOUT,\r\n          isLoggedIn:true,\r\n          payload: {msg}\r\n      };\r\n  }\r\n  \r\n  export function setLogOut() {\r\n      return {\r\n          type: LOGOUT,\r\n          payload: {}\r\n      };\r\n  }\r\n  \r\n  export function setLoading(isLoading, isFirstLoad, timestamp) {\r\n      return {\r\n          type: SET_LOADING,\r\n          payload: {isLoading, isFirstLoad, timestamp}\r\n      };\r\n  }\r\n  \r\n  export function setToastNotif(options) {\r\n      if (options)\r\n        options.timestamp = new Date().getTime();\r\n  \r\n      return {\r\n          type: SET_TOAST_NOTIF,\r\n          payload: options\r\n      };\r\n  }\r\n  \r\n  export function setModalPopup(options) {\r\n      return {\r\n          type: SET_MODAL_POPUP,\r\n          payload: options\r\n      };\r\n  }\r\n  \r\n  export function saveCurrentState(prevState) {\r\n      return {\r\n          type: SAVE_STATE,\r\n          payload:prevState\r\n      };\r\n  }\r\n  \r\n  export function setHeader(options) {\r\n      return {\r\n          type: SET_HEADER,\r\n          payload: options\r\n      };\r\n  }\r\n  \r\n  export function setBreadCrumb(options) {\r\n    return {\r\n        type: SET_BREAD_CRUMB,\r\n        payload: options\r\n    };\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import {\r\n//   AUTH_URL,\r\n//   LOGIN_URL,\r\n//   LOGOUT_URL,\r\n//   AUTH_KEY\r\n// } from '../util/Constants';\r\n// import {\r\n//   LOGIN,\r\n//   LOGOUT,\r\n//   VALIDATE,\r\n//   SET_LOADING,\r\n//   SET_TOAST_NOTIF,\r\n//   SET_MODAL_POPUP,\r\n//   SET_HEADER,\r\n//   SAVE_STATE,\r\n//   SET_BREAD_CRUMB,\r\n//   ADD_TO_NOTIFICATION,\r\n//   REMOVE_FROM_NOTIFICATION,\r\n//   CLEAR_ALL_NOTIFICATION\r\n// } from '../util/ActionConstants'\r\n// import { setCredentials, encryptData, ajaxRequest } from '../components/ajax/index';\r\n// import { encrypt } from '../util/Util';\r\n\r\n// export function addToNotification(data) {\r\n//     return {\r\n//         type: ADD_TO_NOTIFICATION,\r\n//         payload: data\r\n//     };\r\n// };\r\n\r\n// export function removeFromNotification(id) {\r\n//     return {\r\n//         type: REMOVE_FROM_NOTIFICATION,\r\n//         payload: id\r\n//     };\r\n// };\r\n\r\n// export function clearAllNotification() {\r\n//     return {\r\n//         type: CLEAR_ALL_NOTIFICATION,\r\n//         payload: []\r\n//     };\r\n// };\r\n// export function logIn(payload) {\r\n//   const data = {\r\n//       \"userId\": payload.username,\r\n//     //   \"password\": encryptData('md5', payload.password)\r\n//       //\"password\": encrypt(payload.password)\r\n//       \"password\":payload.password\r\n      \r\n//   };\r\n//   const request = ajaxRequest(LOGIN_URL, data, { authKey : AUTH_KEY });\r\n//   return {\r\n//       type: LOGIN,\r\n//       payload: request\r\n//   };\r\n// }\r\n\r\n// export function validateLogin(showResonse = true) {\r\n//   const request = ajaxRequest(AUTH_URL, null, { authKey : AUTH_KEY });\r\n//   return {\r\n//       type: VALIDATE,\r\n//       payload: request\r\n//   };\r\n// }\r\n\r\n// export function logOut(msg) {\r\n//     const request = ajaxRequest(LOGOUT_URL, null, { authKey : AUTH_KEY });\r\n//     setCredentials('','');\r\n//     return {\r\n//         type: LOGOUT,\r\n//         isLoggedIn:true,\r\n//         payload: {msg}\r\n//     };\r\n// }\r\n\r\n// export function setLogOut() {\r\n//     return {\r\n//         type: LOGOUT,\r\n//         payload: {}\r\n//     };\r\n// }\r\n\r\n// export function setLoading(isLoading, isFirstLoad, timestamp) {\r\n//     return {\r\n//         type: SET_LOADING,\r\n//         payload: {isLoading, isFirstLoad, timestamp}\r\n//     };\r\n// }\r\n\r\n// export function setToastNotif(options) {\r\n//     if (options)\r\n//       options.timestamp = new Date().getTime();\r\n\r\n//     return {\r\n//         type: SET_TOAST_NOTIF,\r\n//         payload: options\r\n//     };\r\n// }\r\n\r\n// export function setModalPopup(options) {\r\n//     return {\r\n//         type: SET_MODAL_POPUP,\r\n//         payload: options\r\n//     };\r\n// }\r\n\r\n// export function saveCurrentState(prevState) {\r\n//     return {\r\n//         type: SAVE_STATE,\r\n//         payload:prevState\r\n//     };\r\n// }\r\n\r\n// export function setHeader(options) {\r\n//     return {\r\n//         type: SET_HEADER,\r\n//         payload: options\r\n//     };\r\n// }\r\n\r\n// export function setBreadCrumb(options) {\r\n//   return {\r\n//       type: SET_BREAD_CRUMB,\r\n//       payload: options\r\n//   };\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
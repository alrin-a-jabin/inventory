{"ast":null,"code":"var _jsxFileName = \"/home/alrin/Downloads/INVENTORY22/src/util/EnsureLoggedInContainer.js\";\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { setCredentials } from '../components/ajax/index';\nimport { validateLogin } from '../actions';\n\nclass EnsureLoggedInContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    if (this.props.login && this.props.login.isLoggedIn) {\n      setCredentials(this.props.login.userDetails.token, this.props.login.userDetails.userId);\n    }\n  }\n\n  componentWillMount() {\n    if (!this.props.login || !this.props.login.isLoggedIn) {\n      this.props.validateLogin();\n    }\n  }\n\n  render() {\n    const {\n      login\n    } = this.props;\n\n    if (!login || !login.hasOwnProperty(\"isLoggedIn\")) {\n      return React.createElement(\"div\", {\n        className: \"index_loaderMain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"index_loaderSub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sk-folding-cube\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sk-cube1 sk-cube\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"sk-cube2 sk-cube\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"sk-cube4 sk-cube\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"sk-cube3 sk-cube\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }))));\n    }\n    /* if (login && login.userDetails && login.userDetails.forceChangePassword) {\r\n        return <Redirect to=\"forceChangePassword\" />\r\n    }else */\n\n\n    if (login.isLoggedIn) {\n      return this.props.children;\n    } else {\n      return this.props.children; // return <Redirect to=\"/login\" />;\n    }\n  }\n\n} // Grab a reference to the current URL. If this is a web app and you are\n// using React Router, you can use `ownProps` to find the URL. Other\n// platforms (Native) or routing libraries have similar ways to find\n// the current position in the app.\n\n\nfunction mapStateToProps(state, ownProps) {\n  const {\n    login\n  } = state;\n  return {\n    login,\n    isLoading: state.loader.isLoading\n  };\n}\n\nexport default connect(mapStateToProps, {\n  validateLogin\n})(EnsureLoggedInContainer); // import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import React, { Component } from 'react';\n// import { setCredentials } from '../components/ajax/index';\n// import { validateLogin } from '../actions';\n// class EnsureLoggedInContainer extends Component {\n//     constructor(props) {\n//         super(props);\n//         if (this.props.login && this.props.login.isLoggedIn) {\n//             setCredentials(this.props.login.userDetails.token, this.props.login.userDetails.userId);\n//         }\n//     }\n//     componentWillMount() {\n//         if (!this.props.login || !this.props.login.isLoggedIn){\n//             this.props.validateLogin();\n//         }\n//     }\n//     render() {\n//         const {login} = this.props;\n//         if(!login || !login.hasOwnProperty(\"isLoggedIn\")){\n//             return (\n//               <div className=\"index_loaderMain\">\n//                 <div className=\"index_loaderSub\">\n//                   <div className=\"sk-folding-cube\">\n//                     <div className=\"sk-cube1 sk-cube\"></div>\n//                     <div className=\"sk-cube2 sk-cube\"></div>\n//                     <div className=\"sk-cube4 sk-cube\"></div>\n//                     <div className=\"sk-cube3 sk-cube\"></div>\n//                   </div>\n//                 </div>\n//               </div>\n//             );\n//         }\n//         /* if (login && login.userDetails && login.userDetails.forceChangePassword) {\n//             return <Redirect to=\"forceChangePassword\" />\n//         }else */ if (login.isLoggedIn) {\n//             return this.props.children\n//         } else {\n//             return <Redirect to=\"/login\" />;\n//         }\n//     }\n// }\n// // Grab a reference to the current URL. If this is a web app and you are\n// // using React Router, you can use `ownProps` to find the URL. Other\n// // platforms (Native) or routing libraries have similar ways to find\n// // the current position in the app.\n// function mapStateToProps(state, ownProps) {\n//     const { login } = state;\n//     return {\n//         login,\n//         isLoading: state.loader.isLoading\n//     }\n// }\n// export default connect(mapStateToProps, { validateLogin })(EnsureLoggedInContainer)","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/util/EnsureLoggedInContainer.js"],"names":["connect","Redirect","React","Component","setCredentials","validateLogin","EnsureLoggedInContainer","constructor","props","login","isLoggedIn","userDetails","token","userId","componentWillMount","render","hasOwnProperty","children","mapStateToProps","state","ownProps","isLoading","loader"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,aAAT,QAA8B,YAA9B;;AAEA,MAAMC,uBAAN,SAAsCH,SAAtC,CAAgD;AAC5CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AACA,QAAI,KAAKA,KAAL,CAAWC,KAAX,IAAoB,KAAKD,KAAL,CAAWC,KAAX,CAAiBC,UAAzC,EAAqD;AACjDN,MAAAA,cAAc,CAAC,KAAKI,KAAL,CAAWC,KAAX,CAAiBE,WAAjB,CAA6BC,KAA9B,EAAqC,KAAKJ,KAAL,CAAWC,KAAX,CAAiBE,WAAjB,CAA6BE,MAAlE,CAAd;AACH;AACJ;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,QAAI,CAAC,KAAKN,KAAL,CAAWC,KAAZ,IAAqB,CAAC,KAAKD,KAAL,CAAWC,KAAX,CAAiBC,UAA3C,EAAsD;AAClD,WAAKF,KAAL,CAAWH,aAAX;AACH;AACJ;;AAEDU,EAAAA,MAAM,GAAG;AACL,UAAM;AAACN,MAAAA;AAAD,QAAU,KAAKD,KAArB;;AACA,QAAG,CAACC,KAAD,IAAU,CAACA,KAAK,CAACO,cAAN,CAAqB,YAArB,CAAd,EAAiD;AAC7C,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF,CADF,CADF;AAYH;AACD;;;;;AAES,QAAIP,KAAK,CAACC,UAAV,EAAsB;AAC3B,aAAO,KAAKF,KAAL,CAAWS,QAAlB;AACH,KAFQ,MAEF;AACH,aAAO,KAAKT,KAAL,CAAWS,QAAlB,CADG,CAEH;AACH;AACJ;;AAtC2C,C,CAyChD;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;AACtC,QAAM;AAAEX,IAAAA;AAAF,MAAYU,KAAlB;AACA,SAAO;AACHV,IAAAA,KADG;AAEHY,IAAAA,SAAS,EAAEF,KAAK,CAACG,MAAN,CAAaD;AAFrB,GAAP;AAIH;;AAED,eAAerB,OAAO,CAACkB,eAAD,EAAkB;AAAEb,EAAAA;AAAF,CAAlB,CAAP,CAA4CC,uBAA5C,CAAf,C,CAqBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { setCredentials } from '../components/ajax/index';\r\nimport { validateLogin } from '../actions';\r\n\r\nclass EnsureLoggedInContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (this.props.login && this.props.login.isLoggedIn) {\r\n            setCredentials(this.props.login.userDetails.token, this.props.login.userDetails.userId);\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (!this.props.login || !this.props.login.isLoggedIn){\r\n            this.props.validateLogin();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {login} = this.props;\r\n        if(!login || !login.hasOwnProperty(\"isLoggedIn\")){\r\n            return (\r\n              <div className=\"index_loaderMain\">\r\n                <div className=\"index_loaderSub\">\r\n                  <div className=\"sk-folding-cube\">\r\n                    <div className=\"sk-cube1 sk-cube\"></div>\r\n                    <div className=\"sk-cube2 sk-cube\"></div>\r\n                    <div className=\"sk-cube4 sk-cube\"></div>\r\n                    <div className=\"sk-cube3 sk-cube\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n        }\r\n        /* if (login && login.userDetails && login.userDetails.forceChangePassword) {\r\n            return <Redirect to=\"forceChangePassword\" />\r\n        }else */ if (login.isLoggedIn) {\r\n            return this.props.children\r\n        } else {\r\n            return this.props.children\r\n            // return <Redirect to=\"/login\" />;\r\n        }\r\n    }\r\n}\r\n\r\n// Grab a reference to the current URL. If this is a web app and you are\r\n// using React Router, you can use `ownProps` to find the URL. Other\r\n// platforms (Native) or routing libraries have similar ways to find\r\n// the current position in the app.\r\nfunction mapStateToProps(state, ownProps) {\r\n    const { login } = state;\r\n    return {\r\n        login,\r\n        isLoading: state.loader.isLoading\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { validateLogin })(EnsureLoggedInContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { connect } from 'react-redux';\r\n// import { Redirect } from 'react-router-dom';\r\n// import React, { Component } from 'react';\r\n// import { setCredentials } from '../components/ajax/index';\r\n// import { validateLogin } from '../actions';\r\n\r\n// class EnsureLoggedInContainer extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         if (this.props.login && this.props.login.isLoggedIn) {\r\n//             setCredentials(this.props.login.userDetails.token, this.props.login.userDetails.userId);\r\n//         }\r\n//     }\r\n\r\n//     componentWillMount() {\r\n//         if (!this.props.login || !this.props.login.isLoggedIn){\r\n//             this.props.validateLogin();\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//         const {login} = this.props;\r\n//         if(!login || !login.hasOwnProperty(\"isLoggedIn\")){\r\n//             return (\r\n//               <div className=\"index_loaderMain\">\r\n//                 <div className=\"index_loaderSub\">\r\n//                   <div className=\"sk-folding-cube\">\r\n//                     <div className=\"sk-cube1 sk-cube\"></div>\r\n//                     <div className=\"sk-cube2 sk-cube\"></div>\r\n//                     <div className=\"sk-cube4 sk-cube\"></div>\r\n//                     <div className=\"sk-cube3 sk-cube\"></div>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             );\r\n//         }\r\n//         /* if (login && login.userDetails && login.userDetails.forceChangePassword) {\r\n//             return <Redirect to=\"forceChangePassword\" />\r\n//         }else */ if (login.isLoggedIn) {\r\n//             return this.props.children\r\n//         } else {\r\n//             return <Redirect to=\"/login\" />;\r\n//         }\r\n//     }\r\n// }\r\n\r\n// // Grab a reference to the current URL. If this is a web app and you are\r\n// // using React Router, you can use `ownProps` to find the URL. Other\r\n// // platforms (Native) or routing libraries have similar ways to find\r\n// // the current position in the app.\r\n// function mapStateToProps(state, ownProps) {\r\n//     const { login } = state;\r\n//     return {\r\n//         login,\r\n//         isLoading: state.loader.isLoading\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, { validateLogin })(EnsureLoggedInContainer)\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// import React from 'react';\n// import PropTypes from 'prop-types';\n// const propTypes = {\n//     items: PropTypes.array.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     initialPage: PropTypes.number,\n//     pageSize: PropTypes.number\n// }\n// const defaultProps = {\n//     initialPage: 1,\n//     pageSize: 5\n// }\n// class Pagination extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { pager: {} };\n//     }\n//     componentWillMount() {\n//         // set page if items array isn't empty\n//         if (this.props.items && this.props.items.length) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n//     componentDidUpdate(prevProps, prevState) {\n//         // reset page if items array has changed\n//         if (this.props.items !== prevProps.items) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n//     setPage(page) {\n//         var { items, pageSize } = this.props;\n//         var pager = this.state.pager;\n//         if (page < 1 || page > pager.totalPages) {\n//             return;\n//         }\n//         // get new pager object for specified page\n//         pager = this.getPager(items.length, page, pageSize);\n//         // get new page of items from items array\n//         // var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n//         var pageOfItems =this.state.pager.currentPage;\n//         // update state\n//         this.setState({ pager: pager });\n//         // call change page function in parent component\n//         this.props.onChangePage(pageOfItems);\n//     }\n//     getPager(totalItems, currentPage, pageSize) {\n//         // default to first page\n//         currentPage = currentPage || 1;\n//         // default page size is 10\n//         pageSize = pageSize || 5;\n//         // calculate total pages\n//         var totalPages = Math.ceil(totalItems / pageSize);\n//         var startPage, endPage;\n//         if (totalPages <= 10) {\n//             // less than 10 total pages so show all\n//             startPage = 1;\n//             endPage = totalPages;\n//         } else {\n//             // more than 10 total pages so calculate start and end pages\n//             if (currentPage <= 6) {\n//                 startPage = 1;\n//                 endPage = 10;\n//             } else if (currentPage + 4 >= totalPages) {\n//                 startPage = totalPages - 9;\n//                 endPage = totalPages;\n//             } else {\n//                 startPage = currentPage - 5;\n//                 endPage = currentPage + 4;\n//             }\n//         }\n//         // var startPage, endPage;\n//         // if (totalPages <= 5) {\n//         //     // less than 10 total pages so show all\n//         //     startPage = 1;\n//         //     endPage = totalPages;\n//         // } else {\n//         //     // more than 10 total pages so calculate start and end pages\n//         //     if (currentPage <= 3) {\n//         //         startPage = 1;\n//         //         endPage = 5;\n//         //     } else if (currentPage + 2 >= totalPages) {\n//         //         startPage = totalPages - 4;\n//         //         endPage = totalPages;\n//         //     } else {\n//         //         startPage = currentPage - 1;\n//         //         endPage = currentPage + 3;\n//         //     }\n//         // }\n//         // calculate start and end item indexes\n//         var startIndex = (currentPage - 1) * pageSize;\n//         var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n//         // create an array of pages to ng-repeat in the pager control\n//         var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n//         console.log(pages);\n//         // return object with all pager properties required by the view\n//         return {\n//             totalItems: totalItems,\n//             currentPage: currentPage,\n//             pageSize: pageSize,\n//             totalPages: totalPages,\n//             startPage: startPage,\n//             endPage: endPage,\n//             startIndex: startIndex,\n//             endIndex: endIndex,\n//             pages: pages\n//         };\n//     }\n//     render() {\n//         var pager = this.state.pager;\n//         if (!pager.pages || pager.pages.length <= 1) {\n//             // don't display pager if there is only 1 page\n//             return null;\n//         }\n//         return (\n//             <div>\n//             <nav aria-label=\"Page navigation\">\n//                 <ul className=\"pagination\">\n//                     <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n//                     </li>\n//                     <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//                     </li>\n//                     {pager.pages.map((page, index) =>\n//                         <li  key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n//                             <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n//                         </li>\n//                     )}\n//                     <li  className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//                     </li>\n//                     <li className=\"\" className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//                     </li>\n//                 </ul>\n//             </nav>\n//             </div>\n//         );\n//     }\n// }\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n// export default Pagination;\n// import React from 'react';\n// import PropTypes from 'prop-types';\n// const propTypes = {\n//     items: PropTypes.array.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     initialPage: PropTypes.number,\n//     pageSize: PropTypes.number\n// }\n// const defaultProps = {\n//     initialPage: 1,\n//     pageSize: 10\n// }\n// class Pagination extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { pager: {} };\n//     }\n//     componentWillMount() {\n//         // set page if items array isn't empty\n//         if (this.props.items && this.props.items.length) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n//     componentDidUpdate(prevProps, prevState) {\n//         // reset page if items array has changed\n//         if (this.props.items !== prevProps.items) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n//     setPage(page) {\n//         var { items, pageSize } = this.props;\n//         var pager = this.state.pager;\n//         if (page < 1 || page > pager.totalPages) {\n//             return;\n//         }\n//         // get new pager object for specified page\n//         pager = this.getPager(items.length, page, pageSize);\n//         // get new page of items from items array\n//         // var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n//         var pageOfItems =this.state.pager\n//         // update state\n//         this.setState({ pager: pager });\n//         // call change page function in parent component\n//         this.props.onChangePage(pageOfItems);\n//     }\n//     getPager(totalItems, currentPage, pageSize) {\n//         // default to first page\n//         currentPage = currentPage || 1;\n//         // default page size is 10\n//         pageSize = pageSize || 10;\n//         // calculate total pages\n//         var totalPages = Math.ceil(totalItems / pageSize);\n// var startPage, endPage;\n// if (totalPages <= 10) {\n//     // less than 10 total pages so show all\n//     startPage = 1;\n//     endPage = totalPages;\n// } else {\n//     // more than 10 total pages so calculate start and end pages\n//     if (currentPage <= 6) {\n//         startPage = 1;\n//         endPage = 10;\n//     } else if (currentPage + 4 >= totalPages) {\n//         startPage = totalPages - 9;\n//         endPage = totalPages;\n//     } else {\n//         startPage = currentPage - 5;\n//         endPage = currentPage + 4;\n//     }\n// }\n//         // calculate start and end item indexes\n//         var startIndex = (currentPage - 1) * pageSize;\n//         var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n//         // create an array of pages to ng-repeat in the pager control\n//         var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n//         // return object with all pager properties required by the view\n//         return {\n//             totalItems: totalItems,\n//             currentPage: currentPage,\n//             pageSize: pageSize,\n//             totalPages: totalPages,\n//             startPage: startPage,\n//             endPage: endPage,\n//             startIndex: startIndex,\n//             endIndex: endIndex,\n//             pages: pages\n//         };\n//     }\n//     render() {\n//         var pager = this.state.pager;\n//         if (!pager.pages || pager.pages.length <= 1) {\n//             // don't display pager if there is only 1 page\n//             return null;\n//         }\n//         return (\n//             <ul className=\"pagination\">\n//                 <li className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n//                 </li>\n//                 <li className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//                 </li>\n//                 {pager.pages.map((page, index) =>\n//                     <li key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n//                     </li>\n//                 )}\n//                 <li className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//                 </li>\n//                 <li className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//                 </li>\n//             </ul>\n//         );\n//     }\n// }\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n// export default Pagination;","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/inventory/component/Pagination.js"],"names":[],"mappingsasourcesContent":["// import React from 'react';\n// import PropTypes from 'prop-types';\n\n// const propTypes = {\n//     items: PropTypes.array.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     initialPage: PropTypes.number,\n//     pageSize: PropTypes.number\n// }\n\n// const defaultProps = {\n//     initialPage: 1,\n//     pageSize: 5\n// }\n\n// class Pagination extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { pager: {} };\n//     }\n\n//     componentWillMount() {\n//         // set page if items array isn't empty\n//         if (this.props.items && this.props.items.length) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n\n//     componentDidUpdate(prevProps, prevState) {\n//         // reset page if items array has changed\n//         if (this.props.items !== prevProps.items) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n\n//     setPage(page) {\n//         var { items, pageSize } = this.props;\n//         var pager = this.state.pager;\n\n//         if (page < 1 || page > pager.totalPages) {\n//             return;\n//         }\n\n//         // get new pager object for specified page\n//         pager = this.getPager(items.length, page, pageSize);\n\n//         // get new page of items from items array\n//         // var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n//         var pageOfItems =this.state.pager.currentPage;\n\n//         // update state\n//         this.setState({ pager: pager });\n\n//         // call change page function in parent component\n//         this.props.onChangePage(pageOfItems);\n//     }\n\n//     getPager(totalItems, currentPage, pageSize) {\n//         // default to first page\n//         currentPage = currentPage || 1;\n\n//         // default page size is 10\n//         pageSize = pageSize || 5;\n\n//         // calculate total pages\n//         var totalPages = Math.ceil(totalItems / pageSize);\n\n//         var startPage, endPage;\n//         if (totalPages <= 10) {\n//             // less than 10 total pages so show all\n//             startPage = 1;\n//             endPage = totalPages;\n//         } else {\n//             // more than 10 total pages so calculate start and end pages\n//             if (currentPage <= 6) {\n//                 startPage = 1;\n//                 endPage = 10;\n//             } else if (currentPage + 4 >= totalPages) {\n//                 startPage = totalPages - 9;\n//                 endPage = totalPages;\n//             } else {\n//                 startPage = currentPage - 5;\n//                 endPage = currentPage + 4;\n//             }\n//         }\n\n//         // var startPage, endPage;\n//         // if (totalPages <= 5) {\n//         //     // less than 10 total pages so show all\n//         //     startPage = 1;\n//         //     endPage = totalPages;\n//         // } else {\n//         //     // more than 10 total pages so calculate start and end pages\n//         //     if (currentPage <= 3) {\n//         //         startPage = 1;\n//         //         endPage = 5;\n//         //     } else if (currentPage + 2 >= totalPages) {\n//         //         startPage = totalPages - 4;\n//         //         endPage = totalPages;\n//         //     } else {\n//         //         startPage = currentPage - 1;\n//         //         endPage = currentPage + 3;\n//         //     }\n//         // }\n\n//         // calculate start and end item indexes\n//         var startIndex = (currentPage - 1) * pageSize;\n//         var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n//         // create an array of pages to ng-repeat in the pager control\n//         var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n//         console.log(pages);\n\n//         // return object with all pager properties required by the view\n//         return {\n//             totalItems: totalItems,\n//             currentPage: currentPage,\n//             pageSize: pageSize,\n//             totalPages: totalPages,\n//             startPage: startPage,\n//             endPage: endPage,\n//             startIndex: startIndex,\n//             endIndex: endIndex,\n//             pages: pages\n//         };\n//     }\n\n//     render() {\n//         var pager = this.state.pager;\n\n//         if (!pager.pages || pager.pages.length <= 1) {\n//             // don't display pager if there is only 1 page\n//             return null;\n//         }\n\n//         return (\n//             <div>\n//             <nav aria-label=\"Page navigation\">\n\n//                 <ul className=\"pagination\">\n//                     <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n//                     </li>\n//                     <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//                     </li>\n//                     {pager.pages.map((page, index) =>\n//                         <li  key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n//                             <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n//                         </li>\n//                     )}\n//                     <li  className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//                     </li>\n//                     <li className=\"\" className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//                     </li>\n//                 </ul>\n//             </nav>\n//             </div>\n//         );\n//     }\n// }\n\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n// export default Pagination;\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import PropTypes from 'prop-types';\n\n// const propTypes = {\n//     items: PropTypes.array.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     initialPage: PropTypes.number,\n//     pageSize: PropTypes.number\n// }\n\n// const defaultProps = {\n//     initialPage: 1,\n//     pageSize: 10\n// }\n\n// class Pagination extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { pager: {} };\n//     }\n\n//     componentWillMount() {\n//         // set page if items array isn't empty\n//         if (this.props.items && this.props.items.length) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n\n//     componentDidUpdate(prevProps, prevState) {\n//         // reset page if items array has changed\n//         if (this.props.items !== prevProps.items) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n\n//     setPage(page) {\n//         var { items, pageSize } = this.props;\n//         var pager = this.state.pager;\n\n//         if (page < 1 || page > pager.totalPages) {\n//             return;\n//         }\n\n//         // get new pager object for specified page\n//         pager = this.getPager(items.length, page, pageSize);\n\n//         // get new page of items from items array\n//         // var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n//         var pageOfItems =this.state.pager\n\n\n//         // update state\n//         this.setState({ pager: pager });\n\n//         // call change page function in parent component\n//         this.props.onChangePage(pageOfItems);\n//     }\n\n//     getPager(totalItems, currentPage, pageSize) {\n//         // default to first page\n//         currentPage = currentPage || 1;\n\n//         // default page size is 10\n//         pageSize = pageSize || 10;\n\n//         // calculate total pages\n//         var totalPages = Math.ceil(totalItems / pageSize);\n\n        // var startPage, endPage;\n        // if (totalPages <= 10) {\n        //     // less than 10 total pages so show all\n        //     startPage = 1;\n        //     endPage = totalPages;\n        // } else {\n        //     // more than 10 total pages so calculate start and end pages\n        //     if (currentPage <= 6) {\n        //         startPage = 1;\n        //         endPage = 10;\n        //     } else if (currentPage + 4 >= totalPages) {\n        //         startPage = totalPages - 9;\n        //         endPage = totalPages;\n        //     } else {\n        //         startPage = currentPage - 5;\n        //         endPage = currentPage + 4;\n        //     }\n        // }\n\n//         // calculate start and end item indexes\n//         var startIndex = (currentPage - 1) * pageSize;\n//         var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n//         // create an array of pages to ng-repeat in the pager control\n//         var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n\n//         // return object with all pager properties required by the view\n//         return {\n//             totalItems: totalItems,\n//             currentPage: currentPage,\n//             pageSize: pageSize,\n//             totalPages: totalPages,\n//             startPage: startPage,\n//             endPage: endPage,\n//             startIndex: startIndex,\n//             endIndex: endIndex,\n//             pages: pages\n//         };\n//     }\n\n//     render() {\n//         var pager = this.state.pager;\n\n//         if (!pager.pages || pager.pages.length <= 1) {\n//             // don't display pager if there is only 1 page\n//             return null;\n//         }\n\n//         return (\n//             <ul className=\"pagination\">\n//                 <li className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n//                 </li>\n//                 <li className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//                 </li>\n//                 {pager.pages.map((page, index) =>\n//                     <li key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n//                     </li>\n//                 )}\n//                 <li className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//                 </li>\n//                 <li className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//                 </li>\n//             </ul>\n//         );\n//     }\n// }\n\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n// export default Pagination;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios';\nimport { getToken, setToken, encrypt, getuuid } from '../util/Utils';\nexport function ajax(url, request, makeCallBack, callback, loadingFunction, options) {\n  var loadingId = 0;\n  const {\n    method = 'POST',\n    isShowGenericMessage = true,\n    isShowSuccess = true,\n    isShowFailure = true,\n    firstLoad,\n    isProceedOnError = true,\n    isGetFile,\n    authKey,\n    channel,\n    returnFullResponse = false,\n    responseType,\n    isLogout = true,\n    isEncrpt,\n    encrptKey\n  } = options || {};\n  const headers = getToken(authKey, channel, isEncrpt, encrptKey);\n  if (isGetFile) headers['content-type'] = 'multipart/form-data';\n  const authOptions = {\n    method,\n    url: url,\n    data: request,\n    headers,\n    json: true\n  };\n\n  if (method && method.trim().toUpperCase() == 'GET') {\n    authOptions.params = request;\n  }\n\n  if (responseType) authOptions.responseType = responseType;\n  if (loadingFunction) loadingId = loadingFunction({\n    isLoading: true,\n    firstLoad\n  });\n  axios(authOptions).then(response => {\n    if (makeCallBack) makeCallBack(response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse, isLogout);else if (callback) callback(response);\n    if (loadingFunction) loadingFunction({\n      isLoading: false,\n      firstLoad,\n      timestamp: loadingId\n    });\n  }).catch(err => {\n    if (makeCallBack) makeCallBack(err.response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse, isLogout);else if (callback) callback(err.response);\n    if (loadingFunction) loadingFunction({\n      isLoading: false,\n      firstLoad,\n      timestamp: loadingId\n    });\n  });\n}\nexport function ajaxRequest(url, requestData, options) {\n  const {\n    method = 'POST',\n    authKey,\n    channel,\n    isEncrpt,\n    encrptKey\n  } = options || {};\n  const headers = getToken(authKey, channel, isEncrpt, encrptKey);\n  const authOptions = {\n    method,\n    url: url,\n    data: requestData,\n    headers,\n    json: true\n  };\n  const request = axios(authOptions);\n  return request;\n}\nexport function setCredentials(token, userId, msisdn, entity) {\n  setToken(token, userId, msisdn, entity);\n}\nexport function getHeaders(auth) {\n  return getToken(auth);\n}\nexport function encryptData(type, value) {\n  return encrypt(type, value);\n}\nexport function setBaseURL(baseURL) {\n  axios.defaults.baseURL = baseURL;\n}\nexport function getUuid() {\n  return getuuid();\n}","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/ajax/elements/ajax/Ajax.js"],"names":["axios","getToken","setToken","encrypt","getuuid","ajax","url","request","makeCallBack","callback","loadingFunction","options","loadingId","method","isShowGenericMessage","isShowSuccess","isShowFailure","firstLoad","isProceedOnError","isGetFile","authKey","channel","returnFullResponse","responseType","isLogout","isEncrpt","encrptKey","headers","authOptions","data","json","trim","toUpperCase","params","isLoading","then","response","timestamp","catch","err","ajaxRequest","requestData","setCredentials","token","userId","msisdn","entity","getHeaders","auth","encryptData","type","value","setBaseURL","baseURL","defaults","getUuid"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { getToken, setToken, encrypt, getuuid } from '../util/Utils';\r\n\r\nexport function ajax(url, request, makeCallBack, callback, loadingFunction, options) {\r\n  var loadingId = 0;\r\n  const { method = 'POST', isShowGenericMessage = true,\r\n    isShowSuccess = true, isShowFailure = true, firstLoad,\r\n    isProceedOnError = true, isGetFile, authKey, channel, returnFullResponse = false, responseType ,isLogout=true,isEncrpt,encrptKey } = options || {};\r\n  const headers = getToken(authKey, channel,isEncrpt,encrptKey);\r\n  if (isGetFile)\r\n    headers['content-type'] = 'multipart/form-data';\r\n\r\n  const authOptions = {\r\n    method,\r\n    url: url,\r\n    data: request,\r\n    headers,\r\n    json: true\r\n  };\r\n\r\n  if (method && method.trim().toUpperCase() == 'GET') {\r\n    authOptions.params = request;\r\n  }\r\n\r\n  if (responseType) authOptions.responseType = responseType;\r\n\r\n  if (loadingFunction)\r\n    loadingId = loadingFunction({ isLoading: true, firstLoad });\r\n\r\n  axios(authOptions).then((response) => {\r\n    if (makeCallBack)\r\n      makeCallBack(response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse,isLogout);\r\n    else if (callback)\r\n      callback(response);\r\n\r\n    if (loadingFunction)\r\n      loadingFunction({ isLoading: false, firstLoad, timestamp: loadingId });\r\n\r\n  }).catch((err) => {\r\n    if (makeCallBack)\r\n      makeCallBack(err.response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse,isLogout);\r\n    else if (callback)\r\n      callback(err.response);\r\n\r\n    if (loadingFunction)\r\n      loadingFunction({ isLoading: false, firstLoad, timestamp: loadingId });\r\n  })\r\n}\r\nexport function ajaxRequest(url, requestData, options) {\r\n  const { method = 'POST', authKey, channel,isEncrpt,encrptKey} = options || {};\r\n  const headers = getToken(authKey, channel,isEncrpt,encrptKey);\r\n  const authOptions = {\r\n    method,\r\n    url: url,\r\n    data: requestData,\r\n    headers,\r\n    json: true\r\n  };\r\n  const request = axios(authOptions);\r\n  return request;\r\n}\r\nexport function setCredentials(token, userId, msisdn,entity) {\r\n  setToken(token, userId, msisdn,entity);\r\n}\r\nexport function getHeaders(auth) {\r\n  return getToken(auth);\r\n}\r\nexport function encryptData(type, value) {\r\n  return encrypt(type, value);\r\n}\r\nexport function setBaseURL(baseURL) {\r\n  axios.defaults.baseURL = baseURL;\r\n}\r\nexport function getUuid() {\r\n  return getuuid();\r\n}"]},"metadata":{},"sourceType":"module"}
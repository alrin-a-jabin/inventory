{"ast":null,"code":"import React from 'react';\nimport moment from 'moment';\nimport CryptoJS from 'crypto-js';\nimport _ from 'lodash';\nimport { GLOBAL_CONSTANTS, ENCYPT_KEY } from './Constants';\nexport function getDropDownValues(values, name) {\n  return values[name] && values[name].label ? values[name].label : values[name];\n} // to get value form selected dropdown values\n\nexport function getValueOfDropDown(values, name) {\n  return values[name] && values[name].value ? values[name].value : values[name];\n}\nexport function dateToStringFormatter(date) {\n  if (date) return moment(date).format(GLOBAL_CONSTANTS.DATE_FORMAT);\n}\nexport function stringToDateFormatter(inputString) {\n  if (inputString) return moment(inputString, GLOBAL_CONSTANTS.DATE_FORMAT);\n}\nexport function formatStringToDate(inputString) {\n  if (inputString) return moment(inputString, GLOBAL_CONSTANTS.DMS_DATE_FORMAT);\n}\nexport function getValuesForDropDown(options, label) {\n  return options.find(option => option.label === label);\n}\nexport function encrypt(data) {\n  const keyHex = CryptoJS.enc.Utf8.parse(ENCYPT_KEY);\n  const encrypted = CryptoJS.TripleDES.encrypt(data, keyHex, {\n    mode: CryptoJS.mode.ECB,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return encrypted.toString();\n}\nexport const getCurrentPrivilages = (privilages, menuPrivilages) => {\n  const priv = {\n    create: false,\n    edit: false,\n    delete: false,\n    download: false,\n    info: false\n  };\n  let privConst = {};\n\n  if (privilages && menuPrivilages) {\n    privConst = {\n      create: _.includes(privilages, menuPrivilages.create),\n      edit: _.includes(privilages, menuPrivilages.edit),\n      delete: _.includes(privilages, menuPrivilages.delete),\n      download: _.includes(privilages, menuPrivilages.download),\n      info: _.includes(privilages, menuPrivilages.info)\n    };\n  }\n\n  return Object.assign(priv, privConst);\n};\nexport function getDropDownValue(value, attribute = 'value') {\n  const valueType = typeof value;\n\n  if (valueType == 'string' || valueType == 'number' || valueType == 'boolean' || valueType == 'undefined' || value == null) {\n    return value;\n  }\n\n  ;\n  if (Array.isArray(value)) return value.map(v => getDropDownValue(v, attribute));\n  return value[attribute];\n}","map":{"version":3,"sources":["/home/alrin/reactproject/kms-ui/src/util/Util.js"],"names":["React","moment","CryptoJS","_","GLOBAL_CONSTANTS","ENCYPT_KEY","getDropDownValues","values","name","label","getValueOfDropDown","value","dateToStringFormatter","date","format","DATE_FORMAT","stringToDateFormatter","inputString","formatStringToDate","DMS_DATE_FORMAT","getValuesForDropDown","options","find","option","encrypt","data","keyHex","enc","Utf8","parse","encrypted","TripleDES","mode","ECB","padding","pad","Pkcs7","toString","getCurrentPrivilages","privilages","menuPrivilages","priv","create","edit","delete","download","info","privConst","includes","Object","assign","getDropDownValue","attribute","valueType","Array","isArray","map","v"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport CryptoJS from 'crypto-js';\nimport _ from 'lodash';\n\nimport { GLOBAL_CONSTANTS, ENCYPT_KEY } from './Constants';\n\nexport function getDropDownValues(values, name) {\n    return (values[name] && values[name].label) ? values[name].label : values[name];\n}\n// to get value form selected dropdown values\nexport function getValueOfDropDown(values, name) {\n    return (values[name] && values[name].value) ? values[name].value : values[name];\n}\n\nexport function dateToStringFormatter(date) {\n    if (date)\n        return moment(date).format(GLOBAL_CONSTANTS.DATE_FORMAT);\n}\n\n\nexport function stringToDateFormatter(inputString) {\n    if (inputString)\n        return moment(inputString, GLOBAL_CONSTANTS.DATE_FORMAT);\n}\n\nexport function formatStringToDate(inputString) {\n    if (inputString)\n        return moment(inputString,GLOBAL_CONSTANTS.DMS_DATE_FORMAT);\n}\n\nexport function getValuesForDropDown(options, label) {\n    return options.find(option => option.label === label);\n}\n\nexport function encrypt(data) {\n\n    const keyHex = CryptoJS.enc.Utf8.parse(ENCYPT_KEY);\n    const encrypted = CryptoJS.TripleDES.encrypt(data, keyHex, {\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7\n    });\n\n    return encrypted.toString()\n}\n\nexport const getCurrentPrivilages = (privilages, menuPrivilages) => {\n\n    const priv = {\n        create: false,\n        edit: false,\n        delete: false,\n        download: false,\n        info: false\n    };\n    let privConst = {};\n    if (privilages && menuPrivilages) {\n        privConst = {\n            create: _.includes(privilages, menuPrivilages.create),\n            edit: _.includes(privilages, menuPrivilages.edit),\n            delete: _.includes(privilages, menuPrivilages.delete),\n            download: _.includes(privilages, menuPrivilages.download),\n            info: _.includes(privilages, menuPrivilages.info)\n        }\n    }\n\n    return Object.assign(priv, privConst);\n};\n\nexport function getDropDownValue(value, attribute = 'value') {\n    const valueType = typeof value;\n\n    if (valueType == 'string'\n        || valueType == 'number'\n        || valueType == 'boolean'\n        || valueType == 'undefined'\n        || value == null) {\n        return value\n    };\n    if (Array.isArray(value))\n        return value.map(v => getDropDownValue(v, attribute));\n\n    return value[attribute];\n}"]},"metadata":{},"sourceType":"module"}
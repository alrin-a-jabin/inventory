{"ast":null,"code":"var _jsxFileName = \"/home/alrin/Downloads/INVENTORY22/src/components/inventory/allocate-file/Pagination.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  jjjjjj: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\nconst defaultProps = {\n  initialPage: 1,\n  pageSize: 10\n};\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pager: {}\n    };\n  }\n\n  componentWillMount() {\n    // set page if items array isn't empty\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // reset page if items array has changed\n    if (this.props.items !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    var {\n      items,\n      pageSize\n    } = this.props;\n    var pager = this.state.pager;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    } // get new pager object for specified page\n\n\n    pager = this.getPager(items.length, page, pageSize); // get new page of items from items array\n\n    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1); // update state\n\n    this.setState({\n      pager: pager\n    }); // call change page function in parent component\n\n    this.props.onChangePage(pageOfItems);\n  }\n\n  getPager(totalItems, currentPage, pageSize) {\n    // default to first page\n    currentPage = currentPage || 1; // default page size is 10\n\n    pageSize = pageSize || 10; // calculate total pages\n\n    var totalPages = Math.ceil(totalItems / pageSize);\n    var startPage, endPage;\n\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    } // calculate start and end item indexes\n\n\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i); // return object with all pager properties required by the view\n\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  }\n\n  render() {\n    var pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return React.createElement(\"ul\", {\n      className: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: pager.currentPage === 1 ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => this.setPage(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"First\")), React.createElement(\"li\", {\n      className: pager.currentPage === 1 ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => this.setPage(pager.currentPage - 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Previous\")), pager.pages.map((page, index) => React.createElement(\"li\", {\n      key: index,\n      className: pager.currentPage === page ? 'active' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => this.setPage(page),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, page))), React.createElement(\"li\", {\n      className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => this.setPage(pager.currentPage + 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Next\")), React.createElement(\"li\", {\n      className: pager.currentPage === pager.totalPages ? 'disabled' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => this.setPage(pager.totalPages),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Last\")));\n  }\n\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/inventory/allocate-file/Pagination.js"],"names":["React","PropTypes","propTypes","items","array","isRequired","jjjjjj","func","initialPage","number","pageSize","defaultProps","Pagination","Component","constructor","props","state","pager","componentWillMount","length","setPage","componentDidUpdate","prevProps","prevState","page","totalPages","getPager","pageOfItems","slice","startIndex","endIndex","setState","onChangePage","totalItems","currentPage","Math","ceil","startPage","endPage","min","pages","Array","keys","map","i","render","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst propTypes = {\n    items: PropTypes.array.isRequired,\n    jjjjjj: PropTypes.func.isRequired,\n    initialPage: PropTypes.number,\n    pageSize: PropTypes.number\n}\n\nconst defaultProps = {\n    initialPage: 1,\n    pageSize: 10\n}\n\nclass Pagination extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { pager: {} };\n    }\n\n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.items && this.props.items.length) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // reset page if items array has changed\n        if (this.props.items !== prevProps.items) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    setPage(page) {\n        var { items, pageSize } = this.props;\n        var pager = this.state.pager;\n\n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n\n        // get new pager object for specified page\n        pager = this.getPager(items.length, page, pageSize);\n\n        // get new page of items from items array\n        var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n\n        // update state\n        this.setState({ pager: pager });\n\n        // call change page function in parent component\n        this.props.onChangePage(pageOfItems);\n    }\n\n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n\n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n\n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (currentPage + 4 >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n\n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n\n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages\n        };\n    }\n\n    render() {\n        var pager = this.state.pager;\n\n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n\n        return (\n            <ul className=\"pagination\">\n                <li className={pager.currentPage === 1 ? 'disabled' : ''}>\n                    <a onClick={() => this.setPage(1)}>First</a>\n                </li>\n                <li className={pager.currentPage === 1 ? 'disabled' : ''}>\n                    <a onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n                </li>\n                {pager.pages.map((page, index) =>\n                    <li key={index} className={pager.currentPage === page ? 'active' : ''}>\n                        <a onClick={() => this.setPage(page)}>{page}</a>\n                    </li>\n                )}\n                <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n                    <a onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n                </li>\n                <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n                    <a onClick={() => this.setPage(pager.totalPages)}>Last</a>\n                </li>\n            </ul>\n        );\n    }\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}
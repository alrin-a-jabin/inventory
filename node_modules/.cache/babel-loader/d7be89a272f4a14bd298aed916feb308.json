{"ast":null,"code":"var _jsxFileName = \"/home/alrin/Downloads/INVENTORY22/src/components/inventory/returntest/Pagination.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number,\n  pageSize: PropTypes.number\n};\nconst defaultProps = {\n  initialPage: 1,\n  pageSize: 5\n};\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getAllocationFileList = value => {\n      this.props.ajaxUtil.sendRequest(this.props.url_Inventory.ALLOCATION_FILE_LIST_URL + `&pageNumber=${value}`, {}, response => {\n        if (!response.status) {\n          this.props.setNotification({\n            message: response.message,\n            hasError: response.status,\n            timestamp: new Date().getTime()\n          });\n        } else {\n          this.setState({\n            totalRows: response.data.totalElements\n          });\n\n          if (response.hasOwnProperty('data')) {\n            this.setState({\n              allocationFileList: response.data.content\n            });\n            console.log(response.data);\n          }\n        }\n      }, this.props.loadingFunction, {\n        method: 'GET',\n        isShowSuccess: false\n      });\n    };\n\n    this.state = {\n      pager: {}\n    };\n  }\n\n  componentWillMount() {\n    // set page if items array isn't empty\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // reset page if items array has changed\n    if (this.props.items !== prevProps.items) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage(page) {\n    var {\n      items,\n      pageSize\n    } = this.props;\n    var pager = this.state.pager;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    } // get new pager object for specified page\n\n\n    pager = this.getPager(items.length, page, pageSize); // get new page of items from items array\n\n    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1); // var pageOfItems =this.state.pager.currentPage;\n    // update state\n\n    this.setState({\n      pager: pager\n    }); // call change page function in parent component\n\n    this.props.onChangePage(pageOfItems);\n    this.getAllocationFileList(pager.currentPage);\n  }\n\n  getPager(totalItems, currentPage, pageSize) {\n    // default to first page\n    currentPage = currentPage || 1; // default page size is 10\n\n    pageSize = pageSize || 5; // calculate total pages\n\n    var totalPages = Math.ceil(totalItems / pageSize);\n    var startPage, endPage;\n\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    } // var startPage, endPage;\n    // if (totalPages <= 5) {\n    //     // less than 10 total pages so show all\n    //     startPage = 1;\n    //     endPage = totalPages;\n    // } else {\n    //     // more than 10 total pages so calculate start and end pages\n    //     if (currentPage <= 3) {\n    //         startPage = 1;\n    //         endPage = 5;\n    //     } else if (currentPage + 2 >= totalPages) {\n    //         startPage = totalPages - 4;\n    //         endPage = totalPages;\n    //     } else {\n    //         startPage = currentPage - 1;\n    //         endPage = currentPage + 3;\n    //     }\n    // }\n    // calculate start and end item indexes\n\n\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n    var pages = [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n    console.log(pages); // return object with all pager properties required by the view\n\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  }\n\n  render() {\n    var pager = this.state.pager;\n\n    if (!pager.pages || pager.pages.length <= 1) {\n      // don't display pager if there is only 1 page\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      \"aria-label\": \"Page navigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: pager.currentPage === 1 ? 'disabled' : 'page-item',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"First\")), React.createElement(\"li\", {\n      className: pager.currentPage === 1 ? 'disabled' : 'page-item',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(pager.currentPage - 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Previous\")), pager.pages.map((page, index) => React.createElement(\"li\", {\n      key: index,\n      className: \"page-item\",\n      className: pager.currentPage === page ? 'active' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(page),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, page))), React.createElement(\"li\", {\n      className: pager.currentPage === pager.totalPages ? 'disabled' : 'page-item',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(pager.currentPage + 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Next\")), React.createElement(\"li\", {\n      className: \"\",\n      className: pager.currentPage === pager.totalPages ? 'disabled' : 'page-item',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"page-link\",\n      onClick: () => this.setPage(pager.totalPages),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Last\")))));\n  }\n\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination; // import React from 'react';\n// import PropTypes from 'prop-types';\n// const propTypes = {\n//     items: PropTypes.array.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     initialPage: PropTypes.number,\n//     pageSize: PropTypes.number\n// }\n// const defaultProps = {\n//     initialPage: 1,\n//     pageSize: 10\n// }\n// class Pagination extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { pager: {} };\n//     }\n//     componentWillMount() {\n//         // set page if items array isn't empty\n//         if (this.props.items && this.props.items.length) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n//     componentDidUpdate(prevProps, prevState) {\n//         // reset page if items array has changed\n//         if (this.props.items !== prevProps.items) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n//     setPage(page) {\n//         var { items, pageSize } = this.props;\n//         var pager = this.state.pager;\n//         if (page < 1 || page > pager.totalPages) {\n//             return;\n//         }\n//         // get new pager object for specified page\n//         pager = this.getPager(items.length, page, pageSize);\n//         // get new page of items from items array\n//         // var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n//         var pageOfItems =this.state.pager\n//         // update state\n//         this.setState({ pager: pager });\n//         // call change page function in parent component\n//         this.props.onChangePage(pageOfItems);\n//     }\n//     getPager(totalItems, currentPage, pageSize) {\n//         // default to first page\n//         currentPage = currentPage || 1;\n//         // default page size is 10\n//         pageSize = pageSize || 10;\n//         // calculate total pages\n//         var totalPages = Math.ceil(totalItems / pageSize);\n// var startPage, endPage;\n// if (totalPages <= 10) {\n//     // less than 10 total pages so show all\n//     startPage = 1;\n//     endPage = totalPages;\n// } else {\n//     // more than 10 total pages so calculate start and end pages\n//     if (currentPage <= 6) {\n//         startPage = 1;\n//         endPage = 10;\n//     } else if (currentPage + 4 >= totalPages) {\n//         startPage = totalPages - 9;\n//         endPage = totalPages;\n//     } else {\n//         startPage = currentPage - 5;\n//         endPage = currentPage + 4;\n//     }\n// }\n//         // calculate start and end item indexes\n//         var startIndex = (currentPage - 1) * pageSize;\n//         var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n//         // create an array of pages to ng-repeat in the pager control\n//         var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n//         // return object with all pager properties required by the view\n//         return {\n//             totalItems: totalItems,\n//             currentPage: currentPage,\n//             pageSize: pageSize,\n//             totalPages: totalPages,\n//             startPage: startPage,\n//             endPage: endPage,\n//             startIndex: startIndex,\n//             endIndex: endIndex,\n//             pages: pages\n//         };\n//     }\n//     render() {\n//         var pager = this.state.pager;\n//         if (!pager.pages || pager.pages.length <= 1) {\n//             // don't display pager if there is only 1 page\n//             return null;\n//         }\n//         return (\n//             <ul className=\"pagination\">\n//                 <li className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n//                 </li>\n//                 <li className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//                 </li>\n//                 {pager.pages.map((page, index) =>\n//                     <li key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n//                     </li>\n//                 )}\n//                 <li className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//                 </li>\n//                 <li className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//                 </li>\n//             </ul>\n//         );\n//     }\n// }\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n// export default Pagination;","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/inventory/returntest/Pagination.js"],"names":["React","PropTypes","propTypes","items","array","isRequired","onChangePage","func","initialPage","number","pageSize","defaultProps","Pagination","Component","constructor","props","getAllocationFileList","value","ajaxUtil","sendRequest","url_Inventory","ALLOCATION_FILE_LIST_URL","response","status","setNotification","message","hasError","timestamp","Date","getTime","setState","totalRows","data","totalElements","hasOwnProperty","allocationFileList","content","console","log","loadingFunction","method","isShowSuccess","state","pager","componentWillMount","length","setPage","componentDidUpdate","prevProps","prevState","page","totalPages","getPager","pageOfItems","slice","startIndex","endIndex","currentPage","totalItems","Math","ceil","startPage","endPage","min","pages","Array","keys","map","i","render","index"],"mappings":"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":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n    items: PropTypes.array.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    initialPage: PropTypes.number,\n    pageSize: PropTypes.number\n}\n\nconst defaultProps = {\n    initialPage: 1,\n    pageSize: 5\n}\n\nclass Pagination extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { pager: {} };\n    }\n\n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.items && this.props.items.length) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // reset page if items array has changed\n        if (this.props.items !== prevProps.items) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    setPage(page) {\n        var { items, pageSize } = this.props;\n        var pager = this.state.pager;\n\n        if (page < 1 || page > pager.totalPages) {\n            return;\n        }\n\n        // get new pager object for specified page\n        pager = this.getPager(items.length, page, pageSize);\n\n        // get new page of items from items array\n        var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n        // var pageOfItems =this.state.pager.currentPage;\n\n        // update state\n        this.setState({ pager: pager });\n\n        // call change page function in parent component\n        this.props.onChangePage(pageOfItems);\n        this.getAllocationFileList(pager.currentPage);\n        \n    }\n\n    getAllocationFileList = (value) => {\n        this.props.ajaxUtil.sendRequest(\n          this.props.url_Inventory.ALLOCATION_FILE_LIST_URL +`&pageNumber=${value}`,\n          {},\n          (response) => {\n            if (!response.status) {\n              this.props.setNotification({\n                message: response.message,\n                hasError: response.status,\n                timestamp: new Date().getTime()\n              });\n            } else {\n              this.setState({ totalRows: response.data.totalElements })\n              if (response.hasOwnProperty('data')) {\n                this.setState({ allocationFileList: response.data.content })\n                console.log(response.data);\n              }\n            }\n          },\n          this.props.loadingFunction,\n          { method: 'GET', isShowSuccess: false }\n        );\n      }\n    \n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n\n        // default page size is 10\n        pageSize = pageSize || 5;\n\n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n\n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (currentPage + 4 >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n\n        // var startPage, endPage;\n        // if (totalPages <= 5) {\n        //     // less than 10 total pages so show all\n        //     startPage = 1;\n        //     endPage = totalPages;\n        // } else {\n        //     // more than 10 total pages so calculate start and end pages\n        //     if (currentPage <= 3) {\n        //         startPage = 1;\n        //         endPage = 5;\n        //     } else if (currentPage + 2 >= totalPages) {\n        //         startPage = totalPages - 4;\n        //         endPage = totalPages;\n        //     } else {\n        //         startPage = currentPage - 1;\n        //         endPage = currentPage + 3;\n        //     }\n        // }\n\n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n        console.log(pages);\n\n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages\n        };\n    }\n\n    render() {\n        var pager = this.state.pager;\n\n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n\n        return (\n            <div>\n            <nav aria-label=\"Page navigation\">\n\n                <ul className=\"pagination\">\n                    <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n                        <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n                    </li>\n                    <li  className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n                    </li>\n                    {pager.pages.map((page, index) =>\n                        <li  key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n                            <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n                        </li>\n                    )}\n                    <li  className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n                    </li>\n                    <li className=\"\" className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n                    </li>\n                </ul>\n            </nav>\n            </div>\n        );\n    }\n}\n\nPagination.propTypes = propTypes;\nPagination.defaultProps = defaultProps;\nexport default Pagination;\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import PropTypes from 'prop-types';\n\n// const propTypes = {\n//     items: PropTypes.array.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     initialPage: PropTypes.number,\n//     pageSize: PropTypes.number\n// }\n\n// const defaultProps = {\n//     initialPage: 1,\n//     pageSize: 10\n// }\n\n// class Pagination extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { pager: {} };\n//     }\n\n//     componentWillMount() {\n//         // set page if items array isn't empty\n//         if (this.props.items && this.props.items.length) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n\n//     componentDidUpdate(prevProps, prevState) {\n//         // reset page if items array has changed\n//         if (this.props.items !== prevProps.items) {\n//             this.setPage(this.props.initialPage);\n//         }\n//     }\n\n//     setPage(page) {\n//         var { items, pageSize } = this.props;\n//         var pager = this.state.pager;\n\n//         if (page < 1 || page > pager.totalPages) {\n//             return;\n//         }\n\n//         // get new pager object for specified page\n//         pager = this.getPager(items.length, page, pageSize);\n\n//         // get new page of items from items array\n//         // var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n//         var pageOfItems =this.state.pager\n\n\n//         // update state\n//         this.setState({ pager: pager });\n\n//         // call change page function in parent component\n//         this.props.onChangePage(pageOfItems);\n//     }\n\n//     getPager(totalItems, currentPage, pageSize) {\n//         // default to first page\n//         currentPage = currentPage || 1;\n\n//         // default page size is 10\n//         pageSize = pageSize || 10;\n\n//         // calculate total pages\n//         var totalPages = Math.ceil(totalItems / pageSize);\n\n        // var startPage, endPage;\n        // if (totalPages <= 10) {\n        //     // less than 10 total pages so show all\n        //     startPage = 1;\n        //     endPage = totalPages;\n        // } else {\n        //     // more than 10 total pages so calculate start and end pages\n        //     if (currentPage <= 6) {\n        //         startPage = 1;\n        //         endPage = 10;\n        //     } else if (currentPage + 4 >= totalPages) {\n        //         startPage = totalPages - 9;\n        //         endPage = totalPages;\n        //     } else {\n        //         startPage = currentPage - 5;\n        //         endPage = currentPage + 4;\n        //     }\n        // }\n\n//         // calculate start and end item indexes\n//         var startIndex = (currentPage - 1) * pageSize;\n//         var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n//         // create an array of pages to ng-repeat in the pager control\n//         var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n\n//         // return object with all pager properties required by the view\n//         return {\n//             totalItems: totalItems,\n//             currentPage: currentPage,\n//             pageSize: pageSize,\n//             totalPages: totalPages,\n//             startPage: startPage,\n//             endPage: endPage,\n//             startIndex: startIndex,\n//             endIndex: endIndex,\n//             pages: pages\n//         };\n//     }\n\n//     render() {\n//         var pager = this.state.pager;\n\n//         if (!pager.pages || pager.pages.length <= 1) {\n//             // don't display pager if there is only 1 page\n//             return null;\n//         }\n\n//         return (\n//             <ul className=\"pagination\">\n//                 <li className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(1)}>First</a>\n//                 </li>\n//                 <li className={pager.currentPage === 1 ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//                 </li>\n//                 {pager.pages.map((page, index) =>\n//                     <li key={index} className=\"page-item\" className={pager.currentPage === page ? 'active' : ''}>\n//                         <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\n//                     </li>\n//                 )}\n//                 <li className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//                 </li>\n//                 <li className={pager.currentPage === pager.totalPages ? 'disabled' : 'page-item'}>\n//                     <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//                 </li>\n//             </ul>\n//         );\n//     }\n// }\n\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n// export default Pagination;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { BL_STATUS_CODES, BL_RESULT_CODES } from '../../../constants/StatusCode';\nimport { GENERIC_SUCCESS_MSG, GENERIC_ERROR_MSG } from '../../../constants/Messages';\nimport { ajax } from '../Ajax';\nexport default class AjaxUtil {\n  constructor(obj) {\n    this.RESPONSE_CODES = {\n      STATUS_SUCCESS: obj.responseCode ? obj.responseCode.success || BL_STATUS_CODES.SUCCESS : BL_STATUS_CODES.SUCCESS,\n      STATUS_UNAUTH: obj.responseCode ? obj.responseCode.resultParam || BL_STATUS_CODES.UNATHORIZED : BL_STATUS_CODES.UNATHORIZED,\n      RESULT_PARAM: obj.responseCode.resultParam || 'resultCode',\n      RESULT_SUCCESS: obj.responseCode ? obj.responseCode.resultSuccess || BL_RESULT_CODES.SUCCESS : BL_RESULT_CODES.SUCCESS\n    };\n    this.MESSAGES = {\n      RESULT_PARAM: obj.messages.resultParam || 'message',\n      SUCCESS: obj.messages ? obj.messages.success || GENERIC_SUCCESS_MSG : GENERIC_SUCCESS_MSG,\n      FAILURE: obj.messages ? obj.messages.failure || GENERIC_ERROR_MSG : GENERIC_ERROR_MSG\n    };\n    this.setNotification = obj.setNotification;\n    this.logout = obj.logout;\n    this.authKey = obj.authKey;\n    this.channel = obj.channel;\n    this.entity = obj.XENTITY;\n    this.isEncrpt = obj.isEncrpt;\n    this.encrptKey = obj.encrptKey;\n    this.makeCallBack = this.makeCallBack.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n  }\n\n  makeCallBack(response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse, isLogout) {\n    if (response && response.status === this.RESPONSE_CODES.STATUS_SUCCESS) {\n      if (response.data && response.data[this.RESPONSE_CODES.RESULT_PARAM]) {\n        const hasError = response.data[this.RESPONSE_CODES.RESULT_PARAM] === this.RESPONSE_CODES.RESULT_SUCCESS ? false : true;\n\n        if (hasError && isProceedOnError) {\n          if (callback) callback(returnFullResponse ? response : response.data, hasError);\n        } else if (!hasError) {\n          if (callback) callback(returnFullResponse ? response : response.data, hasError);\n        }\n\n        if (isShowSuccess && !hasError) {\n          if (response.data[this.MESSAGES.RESULT_PARAM]) {\n            if (this.setNotification) this.setNotification({\n              \"message\": response.data[this.MESSAGES.RESULT_PARAM],\n              \"hasError\": hasError,\n              \"timestamp\": new Date().getTime()\n            });\n          } else if (isShowGenericMessage) {\n            if (this.setNotification) this.setNotification({\n              \"message\": this.MESSAGES.SUCCESS,\n              \"hasError\": hasError,\n              \"timestamp\": new Date().getTime()\n            });\n          }\n        } else if (isShowFailure && hasError) {\n          if (response.data[this.MESSAGES.RESULT_PARAM]) {\n            if (this.setNotification) this.setNotification({\n              \"message\": response.data[this.MESSAGES.RESULT_PARAM],\n              \"hasError\": hasError,\n              \"timestamp\": new Date().getTime()\n            });\n          } else if (isShowGenericMessage) {\n            if (this.setNotification) this.setNotification({\n              \"message\": this.MESSAGES.FAILURE,\n              \"hasError\": hasError,\n              \"timestamp\": new Date().getTime()\n            });\n          }\n        }\n      } else {\n        callback(returnFullResponse ? response : response.data, false);\n\n        if (isShowSuccess) {\n          if (response.data && response.data[this.MESSAGES.RESULT_PARAM]) {\n            if (this.setNotification) this.setNotification({\n              \"message\": response.data[this.MESSAGES.RESULT_PARAM],\n              \"hasError\": false,\n              \"timestamp\": new Date().getTime()\n            });\n          } else if (isShowGenericMessage) {\n            if (this.setNotification) this.setNotification({\n              \"message\": this.MESSAGES.SUCCESS,\n              \"hasError\": false,\n              \"timestamp\": new Date().getTime()\n            });\n          }\n        }\n      }\n    } else if (response && response.status && response.status !== this.RESPONSE_CODES.STATUS_UNAUTH) {\n      if (isProceedOnError) {\n        if (callback) callback(returnFullResponse ? response : response ? response.data : null, true);\n      }\n\n      if (isShowFailure) {\n        if (response && response.data && response.data[this.MESSAGES.RESULT_PARAM]) {\n          if (this.setNotification) this.setNotification({\n            \"message\": response.data[this.MESSAGES.RESULT_PARAM],\n            \"hasError\": true,\n            \"timestamp\": new Date().getTime()\n          });\n        } else if (isShowGenericMessage) {\n          if (this.setNotification) this.setNotification({\n            \"message\": this.MESSAGES.FAILURE,\n            \"hasError\": true,\n            \"timestamp\": new Date().getTime()\n          });\n        }\n      }\n    } else if (response && (response.status === this.RESPONSE_CODES.STATUS_UNAUTH || response.status === `${this.RESPONSE_CODES.STATUS_UNAUTH}`)) {\n      //Status 401 unauthorized -> Logging Out\n      if (this.logout && isLogout) this.logout();else callback(returnFullResponse ? response : response.data, true);\n    } else if ((!response || !response.status) && isShowFailure) {\n      if (this.setNotification) this.setNotification({\n        \"message\": this.MESSAGES.FAILURE,\n        \"hasError\": true,\n        \"timestamp\": new Date().getTime()\n      });\n    }\n  }\n\n  getAuthKey() {\n    return this.authKey;\n  }\n\n  getChannel() {\n    return this.channel;\n  }\n\n  getEntity() {\n    return this.entity;\n  }\n\n  getIsEncrpt() {\n    return this.isEncrpt;\n  }\n\n  getEncrptKey() {\n    return this.encrptKey;\n  }\n\n  sendRequest(url, request, callback, loadingFunction, options = {}) {\n    ajax(url, request, this.makeCallBack, callback, loadingFunction, { ...options,\n      'authKey': this.authKey,\n      'channel': this.channel,\n      'XENTITY': this.entity,\n      isEncrpt: this.isEncrpt,\n      encrptKey: this.encrptKey\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/alrin/reactproject/kms-ui/src/components/ajax/elements/ajax/util/AjaxUtil.js"],"names":["BL_STATUS_CODES","BL_RESULT_CODES","GENERIC_SUCCESS_MSG","GENERIC_ERROR_MSG","ajax","AjaxUtil","constructor","obj","RESPONSE_CODES","STATUS_SUCCESS","responseCode","success","SUCCESS","STATUS_UNAUTH","resultParam","UNATHORIZED","RESULT_PARAM","RESULT_SUCCESS","resultSuccess","MESSAGES","messages","FAILURE","failure","setNotification","logout","authKey","channel","entity","XENTITY","isEncrpt","encrptKey","makeCallBack","bind","sendRequest","response","callback","isShowGenericMessage","isShowSuccess","isShowFailure","isProceedOnError","returnFullResponse","isLogout","status","data","hasError","Date","getTime","getAuthKey","getChannel","getEntity","getIsEncrpt","getEncrptKey","url","request","loadingFunction","options"],"mappings":"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","sourcesContent":["import { BL_STATUS_CODES, BL_RESULT_CODES } from '../../../constants/StatusCode';\nimport { GENERIC_SUCCESS_MSG, GENERIC_ERROR_MSG } from '../../../constants/Messages';\nimport { ajax } from '../Ajax';\n\nexport default class AjaxUtil {\n  constructor(obj) {\n    this.RESPONSE_CODES = {\n      STATUS_SUCCESS: obj.responseCode ? (obj.responseCode.success || BL_STATUS_CODES.SUCCESS) : BL_STATUS_CODES.SUCCESS,\n      STATUS_UNAUTH: obj.responseCode ? (obj.responseCode.resultParam || BL_STATUS_CODES.UNATHORIZED) : BL_STATUS_CODES.UNATHORIZED,\n      RESULT_PARAM: obj.responseCode.resultParam || 'resultCode',\n      RESULT_SUCCESS: obj.responseCode ? (obj.responseCode.resultSuccess || BL_RESULT_CODES.SUCCESS) : BL_RESULT_CODES.SUCCESS\n    }\n    this.MESSAGES = {\n      RESULT_PARAM: obj.messages.resultParam || 'message',\n      SUCCESS: obj.messages ? (obj.messages.success || GENERIC_SUCCESS_MSG) : GENERIC_SUCCESS_MSG,\n      FAILURE: obj.messages ? (obj.messages.failure || GENERIC_ERROR_MSG) : GENERIC_ERROR_MSG\n    }\n    this.setNotification = obj.setNotification;\n    this.logout = obj.logout;\n    this.authKey = obj.authKey;\n    this.channel = obj.channel;\n    this.entity=obj.XENTITY;\n    this.isEncrpt=obj.isEncrpt;\n    this.encrptKey=obj.encrptKey;\n    this.makeCallBack = this.makeCallBack.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n  }\n  makeCallBack(response, callback, isShowGenericMessage, isShowSuccess, isShowFailure, isProceedOnError, returnFullResponse,isLogout) {\n    if (response && response.status === this.RESPONSE_CODES.STATUS_SUCCESS) {\n      if (response.data && response.data[this.RESPONSE_CODES.RESULT_PARAM]) {\n        const hasError = (response.data[this.RESPONSE_CODES.RESULT_PARAM] === this.RESPONSE_CODES.RESULT_SUCCESS ? false : true)\n        if (hasError && isProceedOnError) {\n          if (callback)\n            callback(returnFullResponse ? response : response.data, hasError);\n        } else if (!hasError) {\n          if (callback)\n            callback(returnFullResponse ? response : response.data, hasError);\n        }\n        if (isShowSuccess && !hasError) {\n          if (response.data[this.MESSAGES.RESULT_PARAM]) {\n            if (this.setNotification)\n              this.setNotification({ \"message\": response.data[this.MESSAGES.RESULT_PARAM], \"hasError\": hasError, \"timestamp\": new Date().getTime() });\n          } else if (isShowGenericMessage) {\n            if (this.setNotification)\n              this.setNotification({ \"message\": this.MESSAGES.SUCCESS, \"hasError\": hasError, \"timestamp\": new Date().getTime() });\n          }\n        } else if (isShowFailure && hasError) {\n          if (response.data[this.MESSAGES.RESULT_PARAM]) {\n            if (this.setNotification)\n              this.setNotification({ \"message\": response.data[this.MESSAGES.RESULT_PARAM], \"hasError\": hasError, \"timestamp\": new Date().getTime() });\n          } else if (isShowGenericMessage) {\n            if (this.setNotification)\n              this.setNotification({ \"message\": this.MESSAGES.FAILURE, \"hasError\": hasError, \"timestamp\": new Date().getTime() });\n          }\n        }\n      } else {\n        callback(returnFullResponse ? response : response.data, false);\n        if (isShowSuccess) {\n          if (response.data && response.data[this.MESSAGES.RESULT_PARAM]) {\n            if (this.setNotification)\n              this.setNotification({ \"message\": response.data[this.MESSAGES.RESULT_PARAM], \"hasError\": false, \"timestamp\": new Date().getTime() });\n          } else if (isShowGenericMessage) {\n            if (this.setNotification)\n              this.setNotification({ \"message\": this.MESSAGES.SUCCESS, \"hasError\": false, \"timestamp\": new Date().getTime() });\n          }\n        }\n      }\n    } else if (response && response.status && response.status !== this.RESPONSE_CODES.STATUS_UNAUTH) {\n      if (isProceedOnError) {\n        if (callback)\n          callback(returnFullResponse ? response : (response ? response.data : null), true);\n      }\n\n      if (isShowFailure) {\n        if (response && response.data && response.data[this.MESSAGES.RESULT_PARAM]) {\n          if (this.setNotification)\n            this.setNotification({ \"message\": response.data[this.MESSAGES.RESULT_PARAM], \"hasError\": true, \"timestamp\": new Date().getTime() });\n        } else if (isShowGenericMessage) {\n          if (this.setNotification)\n            this.setNotification({ \"message\": this.MESSAGES.FAILURE, \"hasError\": true, \"timestamp\": new Date().getTime() });\n        }\n      }\n    } else if (response && (response.status === this.RESPONSE_CODES.STATUS_UNAUTH || response.status === `${this.RESPONSE_CODES.STATUS_UNAUTH}`)) {\n      //Status 401 unauthorized -> Logging Out\n      if (this.logout&&isLogout)\n        this.logout();\n      else\n        callback(returnFullResponse ? response : response.data, true);\n\n    } else if ((!response || !response.status) && isShowFailure) {\n      if (this.setNotification)\n        this.setNotification({ \"message\": this.MESSAGES.FAILURE, \"hasError\": true, \"timestamp\": new Date().getTime() });\n    }\n  }\n  getAuthKey() {\n    return this.authKey;\n  }\n  getChannel() {\n    return this.channel;\n  }\n  getEntity(){\n    return this.entity\n  }\n  getIsEncrpt(){\n     return this.isEncrpt\n  }\n  getEncrptKey(){\n    return this.encrptKey\n  }\n  \n  sendRequest(url, request, callback, loadingFunction, options = {}) {\n    ajax(url, request, this.makeCallBack, callback, loadingFunction, { ...options, 'authKey': this.authKey, 'channel': this.channel,'XENTITY':this.entity,isEncrpt:this.isEncrpt,encrptKey:this.encrptKey});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
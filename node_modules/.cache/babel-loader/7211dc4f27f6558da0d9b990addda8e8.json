{"ast":null,"code":"// import {\n//     AUTH_URL,\n//     LOGIN_URL,\n//     LOGOUT_URL,\n//     AUTH_KEY\n//   } from '../util/Constants';\n//   import {\n//     LOGIN,\n//     LOGOUT,\n//     VALIDATE,\n//     SET_LOADING,\n//     SET_TOAST_NOTIF,\n//     SET_MODAL_POPUP,\n//     SET_HEADER,\n//     SAVE_STATE,\n//     SET_BREAD_CRUMB,\n//     ADD_TO_NOTIFICATION,\n//     REMOVE_FROM_NOTIFICATION,\n//     CLEAR_ALL_NOTIFICATION\n//   } from '../util/ActionConstants'\n//   import { setCredentials, encryptData, ajaxRequest } from '../components/ajax/index';\n//   import { encrypt } from '../util/Util';\n//   export function addToNotification(data) {\n//       return {\n//           type: ADD_TO_NOTIFICATION,\n//           payload: data\n//       };\n//   };\n//   export function removeFromNotification(id) {\n//       return {\n//           type: REMOVE_FROM_NOTIFICATION,\n//           payload: id\n//       };\n//   };\n//   export function clearAllNotification() {\n//       return {\n//           type: CLEAR_ALL_NOTIFICATION,\n//           payload: []\n//       };\n//   };\n//   export function logIn(payload) {\n//     const data = {\n//         \"userId\": payload.username,\n//       //   \"password\": encryptData('md5', payload.password)\n//         //\"password\": encrypt(payload.password)\n//         \"password\":payload.password\n//     };\n//     const request = ajaxRequest(LOGIN_URL, data, { authKey : AUTH_KEY });\n//     return {\n//         type: LOGIN,\n//         payload: request\n//     };\n//   }\n//   export function validateLogin(showResonse = true) {\n//     const request = '';\n//     //const request = ajaxRequest(AUTH_URL, null, { authKey : AUTH_KEY });\n//     return {\n//         type: VALIDATE,\n//         payload: request\n//     };\n//   }\n//   export function logOut(msg) {\n//       const request = ajaxRequest(LOGOUT_URL, null, { authKey : AUTH_KEY });\n//       setCredentials('','');\n//       return {\n//           type: LOGOUT,\n//           isLoggedIn:true,\n//           payload: {msg}\n//       };\n//   }\n//   export function setLogOut() {\n//       return {\n//           type: LOGOUT,\n//           payload: {}\n//       };\n//   }\n//   export function setLoading(isLoading, isFirstLoad, timestamp) {\n//       return {\n//           type: SET_LOADING,\n//           payload: {isLoading, isFirstLoad, timestamp}\n//       };\n//   }\n//   export function setToastNotif(options) {\n//       if (options)\n//         options.timestamp = new Date().getTime();\n//       return {\n//           type: SET_TOAST_NOTIF,\n//           payload: options\n//       };\n//   }\n//   export function setModalPopup(options) {\n//       return {\n//           type: SET_MODAL_POPUP,\n//           payload: options\n//       };\n//   }\n//   export function saveCurrentState(prevState) {\n//       return {\n//           type: SAVE_STATE,\n//           payload:prevState\n//       };\n//   }\n//   export function setHeader(options) {\n//       return {\n//           type: SET_HEADER,\n//           payload: options\n//       };\n//   }\n//   export function setBreadCrumb(options) {\n//     return {\n//         type: SET_BREAD_CRUMB,\n//         payload: options\n//     };\n//   }\n// import {\n//   AUTH_URL,\n//   LOGIN_URL,\n//   LOGOUT_URL,\n//   AUTH_KEY\n// } from '../util/Constants';\n// import {\n//   LOGIN,\n//   LOGOUT,\n//   VALIDATE,\n//   SET_LOADING,\n//   SET_TOAST_NOTIF,\n//   SET_MODAL_POPUP,\n//   SET_HEADER,\n//   SAVE_STATE,\n//   SET_BREAD_CRUMB,\n//   ADD_TO_NOTIFICATION,\n//   REMOVE_FROM_NOTIFICATION,\n//   CLEAR_ALL_NOTIFICATION\n// } from '../util/ActionConstants'\n// import { setCredentials, encryptData, ajaxRequest } from '../components/ajax/index';\n// import { encrypt } from '../util/Util';\n// export function addToNotification(data) {\n//     return {\n//         type: ADD_TO_NOTIFICATION,\n//         payload: data\n//     };\n// };\n// export function removeFromNotification(id) {\n//     return {\n//         type: REMOVE_FROM_NOTIFICATION,\n//         payload: id\n//     };\n// };\n// export function clearAllNotification() {\n//     return {\n//         type: CLEAR_ALL_NOTIFICATION,\n//         payload: []\n//     };\n// };\n// export function logIn(payload) {\n//   const data = {\n//       \"userId\": payload.username,\n//     //   \"password\": encryptData('md5', payload.password)\n//       //\"password\": encrypt(payload.password)\n//       \"password\":payload.password\n//   };\n//   const request = ajaxRequest(LOGIN_URL, data, { authKey : AUTH_KEY });\n//   return {\n//       type: LOGIN,\n//       payload: request\n//   };\n// }\n// export function validateLogin(showResonse = true) {\n//   const request = ajaxRequest(AUTH_URL, null, { authKey : AUTH_KEY });\n//   return {\n//       type: VALIDATE,\n//       payload: request\n//   };\n// }\n// export function logOut(msg) {\n//     const request = ajaxRequest(LOGOUT_URL, null, { authKey : AUTH_KEY });\n//     setCredentials('','');\n//     return {\n//         type: LOGOUT,\n//         isLoggedIn:true,\n//         payload: {msg}\n//     };\n// }\n// export function setLogOut() {\n//     return {\n//         type: LOGOUT,\n//         payload: {}\n//     };\n// }\n// export function setLoading(isLoading, isFirstLoad, timestamp) {\n//     return {\n//         type: SET_LOADING,\n//         payload: {isLoading, isFirstLoad, timestamp}\n//     };\n// }\n// export function setToastNotif(options) {\n//     if (options)\n//       options.timestamp = new Date().getTime();\n//     return {\n//         type: SET_TOAST_NOTIF,\n//         payload: options\n//     };\n// }\n// export function setModalPopup(options) {\n//     return {\n//         type: SET_MODAL_POPUP,\n//         payload: options\n//     };\n// }\n// export function saveCurrentState(prevState) {\n//     return {\n//         type: SAVE_STATE,\n//         payload:prevState\n//     };\n// }\n// export function setHeader(options) {\n//     return {\n//         type: SET_HEADER,\n//         payload: options\n//     };\n// }\n// export function setBreadCrumb(options) {\n//   return {\n//       type: SET_BREAD_CRUMB,\n//       payload: options\n//   };\n// }","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/actions/index.js"],"names":[],"mappingswsourcesContent":["\r\n// import {\r\n//     AUTH_URL,\r\n//     LOGIN_URL,\r\n//     LOGOUT_URL,\r\n//     AUTH_KEY\r\n//   } from '../util/Constants';\r\n//   import {\r\n//     LOGIN,\r\n//     LOGOUT,\r\n//     VALIDATE,\r\n//     SET_LOADING,\r\n//     SET_TOAST_NOTIF,\r\n//     SET_MODAL_POPUP,\r\n//     SET_HEADER,\r\n//     SAVE_STATE,\r\n//     SET_BREAD_CRUMB,\r\n//     ADD_TO_NOTIFICATION,\r\n//     REMOVE_FROM_NOTIFICATION,\r\n//     CLEAR_ALL_NOTIFICATION\r\n//   } from '../util/ActionConstants'\r\n//   import { setCredentials, encryptData, ajaxRequest } from '../components/ajax/index';\r\n//   import { encrypt } from '../util/Util';\r\n  \r\n//   export function addToNotification(data) {\r\n//       return {\r\n//           type: ADD_TO_NOTIFICATION,\r\n//           payload: data\r\n//       };\r\n//   };\r\n  \r\n//   export function removeFromNotification(id) {\r\n//       return {\r\n//           type: REMOVE_FROM_NOTIFICATION,\r\n//           payload: id\r\n//       };\r\n//   };\r\n  \r\n//   export function clearAllNotification() {\r\n//       return {\r\n//           type: CLEAR_ALL_NOTIFICATION,\r\n//           payload: []\r\n//       };\r\n//   };\r\n//   export function logIn(payload) {\r\n//     const data = {\r\n//         \"userId\": payload.username,\r\n//       //   \"password\": encryptData('md5', payload.password)\r\n//         //\"password\": encrypt(payload.password)\r\n//         \"password\":payload.password\r\n        \r\n//     };\r\n//     const request = ajaxRequest(LOGIN_URL, data, { authKey : AUTH_KEY });\r\n//     return {\r\n//         type: LOGIN,\r\n//         payload: request\r\n//     };\r\n//   }\r\n  \r\n//   export function validateLogin(showResonse = true) {\r\n//     const request = '';\r\n//     //const request = ajaxRequest(AUTH_URL, null, { authKey : AUTH_KEY });\r\n//     return {\r\n//         type: VALIDATE,\r\n//         payload: request\r\n//     };\r\n//   }\r\n  \r\n//   export function logOut(msg) {\r\n//       const request = ajaxRequest(LOGOUT_URL, null, { authKey : AUTH_KEY });\r\n//       setCredentials('','');\r\n//       return {\r\n//           type: LOGOUT,\r\n//           isLoggedIn:true,\r\n//           payload: {msg}\r\n//       };\r\n//   }\r\n  \r\n//   export function setLogOut() {\r\n//       return {\r\n//           type: LOGOUT,\r\n//           payload: {}\r\n//       };\r\n//   }\r\n  \r\n//   export function setLoading(isLoading, isFirstLoad, timestamp) {\r\n//       return {\r\n//           type: SET_LOADING,\r\n//           payload: {isLoading, isFirstLoad, timestamp}\r\n//       };\r\n//   }\r\n  \r\n//   export function setToastNotif(options) {\r\n//       if (options)\r\n//         options.timestamp = new Date().getTime();\r\n  \r\n//       return {\r\n//           type: SET_TOAST_NOTIF,\r\n//           payload: options\r\n//       };\r\n//   }\r\n  \r\n//   export function setModalPopup(options) {\r\n//       return {\r\n//           type: SET_MODAL_POPUP,\r\n//           payload: options\r\n//       };\r\n//   }\r\n  \r\n//   export function saveCurrentState(prevState) {\r\n//       return {\r\n//           type: SAVE_STATE,\r\n//           payload:prevState\r\n//       };\r\n//   }\r\n  \r\n//   export function setHeader(options) {\r\n//       return {\r\n//           type: SET_HEADER,\r\n//           payload: options\r\n//       };\r\n//   }\r\n  \r\n//   export function setBreadCrumb(options) {\r\n//     return {\r\n//         type: SET_BREAD_CRUMB,\r\n//         payload: options\r\n//     };\r\n//   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import {\r\n//   AUTH_URL,\r\n//   LOGIN_URL,\r\n//   LOGOUT_URL,\r\n//   AUTH_KEY\r\n// } from '../util/Constants';\r\n// import {\r\n//   LOGIN,\r\n//   LOGOUT,\r\n//   VALIDATE,\r\n//   SET_LOADING,\r\n//   SET_TOAST_NOTIF,\r\n//   SET_MODAL_POPUP,\r\n//   SET_HEADER,\r\n//   SAVE_STATE,\r\n//   SET_BREAD_CRUMB,\r\n//   ADD_TO_NOTIFICATION,\r\n//   REMOVE_FROM_NOTIFICATION,\r\n//   CLEAR_ALL_NOTIFICATION\r\n// } from '../util/ActionConstants'\r\n// import { setCredentials, encryptData, ajaxRequest } from '../components/ajax/index';\r\n// import { encrypt } from '../util/Util';\r\n\r\n// export function addToNotification(data) {\r\n//     return {\r\n//         type: ADD_TO_NOTIFICATION,\r\n//         payload: data\r\n//     };\r\n// };\r\n\r\n// export function removeFromNotification(id) {\r\n//     return {\r\n//         type: REMOVE_FROM_NOTIFICATION,\r\n//         payload: id\r\n//     };\r\n// };\r\n\r\n// export function clearAllNotification() {\r\n//     return {\r\n//         type: CLEAR_ALL_NOTIFICATION,\r\n//         payload: []\r\n//     };\r\n// };\r\n// export function logIn(payload) {\r\n//   const data = {\r\n//       \"userId\": payload.username,\r\n//     //   \"password\": encryptData('md5', payload.password)\r\n//       //\"password\": encrypt(payload.password)\r\n//       \"password\":payload.password\r\n      \r\n//   };\r\n//   const request = ajaxRequest(LOGIN_URL, data, { authKey : AUTH_KEY });\r\n//   return {\r\n//       type: LOGIN,\r\n//       payload: request\r\n//   };\r\n// }\r\n\r\n// export function validateLogin(showResonse = true) {\r\n//   const request = ajaxRequest(AUTH_URL, null, { authKey : AUTH_KEY });\r\n//   return {\r\n//       type: VALIDATE,\r\n//       payload: request\r\n//   };\r\n// }\r\n\r\n// export function logOut(msg) {\r\n//     const request = ajaxRequest(LOGOUT_URL, null, { authKey : AUTH_KEY });\r\n//     setCredentials('','');\r\n//     return {\r\n//         type: LOGOUT,\r\n//         isLoggedIn:true,\r\n//         payload: {msg}\r\n//     };\r\n// }\r\n\r\n// export function setLogOut() {\r\n//     return {\r\n//         type: LOGOUT,\r\n//         payload: {}\r\n//     };\r\n// }\r\n\r\n// export function setLoading(isLoading, isFirstLoad, timestamp) {\r\n//     return {\r\n//         type: SET_LOADING,\r\n//         payload: {isLoading, isFirstLoad, timestamp}\r\n//     };\r\n// }\r\n\r\n// export function setToastNotif(options) {\r\n//     if (options)\r\n//       options.timestamp = new Date().getTime();\r\n\r\n//     return {\r\n//         type: SET_TOAST_NOTIF,\r\n//         payload: options\r\n//     };\r\n// }\r\n\r\n// export function setModalPopup(options) {\r\n//     return {\r\n//         type: SET_MODAL_POPUP,\r\n//         payload: options\r\n//     };\r\n// }\r\n\r\n// export function saveCurrentState(prevState) {\r\n//     return {\r\n//         type: SAVE_STATE,\r\n//         payload:prevState\r\n//     };\r\n// }\r\n\r\n// export function setHeader(options) {\r\n//     return {\r\n//         type: SET_HEADER,\r\n//         payload: options\r\n//     };\r\n// }\r\n\r\n// export function setBreadCrumb(options) {\r\n//   return {\r\n//       type: SET_BREAD_CRUMB,\r\n//       payload: options\r\n//   };\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
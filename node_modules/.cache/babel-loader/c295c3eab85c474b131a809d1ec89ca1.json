{"ast":null,"code":"import { ajax as NavigateTable } from '../../../../ajax/index';\nimport _ from 'lodash';\nexport default class DataTableUtils {\n  constructor(obj) {\n    this.rowDataArr = [];\n    this.listUrl = obj.listUrl;\n    this.isInfiniteScroll = obj.isInfiniteScroll;\n    this.searchFilters = obj.searchFilters || [];\n    this.setState = obj.setState;\n    this.listName = obj.listName;\n    this.rowIdParam = obj.rowIdParam;\n    this.labelList = obj.labelList;\n    this.apiVersion = obj.apiVersion || 2;\n    this.loadingFunction = obj.loadingFunction;\n    this.makeCallBack = obj.makeCallBack;\n    this.deleteMessage = obj.deleteMessage;\n    this.deleteMessageParam = obj.deleteMessageParam;\n    this.postRequestCallback = obj.postRequestCallback;\n    this.responseList = [];\n    this.API_Options = {\n      isShowSuccess: false,\n      method: 'GET',\n      authKey: obj.authKey,\n      channel: obj.channel,\n      XENTITY: obj.entity\n    };\n    this.showData = this.showData.bind(this);\n    this.changeAttributes = this.changeAttributes.bind(this);\n    this.highlightRow = this.highlightRow.bind(this);\n    this.exportDetails = this.exportDetails.bind(this);\n  }\n\n  componentDidUnMount() {\n    this.rowDataArr = [];\n  }\n\n  load(isReset, data, firstLoad, currentState) {\n    return this.reloadDataTable(isReset, data, firstLoad, currentState);\n  }\n\n  reloadDataTable(isReset, data, firstLoad, currentState) {\n    const dataObj = this.getRequestData(isReset, data, currentState);\n    const urlParams = Object.keys(dataObj).map(function (k) {\n      return encodeURIComponent(k) + '=' + encodeURIComponent(dataObj[k]);\n    }).join('&'); // NavigateTable(this.listUrl+'?'+urlParams, {}, this.makeCallBack, (response) => this.showData(response, data), this.loadingFunction, { ...this.API_Options, firstLoad });\n\n    NavigateTable(this.listUrl, dataObj, this.makeCallBack, response => this.showData(response, data), this.loadingFunction, { ...this.API_Options,\n      firstLoad\n    });\n  }\n\n  getRequestData(isReset, data, currentState = {}) {\n    const filters = data ? this.searchFilters.reduce((acc, k) => {\n      if (data[k]) acc[k] = data[k];\n      return acc;\n    }, {}) : {};\n    let searchParams = {};\n\n    if (this.isInfiniteScroll && data && data.isAdvanceSearch) {\n      this.rowDataArr = [];\n    }\n\n    if (data && data.isDownload) {\n      searchParams = {\n        \"page\": 1,\n        \"size\": currentState.totalRecords ? currentState.totalRecords : \"\",\n        \"sort\": (data && data.orderByCol ? data.orderByCol : currentState.orderByCol) || \"\",\n        \"order\": (data && data.sort ? data.sort : currentState.sort) || \"\",\n        \"keyword\": data && data.keyword ? data.keyword : currentState.keyword,\n        ...filters\n      };\n    } else {\n      searchParams = {\n        \"page\": (isReset === true ? 1 : data && data.pageNumber ? data.pageNumber : currentState.pageNumber) || \"\",\n        \"size\": (data && data.rowCount ? data.rowCount : currentState.rowCount) || \"\",\n        \"sort\": (data && data.orderByCol ? data.orderByCol : currentState.orderByCol) || \"\",\n        \"order\": (data && data.sort ? data.sort : currentState.sort) || \"\",\n        \"keyword\": data && data.keyword ? data.keyword : currentState.keyword,\n        ...filters\n      };\n    }\n\n    return searchParams;\n  }\n\n  changeAttributes(currentState, data, evt) {\n    if (this.isInfiniteScroll && currentState.keyword) {\n      this.rowDataArr = [];\n    }\n\n    var dataSet = null;\n    const {\n      name,\n      isNotUpdateState,\n      isOnlyUpdateState,\n      sort,\n      orderByCol,\n      isResetTable,\n      filterName\n    } = data;\n\n    if (isNotUpdateState) {\n      this.reloadDataTable(isResetTable, {\n        \"isCommonSearch\": true\n      }, false, currentState);\n      return false;\n    }\n\n    if (name === \"pageNumber\") evt.target.value++;\n\n    if (name === \"sortOptions\") {\n      const order = !sort ? 'asc' : sort === 'desc' ? 'asc' : 'desc';\n      dataSet = {\n        \"orderByCol\": orderByCol,\n        \"sort\": order,\n        \"currentRow\": ''\n      };\n    } else if (name === \"rowCount\") {\n      dataSet = {\n        [name]: evt.target.textContent\n      };\n    } else if (name === \"clearFilter\") {\n      dataSet = {\n        [filterName]: ''\n      };\n    } else dataSet = {\n      [name]: evt.target.value\n    };\n\n    const filters = currentState ? this.searchFilters.reduce((acc, k) => {\n      if (currentState[k]) acc[k] = currentState[k];\n      return acc;\n    }, {}) : {};\n    dataSet = { ...dataSet,\n      ...filters\n    };\n\n    if (!isOnlyUpdateState) {\n      this.reloadDataTable(isResetTable, dataSet, false, currentState);\n    } else {\n      this.setState(dataSet);\n    }\n  }\n\n  highlightRow(id) {\n    this.setState({\n      \"currentRow\": id\n    });\n  }\n\n  showData(response, currentState) {\n    console.log('reasd', response);\n    currentState = currentState ? currentState : {};\n\n    if (!response) {\n      this.setState({\n        rowData: \"\",\n        totalRecords: 0\n      });\n      return false;\n    }\n\n    if (this.postRequestCallback && _.isFunction(this.postRequestCallback)) {\n      const tableData = this.postRequestCallback(response);\n      this.setState(tableData);\n    } else {\n      const filters = currentState ? this.searchFilters.reduce((acc, k) => {\n        if (currentState[k]) acc[k] = currentState[k];\n        return acc;\n      }, {}) : {};\n      const filtersData = {\n        'filterParams': { ...filters\n        }\n      };\n\n      if (!response[this.listName] || response[this.listName].length === 0) {\n        this.setState({\n          \"rowData\": '',\n          \"totalRecords\": 0,\n          //  \"keyword\": response.search.keyword,\n          ...filtersData\n        });\n        return false;\n      }\n\n      const rowDataList = this.transformToTableData(response[this.listName]);\n      this.responseList = response[this.listName];\n\n      if (this.isInfiniteScroll) {\n        rowDataList.map(item => {\n          this.rowDataArr.push(item);\n          return;\n        });\n      }\n\n      const responseData = {\n        \"totalRecords\": response.totalElements,\n        \"rowCount\": response.size,\n        // \"keyword\": response.search.keyword,\n        \"orderByCol\": currentState.orderByCol,\n        \"sort\": currentState.sort,\n        \"pageNumber\": response.page + 1,\n        // \"rowData\": rowDataList\n        \"rowData\": this.isInfiniteScroll ? this.rowDataArr : rowDataList\n      };\n      const {\n        totalRecords,\n        rowCount,\n        rowData,\n        pageNumber\n      } = responseData;\n      const startRow = rowCount * (pageNumber - 1) + 1;\n      const endRow = rowData && rowData.length > 0 ? rowData.length < rowCount ? startRow + rowData.length - 1 : startRow + rowCount - 1 : 0;\n      const totalPages = totalRecords && totalRecords !== 0 && rowCount && rowCount !== 0 ? Math.ceil(totalRecords / rowCount) : 0;\n      this.setState({\n        startRow,\n        endRow,\n        totalPages,\n        \"currentRow\": '',\n        ...responseData,\n        ...filtersData.filterParams\n      });\n    }\n  }\n\n  transformToTableData(data) {\n    const rowDataList = [];\n    data.forEach(tableData => {\n      const deleteParam = [];\n\n      if (this.deleteMessageParam) {\n        this.deleteMessageParam.forEach(delParam => {\n          deleteParam.push(tableData[delParam]);\n        });\n      } else {\n        deleteParam.push(this.rowIdParam);\n      }\n\n      const result = {};\n      result.rowId = tableData[this.rowIdParam];\n      result.confirmationMessage = `${this.deleteMessage} ${deleteParam && deleteParam.length > 1 ? deleteParam.join(' ') : deleteParam && deleteParam.length === 1 ? deleteParam[0] : ''}?`;\n      result.columnValues = [];\n      this.labelList.forEach(row => {\n        const className = [];\n        const fieldName = [];\n\n        if (row.condition && _.isFunction(row.condition)) {\n          fieldName.push(row.condition(tableData));\n        } else if (row.condition && row.condition.length > 0) {\n          row.condition.forEach(condition => {\n            switch (condition.condition) {\n              case \"=\":\n                if (tableData[condition.paramId] === condition.value) className.push(condition.className);\n                break;\n\n              case \"combine\":\n                condition.paramIds.forEach(paramId => {\n                  fieldName.push(tableData[paramId]);\n                });\n                break;\n\n              default:\n                break;\n            }\n          });\n        }\n\n        result.columnValues.push({\n          value: fieldName && fieldName.length > 0 ? fieldName.join(' ') : row.paramId ? tableData[row.paramId] : tableData[row.id],\n          className: className.toString()\n        });\n      });\n      rowDataList.push(result);\n    });\n    return rowDataList;\n  }\n\n  transformFilterData(filters) {\n    const filterDetails = {};\n    filters.forEach(filterData => {\n      filterDetails[filterData.name] = filterData.value;\n    });\n    return filterDetails;\n  }\n\n  getResponseList() {\n    return this.responseList;\n  }\n\n  exportDetails(currentState, item, fileName, setNotification, callBack, exportLimit, totalRecords, data = {}) {\n    console.log(data);\n\n    if (exportLimit != null && totalRecords > exportLimit) {\n      setNotification && setNotification({\n        hasError: true,\n        message: `You cannot Download more than ${exportLimit} records`\n      });\n    } else {\n      setNotification && setNotification({\n        hasError: false,\n        message: 'We will notify you when the file is ready for download. Please wait for some time.'\n      });\n      const request = this.getRequestData(true, {\n        isDownload: true,\n        ...currentState\n      }, currentState);\n      NavigateTable(item.url, request, null, response => callBack(response, item, fileName), null, { ...this.API_Options,\n        firstLoad: true,\n        responseType: 'blob'\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/data-table/elements/dataTable/util/DataTableUtilsV3.js"],"names":["ajax","NavigateTable","_","DataTableUtils","constructor","obj","rowDataArr","listUrl","isInfiniteScroll","searchFilters","setState","listName","rowIdParam","labelList","apiVersion","loadingFunction","makeCallBack","deleteMessage","deleteMessageParam","postRequestCallback","responseList","API_Options","isShowSuccess","method","authKey","channel","XENTITY","entity","showData","bind","changeAttributes","highlightRow","exportDetails","componentDidUnMount","load","isReset","data","firstLoad","currentState","reloadDataTable","dataObj","getRequestData","urlParams","Object","keys","map","k","encodeURIComponent","join","response","filters","reduce","acc","searchParams","isAdvanceSearch","isDownload","totalRecords","orderByCol","sort","keyword","pageNumber","rowCount","evt","dataSet","name","isNotUpdateState","isOnlyUpdateState","isResetTable","filterName","target","value","order","textContent","id","console","log","rowData","isFunction","tableData","filtersData","length","rowDataList","transformToTableData","item","push","responseData","totalElements","size","page","startRow","endRow","totalPages","Math","ceil","filterParams","forEach","deleteParam","delParam","result","rowId","confirmationMessage","columnValues","row","className","fieldName","condition","paramId","paramIds","toString","transformFilterData","filterDetails","filterData","getResponseList","fileName","setNotification","callBack","exportLimit","hasError","message","request","url","responseType"],"mappings":"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","sourcesContent":["import { ajax as NavigateTable } from '../../../../ajax/index';\r\nimport _ from 'lodash';\r\n\r\nexport default class DataTableUtils {\r\n  constructor(obj) {\r\n    this.rowDataArr=[];  \r\n    this.listUrl = obj.listUrl;\r\n    this.isInfiniteScroll = obj.isInfiniteScroll;\r\n    this.searchFilters = obj.searchFilters || [];\r\n    this.setState = obj.setState;\r\n    this.listName = obj.listName;\r\n    this.rowIdParam = obj.rowIdParam;\r\n    this.labelList = obj.labelList;\r\n    this.apiVersion = obj.apiVersion || 2;\r\n    this.loadingFunction = obj.loadingFunction;\r\n    this.makeCallBack = obj.makeCallBack;\r\n    this.deleteMessage = obj.deleteMessage;\r\n    this.deleteMessageParam = obj.deleteMessageParam;\r\n    this.postRequestCallback = obj.postRequestCallback;\r\n    this.responseList = [];\r\n\r\n\r\n\r\n    this.API_Options = {\r\n      isShowSuccess: false,\r\n      method: 'GET',\r\n      authKey: obj.authKey,\r\n      channel: obj.channel,\r\n      XENTITY:obj.entity\r\n    }\r\n\r\n    this.showData = this.showData.bind(this);\r\n    this.changeAttributes = this.changeAttributes.bind(this);\r\n    this.highlightRow = this.highlightRow.bind(this);\r\n    this.exportDetails = this.exportDetails.bind(this);\r\n  }\r\n  componentDidUnMount(){\r\n    this.rowDataArr=[];  \r\n  }\r\n  \r\n  load(isReset, data, firstLoad, currentState) {\r\n    return this.reloadDataTable(isReset, data, firstLoad, currentState);\r\n  }\r\n  reloadDataTable(isReset, data, firstLoad, currentState) {\r\n    const dataObj = this.getRequestData(isReset, data, currentState);\r\n    const urlParams = Object.keys(dataObj).map(function (k) {\r\n      return encodeURIComponent(k) + '=' + encodeURIComponent(dataObj[k])\r\n    }).join('&')\r\n    // NavigateTable(this.listUrl+'?'+urlParams, {}, this.makeCallBack, (response) => this.showData(response, data), this.loadingFunction, { ...this.API_Options, firstLoad });\r\n    NavigateTable(this.listUrl, dataObj, this.makeCallBack, (response) =>  this.showData(response, data), this.loadingFunction, { ...this.API_Options, firstLoad });\r\n  }\r\n  getRequestData(isReset, data, currentState = {}) {\r\n    const filters = data ? this.searchFilters.reduce((acc, k) => {\r\n      if (data[k]) acc[k] = data[k];\r\n      return acc;\r\n    }, {}) : {};\r\n    let searchParams = {};\r\n    if(this.isInfiniteScroll&&data&&data.isAdvanceSearch){\r\n      this.rowDataArr=[];\r\n    }\r\n\r\n    if (data && data.isDownload) {\r\n      searchParams = {\r\n        \"page\": 1,\r\n        \"size\": (currentState.totalRecords ? currentState.totalRecords : \"\"),\r\n        \"sort\": (data && data.orderByCol ? data.orderByCol : currentState.orderByCol) || \"\",\r\n        \"order\": (data && data.sort ? data.sort : currentState.sort) || \"\",\r\n        \"keyword\": (data && data.keyword ? data.keyword : currentState.keyword),\r\n        ...filters\r\n      }\r\n    } else {\r\n      searchParams = {\r\n        \"page\": (isReset === true ? 1 : ((data && data.pageNumber) ? data.pageNumber : currentState.pageNumber)) || \"\",\r\n        \"size\": (data && data.rowCount ? data.rowCount : currentState.rowCount) || \"\",\r\n        \"sort\": (data && data.orderByCol ? data.orderByCol : currentState.orderByCol) || \"\",\r\n        \"order\": (data && data.sort ? data.sort : currentState.sort) || \"\",\r\n        \"keyword\": (data && data.keyword ? data.keyword : currentState.keyword),\r\n        ...filters\r\n      }\r\n    }\r\n\r\n    return searchParams;\r\n\r\n  }\r\n  changeAttributes(currentState, data, evt) {\r\n    if(this.isInfiniteScroll&&currentState.keyword){\r\n      this.rowDataArr=[];\r\n    }\r\n    var dataSet = null;\r\n    const { name, isNotUpdateState, isOnlyUpdateState, sort,\r\n      orderByCol, isResetTable, filterName } = data;\r\n\r\n    if (isNotUpdateState) {\r\n      this.reloadDataTable(isResetTable, { \"isCommonSearch\": true }, false, currentState);\r\n      return false;\r\n    }\r\n\r\n   \r\n    \r\n    if (name === \"pageNumber\")\r\n      evt.target.value++;\r\n\r\n    if (name === \"sortOptions\") {\r\n      const order = (!sort ? 'asc' : (sort === 'desc' ? 'asc' : 'desc'));\r\n      dataSet = { \"orderByCol\": orderByCol, \"sort\": order, \"currentRow\": '' };\r\n    } else if (name === \"rowCount\") {\r\n      dataSet = { [name]: evt.target.textContent };\r\n    } else if (name === \"clearFilter\") {\r\n      dataSet = { [filterName]: '' };\r\n    } else\r\n      dataSet = { [name]: evt.target.value };\r\n\r\n    const filters = currentState ? this.searchFilters.reduce((acc, k) => {\r\n      if (currentState[k]) acc[k] = currentState[k];\r\n      return acc;\r\n    }, {}) : {};\r\n\r\n    dataSet = { ...dataSet, ...filters }\r\n    if (!isOnlyUpdateState) {\r\n      this.reloadDataTable(isResetTable, dataSet, false, currentState);\r\n    } else {\r\n      this.setState(dataSet);\r\n    }\r\n  }\r\n  highlightRow(id) {\r\n    this.setState({ \"currentRow\": id });\r\n  }\r\n  showData(response, currentState) {\r\n    console.log('reasd', response)\r\n    currentState = currentState ? currentState : {};\r\n    if (!response) {\r\n      this.setState({ rowData: \"\", totalRecords: 0 });\r\n      return false;\r\n    }\r\n    if (this.postRequestCallback && _.isFunction(this.postRequestCallback)) {\r\n      const tableData = this.postRequestCallback(response);\r\n      this.setState(tableData);\r\n    } else {\r\n      const filters = currentState ? this.searchFilters.reduce((acc, k) => {\r\n        if (currentState[k]) acc[k] = currentState[k];\r\n        return acc;\r\n      }, {}) : {};\r\n\r\n      const filtersData = { 'filterParams': { ...filters } };\r\n\r\n      if (!response[this.listName]\r\n        || response[this.listName].length === 0) {\r\n        this.setState({\r\n          \"rowData\": '', \"totalRecords\": 0,\r\n          //  \"keyword\": response.search.keyword,\r\n          ...filtersData\r\n        });\r\n        return false;\r\n      }\r\n      const rowDataList = this.transformToTableData(response[this.listName]);\r\n      this.responseList = response[this.listName];\r\n      if(this.isInfiniteScroll){\r\n        rowDataList.map((item)=>{\r\n          this.rowDataArr.push(item);\r\n          return; \r\n        })\r\n      }\r\n      \r\n      \r\n      const responseData = {\r\n        \"totalRecords\": response.totalElements,\r\n        \"rowCount\": response.size,\r\n        // \"keyword\": response.search.keyword,\r\n        \"orderByCol\": currentState.orderByCol,\r\n        \"sort\": currentState.sort,\r\n        \"pageNumber\": response.page + 1,\r\n        // \"rowData\": rowDataList\r\n        \"rowData\":this.isInfiniteScroll? this.rowDataArr:rowDataList\r\n      }\r\n      const { totalRecords, rowCount, rowData, pageNumber } = responseData;\r\n      const startRow = (rowCount * (pageNumber - 1)) + 1;\r\n      const endRow = (rowData && rowData.length > 0 ? (rowData.length < rowCount ? (startRow + rowData.length) - 1 : (startRow + rowCount) - 1) : 0);\r\n      const totalPages = ((totalRecords && totalRecords !== 0 && rowCount && rowCount !== 0) ? Math.ceil(totalRecords / rowCount) : 0);\r\n      this.setState({ startRow, \r\n                      endRow, \r\n                      totalPages, \r\n                      \"currentRow\": '', \r\n                      ...responseData, \r\n                      ...filtersData.filterParams\r\n                    });\r\n    }\r\n\r\n  }\r\n  transformToTableData(data) {\r\n    const rowDataList = [];\r\n    data.forEach((tableData) => {\r\n      const deleteParam = [];\r\n      if (this.deleteMessageParam) {\r\n        this.deleteMessageParam.forEach((delParam) => {\r\n          deleteParam.push(tableData[delParam]);\r\n        });\r\n      } else {\r\n        deleteParam.push(this.rowIdParam)\r\n      }\r\n      const result = {};\r\n      result.rowId = tableData[this.rowIdParam];\r\n      result.confirmationMessage = `${this.deleteMessage} ${deleteParam && deleteParam.length > 1 ? deleteParam.join(' ') : (deleteParam && deleteParam.length === 1 ? deleteParam[0] : '')}?`;\r\n      result.columnValues = [];\r\n      this.labelList.forEach((row) => {\r\n        const className = [];\r\n        const fieldName = [];\r\n\r\n        if (row.condition && _.isFunction(row.condition)) {\r\n          fieldName.push(row.condition(tableData));\r\n        } else if (row.condition && row.condition.length > 0) {\r\n          row.condition.forEach((condition) => {\r\n            switch (condition.condition) {\r\n              case \"=\":\r\n                if (tableData[condition.paramId] === condition.value)\r\n                  className.push(condition.className);\r\n                break;\r\n              case \"combine\":\r\n                condition.paramIds.forEach((paramId) => {\r\n                  fieldName.push(tableData[paramId]);\r\n                });\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          });\r\n        }\r\n\r\n        result.columnValues.push({\r\n          value: (fieldName && fieldName.length > 0 ? fieldName.join(' ') :\r\n            (row.paramId ? tableData[row.paramId] : tableData[row.id])), className: className.toString()\r\n        });\r\n      });\r\n      rowDataList.push(result);\r\n    });\r\n    return rowDataList;\r\n  }\r\n  transformFilterData(filters) {\r\n    const filterDetails = {};\r\n    filters.forEach((filterData) => {\r\n      filterDetails[filterData.name] = filterData.value;\r\n    });\r\n    return filterDetails;\r\n  }\r\n  getResponseList() {\r\n    return this.responseList;\r\n  }\r\n  exportDetails(currentState, item, fileName, setNotification, callBack,exportLimit,totalRecords,data={}) {\r\n    console.log(data);\r\n    \r\n    if(exportLimit!=null&&totalRecords>exportLimit)\r\n    {\r\n      \r\n      setNotification && setNotification({\r\n        hasError: true,\r\n        message: `You cannot Download more than ${exportLimit} records`\r\n      });\r\n      \r\n    }else {\r\n      setNotification && setNotification({\r\n        hasError: false,\r\n        message: 'We will notify you when the file is ready for download. Please wait for some time.'\r\n      });\r\n      const request = this.getRequestData(true, { isDownload: true,...currentState}, currentState);\r\n      NavigateTable(item.url, request, null,\r\n        (response) => callBack(response, item, fileName), null, { ...this.API_Options, firstLoad: true, responseType: 'blob' });\r\n    }\r\n    \r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
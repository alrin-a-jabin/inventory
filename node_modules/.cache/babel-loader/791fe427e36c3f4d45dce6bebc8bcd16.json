{"ast":null,"code":"var _jsxFileName = \"/home/alrin/reactproject/kms-ui/src/components/module/ListModule.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Switch, Redirect } from \"react-router-dom\";\nimport { Container, Row, Col, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\nimport _ from \"lodash\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { get, post } from 'axios';\nimport { connect } from \"react-redux\";\nimport { storeModules } from '../../actions/Modules';\nimport { toast } from 'react-toastify';\nimport ModuleAdd from \"./Modal/ModuleAdd\";\nimport MaterialAdd from \"./Modal/MaterialAdd\";\nimport { CONSTANTS } from '../../util/Constants';\nimport DataGrid from '../../components/data-grid';\nimport { LABEL_LIST as DataTableHeader } from './util/DataTableHeader';\nconst url_modules = CONSTANTS.MODULES;\nconst url_materials = CONSTANTS.MATERIALS;\n\nclass ModuleTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getModuleEdit = id => {\n      this.setState({\n        subject_id: id,\n        showModuleModal: true\n      });\n    };\n\n    this.deleteModule = id => {\n      post(url_modules.DELETE_MODULEURL, {\n        subject_id: id\n      }).then(response => {\n        const res = response.data;\n\n        if (res.statusCode == 200) {\n          this.getModuleList();\n          toast.success('Success: ' + res.message);\n        } else {\n          toast.error('Error: ' + res.message);\n        }\n      }).catch(error => {\n        toast.error('Error: Bad request.');\n      });\n    };\n\n    this.changeStatus = (id, subjectStatus) => {\n      const request = {\n        subject_id: id,\n        status: subjectStatus ? 1 : 0\n      };\n      post(url_modules.UPDATE_STATUS_MODULEURL, request).then(response => {\n        if (response.status == 200) {\n          const {\n            modules\n          } = this.state;\n          const updateStatus = modules.findIndex(mod => mod.subject_id === id);\n\n          if (updateStatus !== -1) {\n            modules[updateStatus].dataStatus = subjectStatus ? 1 : 0;\n          }\n\n          this.setState({\n            modules\n          });\n          toast.success(\"Status Changed Successfully \");\n        }\n      }, error => {\n        console.log('error ', error);\n      });\n    };\n\n    this.dismissModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.removeFile = index => {\n      let {\n        selectedFiles\n      } = this.state;\n      selectedFiles.splice(index, 1);\n      this.setState({\n        selectedFiles\n      });\n    };\n\n    this.getMaterials = module_id => {\n      this.props.showMaterialList(module_id);\n    };\n\n    this.onOpenModal = id => {\n      this.props.onOpenMaterialModal(id);\n    };\n\n    this.onOpenModuleModal = () => {\n      this.setState({\n        showModuleModal: true\n      });\n    };\n\n    this.closeModuleModal = isListReload => {\n      this.setState({\n        showModuleModal: false,\n        subject_id: ''\n      });\n\n      if (isListReload) {\n        this.getModuleList();\n      }\n    };\n\n    this.state = {\n      modules: [],\n      subject_id: '',\n      parent_subject: this.props.parentSubject.subject_id,\n      module_parent: this.props.parentSubject.subject_id,\n      selectedFiles: [],\n      showAddMaterialModal: false,\n      showModuleModal: false,\n      material_id: '',\n      materialFiles: {\n        name: [],\n        topic: [],\n        description: [],\n        type: [],\n        file_name: []\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      parentSubject,\n      isModuleListUpdated\n    } = this.props;\n\n    if (parentSubject.subject_id !== prevProps.parentSubject.subject_id || prevProps.isModuleListUpdated !== isModuleListUpdated && isModuleListUpdated) {\n      this.setState({\n        module_parent: parentSubject.subject_id\n      }, () => this.getModuleList());\n    }\n  }\n\n  getModuleList() {\n    const {\n      module_parent,\n      parent_subject\n    } = this.state;\n    get(url_modules.LIST_MODULEURL + `modulelistbysyllabus?page=1&size=20&sort=subject_id&order=desc&type=Module&material_type=promotion&keyword=&syllabus_id=${module_parent}`).then(res => {\n      if (res.status) {\n        const modules = [];\n        const {\n          data\n        } = res.data;\n\n        if (data) {\n          data.forEach(element => {\n            let dd = {};\n            dd = element;\n            dd.id = element.subject_id;\n            dd.dataStatus = element.status;\n            dd.subRowsCount = element.material_count ? element.material_count : 0;\n            modules.push(element);\n          });\n          this.props.storeModules(modules);\n        }\n\n        this.setState({\n          modules,\n          parent_subject\n        });\n      }\n    }).catch(error => {\n      toast.error('Error: Bad request.');\n    });\n  }\n\n  deleteModuleConfirm(id) {\n    this.props.setModalPopup({\n      'rowId': id,\n      'isOpen': true,\n      'onConfirmCallBack': () => this.deleteModule(id),\n      'title': \"Confirm Delete\",\n      'content': \"Are you sure to Delete ?\",\n      'CancelBtnLabel': \"Cancel\",\n      'confirmBtnLabel': \"Delete\"\n    });\n  }\n\n  render() {\n    const {\n      subject_id,\n      parent_subject,\n      selectedFiles,\n      modules,\n      showAddMaterialModal,\n      module_parent,\n      showModuleModal\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-pane fade\",\n      id: \"Modules\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Modules-txt h-100 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex col-md-12 align-items-center mb-10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, \"All Entities | \", modules && modules.length > 0 ? modules.length < 10 ? `0${modules.length}` : modules.length : '', \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn add\",\n      onClick: this.onOpenModuleModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, \"Add Module\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-responsive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      columns: DataTableHeader.MODULE,\n      data: modules,\n      onChangeStatus: (subject_id, status) => this.changeStatus(subject_id, status),\n      onOpenModal: id => this.onOpenModal(id),\n      onEdit: subject_id => this.getModuleEdit(subject_id),\n      onDelete: subject_id => this.deleteModuleConfirm(subject_id),\n      onGetList: id => this.getMaterials(id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(ModuleAdd, {\n      showModuleModal: showModuleModal,\n      subject_id: subject_id,\n      parent_subject: module_parent,\n      closeModuleModal: isListReload => this.closeModuleModal(isListReload),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default connect(null, {\n  storeModules\n})(ModuleTab);","map":{"version":3,"sources":["/home/alrin/reactproject/kms-ui/src/components/module/ListModule.js"],"names":["React","Component","Fragment","Switch","Redirect","Container","Row","Col","Nav","NavItem","NavLink","TabContent","TabPane","_","confirmAlert","get","post","connect","storeModules","toast","ModuleAdd","MaterialAdd","CONSTANTS","DataGrid","LABEL_LIST","DataTableHeader","url_modules","MODULES","url_materials","MATERIALS","ModuleTab","constructor","props","getModuleEdit","id","setState","subject_id","showModuleModal","deleteModule","DELETE_MODULEURL","then","response","res","data","statusCode","getModuleList","success","message","error","catch","changeStatus","subjectStatus","request","status","UPDATE_STATUS_MODULEURL","modules","state","updateStatus","findIndex","mod","dataStatus","console","log","dismissModal","showModal","removeFile","index","selectedFiles","splice","getMaterials","module_id","showMaterialList","onOpenModal","onOpenMaterialModal","onOpenModuleModal","closeModuleModal","isListReload","parent_subject","parentSubject","module_parent","showAddMaterialModal","material_id","materialFiles","name","topic","description","type","file_name","componentDidUpdate","prevProps","isModuleListUpdated","LIST_MODULEURL","forEach","element","dd","subRowsCount","material_count","push","deleteModuleConfirm","setModalPopup","render","length","MODULE"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { Switch, Redirect } from \"react-router-dom\";\nimport { Container, Row, Col, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\nimport _ from \"lodash\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { get, post } from 'axios'\nimport { connect } from \"react-redux\";\nimport { storeModules } from '../../actions/Modules'\nimport { toast } from 'react-toastify';\nimport ModuleAdd from \"./Modal/ModuleAdd\";\nimport MaterialAdd from \"./Modal/MaterialAdd\";\nimport { CONSTANTS } from '../../util/Constants'\nimport DataGrid from '../../components/data-grid';\nimport { LABEL_LIST as DataTableHeader } from './util/DataTableHeader';\n\nconst url_modules = CONSTANTS.MODULES;\nconst url_materials = CONSTANTS.MATERIALS;\n\nclass ModuleTab extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modules: [],\n      subject_id: '',\n      parent_subject: this.props.parentSubject.subject_id,\n      module_parent: this.props.parentSubject.subject_id,\n      selectedFiles: [],\n      showAddMaterialModal: false,\n      showModuleModal: false,\n      material_id: '',\n      materialFiles: {\n        name: [],\n        topic: [],\n        description: [],\n        type: [],\n        file_name: []\n      },\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { parentSubject, isModuleListUpdated } = this.props;\n    if ((parentSubject.subject_id !== prevProps.parentSubject.subject_id) || (prevProps.isModuleListUpdated !== isModuleListUpdated && isModuleListUpdated)) {\n        this.setState({ module_parent: parentSubject.subject_id }, () => this.getModuleList())\n    }\n  }\n\n  getModuleList() {\n    const { module_parent, parent_subject } = this.state;\n    \n    get(url_modules.LIST_MODULEURL + `modulelistbysyllabus?page=1&size=20&sort=subject_id&order=desc&type=Module&material_type=promotion&keyword=&syllabus_id=${module_parent}`)\n      .then(res => {\n        if (res.status) {\n          const modules = []\n          const { data } = res.data;\n          if (data) {\n            data.forEach(element => {\n              let dd = {};\n              dd = element;\n              dd.id = element.subject_id;\n              dd.dataStatus = element.status;\n              dd.subRowsCount = element.material_count ? element.material_count : 0;\n              modules.push(element);\n            });\n            this.props.storeModules(modules);\n          }\n          this.setState({ modules, parent_subject });\n\n        }\n      }).catch(error => {\n        toast.error('Error: Bad request.');\n      })\n  }\n  \n  getModuleEdit = (id) => {\n    this.setState({ subject_id: id, showModuleModal: true });\n  }\n\n  deleteModule = (id) => {\n    post(url_modules.DELETE_MODULEURL,\n      { subject_id: id }).then(response => {\n        const res = response.data;\n        if (res.statusCode == 200) {\n          this.getModuleList();\n          toast.success('Success: ' + res.message);\n        } else {\n          toast.error('Error: ' + res.message);\n        }\n      }).catch(error => {\n        toast.error('Error: Bad request.');\n      })\n  }\n\n  deleteModuleConfirm(id) {\n    this.props.setModalPopup({\n      'rowId': id,\n      'isOpen': true,\n      'onConfirmCallBack': () => this.deleteModule(id),\n      'title': \"Confirm Delete\",\n      'content': \"Are you sure to Delete ?\",\n      'CancelBtnLabel': \"Cancel\",\n      'confirmBtnLabel': \"Delete\"\n    });\n\n  }\n\n  changeStatus = (id, subjectStatus) => {\n    const request = { subject_id: id, status: subjectStatus ? 1 : 0 }\n    post(url_modules.UPDATE_STATUS_MODULEURL, request).then((response) => {\n      if (response.status == 200) {\n        const { modules } = this.state;\n        const updateStatus = modules.findIndex((mod) => mod.subject_id === id);\n        if (updateStatus !== -1) {\n          modules[updateStatus].dataStatus = subjectStatus ? 1 : 0;\n        }\n        this.setState({ modules });\n        toast.success(\"Status Changed Successfully \");\n      }\n    },\n      (error) => {\n        console.log('error ', error);\n      })\n  }\n  dismissModal = () => {\n    this.setState({ showModal: false })\n  }\n  removeFile = (index) => {\n    let { selectedFiles } = this.state;\n    selectedFiles.splice(index, 1);\n    this.setState({ selectedFiles });\n  }\n\n  getMaterials = (module_id) => {\n    this.props.showMaterialList(module_id);\n  }\n\n  onOpenModal = (id) => {\n    this.props.onOpenMaterialModal(id);\n  }\n\n  onOpenModuleModal = () => {\n    this.setState({ showModuleModal: true });\n  }\n\n  closeModuleModal = (isListReload) => {\n    this.setState({ showModuleModal: false, subject_id: '' });\n    if (isListReload) {\n      this.getModuleList();\n    }\n  }\n\n  render() {\n    const {\n      subject_id,\n      parent_subject,\n      selectedFiles, modules,\n      showAddMaterialModal,\n      module_parent,\n      showModuleModal\n    } = this.state;\n    return (\n      <div className=\"tab-pane fade\" id=\"Modules\">\n        <div className=\"Modules-txt h-100 \">\n          <div>\n            <div className=\"d-flex col-md-12 align-items-center mb-10\">\n              <h4>All Entities | {modules && modules.length > 0 ? (modules.length < 10 ? `0${modules.length}` : modules.length) : ''} </h4>\n              <button className=\"btn add\" onClick={this.onOpenModuleModal}>Add Module</button>\n            </div>\n            <div className=\"table-responsive\">\n              <DataGrid\n                columns={DataTableHeader.MODULE}\n                data={modules}\n                onChangeStatus={(subject_id, status) => this.changeStatus(subject_id, status)}\n                onOpenModal={(id) => this.onOpenModal(id)}\n                onEdit={(subject_id) => this.getModuleEdit(subject_id)}\n                onDelete={(subject_id) => this.deleteModuleConfirm(subject_id)}\n                onGetList={(id) => this.getMaterials(id)}\n              />\n              <ModuleAdd\n                showModuleModal={showModuleModal}\n                subject_id={subject_id}\n                parent_subject={module_parent}\n                closeModuleModal={(isListReload) => this.closeModuleModal(isListReload)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default connect(null, { storeModules })(ModuleTab);\n\n"]},"metadata":{},"sourceType":"module"}
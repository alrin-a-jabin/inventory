{"ast":null,"code":"import { validateForm } from '@6d-ui/fields';\nimport { useState, useEffect } from \"react\";\nexport default function useFieldItem(FIELDS, initialValues = {}, preValidation, postValidation) {\n  // const initialValues = defaultValues == null ? {} : defaultValues;\n  const [values, setValues] = useState(initialValues);\n  const [fields, setFields] = useState({});\n  useEffect(() => {}, [values]);\n\n  const handleChange = (name, value, obj) => {\n    const {\n      isTouched\n    } = obj || {\n      isTouched: false\n    };\n\n    if (isTouched) {\n      value = values[name];\n    }\n\n    const fieldValues = fields;\n\n    if (FIELDS[name]) {\n      const validate = validateForm(name, value, FIELDS[name], preValidation, postValidation);\n\n      if (validate) {\n        fieldValues[name] = validate;\n      } else {\n        fieldValues[name] = {\n          hasError: false,\n          errorMsg: ''\n        };\n      }\n    }\n\n    setValues(values => ({ ...values,\n      [name]: value\n    }));\n    setFields(fieldValues);\n\n    if (isTouched && fields[name] && fields[name].hasError) {\n      setFields(fields);\n      return false;\n    }\n  };\n\n  const validateValues = keys => {\n    const fieldValues = fields;\n    keys.map(key => {\n      const validate = validateForm(key, values[key], FIELDS[key], preValidation, postValidation);\n\n      if (validate) {\n        fieldValues[key] = validate;\n      } else {\n        fieldValues[key] = {\n          hasError: false,\n          errorMsg: ''\n        };\n      }\n    });\n    setFields(fieldValues);\n  };\n\n  const reset = () => {\n    setValues(values => {\n      const newValues = {};\n      Object.keys(values).forEach(function (key) {\n        newValues[key] = '';\n      });\n      return newValues;\n    });\n    setFields({});\n  };\n\n  return [values, fields, handleChange, validateValues, reset];\n}","map":{"version":3,"sources":["/home/alrin/reactproject/kms-ui/src/util/fieldItem.js"],"names":["validateForm","useState","useEffect","useFieldItem","FIELDS","initialValues","preValidation","postValidation","values","setValues","fields","setFields","handleChange","name","value","obj","isTouched","fieldValues","validate","hasError","errorMsg","validateValues","keys","map","key","reset","newValues","Object","forEach"],"mappings":"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","sourcesContent":["import { validateForm } from '@6d-ui/fields';\nimport { useState, useEffect } from \"react\";\n\nexport default function useFieldItem(FIELDS, initialValues = {}, preValidation, postValidation) {\n    // const initialValues = defaultValues == null ? {} : defaultValues;\n    const [values, setValues] = useState(initialValues);\n    const [fields, setFields] = useState({});\n\n    useEffect(() => {\n    }, [values])\n\n    const handleChange = (name, value, obj) => {\n\n        const { isTouched } = obj || {\n            isTouched: false\n        };\n\n        if (isTouched) {\n            value = values[name];\n        }\n\n        const fieldValues = fields;\n        if (FIELDS[name]) {\n            const validate = validateForm(name, value, FIELDS[name], preValidation, postValidation);\n            if (validate) {\n                fieldValues[name] = validate;\n            } else {\n                fieldValues[name] = {\n                    hasError: false,\n                    errorMsg: ''\n                };\n            }\n        }\n\n        setValues(values => ({\n            ...values,\n            [name]: value\n        }))\n\n        setFields(fieldValues)\n\n        if (isTouched && fields[name] && fields[name].hasError) {\n            setFields(fields);\n            return false;\n        }\n    }\n\n    const validateValues = (keys) => {\n        const fieldValues = fields;\n        keys.map((key) => {\n            const validate = validateForm(key, values[key], FIELDS[key], preValidation, postValidation);\n            if (validate) {\n                fieldValues[key] = validate;\n            } else {\n                fieldValues[key] = {\n                    hasError: false,\n                    errorMsg: ''\n                };\n            }\n        }\n        );\n        setFields(fieldValues)\n    }\n\n    const reset = () => {\n        setValues(values => {\n            const newValues = {};\n            Object.keys(values).forEach(function (key) {\n                newValues[key] = ''\n            });\n            return newValues;\n        })\n        setFields({});\n    };\n\n\n\n    return [values, fields, handleChange, validateValues, reset]\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/alrin/Downloads/INVENTORY22/src/components/inventory/returntest/Datagrid.js\";\nimport React, { useState } from 'react';\nimport { useTable, useSortBy, useExpanded, usePagination } from 'react-table';\nimport { Link } from 'react-router-dom';\n\nfunction Table({\n  columns: userColumns,\n  data\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns: userColumns,\n    data,\n    initialState: {\n      pageIndex: 0\n    }\n  }, useSortBy, usePagination // We can useExpanded to track the expanded state\n  // for sub components too!\n  );\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"table-responsive\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    className: \"data-table dataTable-mainTable table table-hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(column.getSortByToggleProps()), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 33\n    }\n  }), column.render('Header'), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 37\n    }\n  }, column.isSorted ? !column.isSortedDesc ? ' ðŸ”¼' : ' ðŸ”½' : '')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }), page.map((row, i) => {\n    prepareRow(row);\n    return (\n      /*#__PURE__*/\n      // Use a React.Fragment here so the table markup is still valid\n      React.createElement(React.Fragment, Object.assign({}, row.getRowProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 33\n        }\n      }, row.cells.map(cell => {\n        return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 45\n          }\n        }), cell.render('Cell'));\n      })))\n    );\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table__fixed__footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer__left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    className: \"custom-select\",\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, [3, 5, 10].map(pageSize => /*#__PURE__*/React.createElement(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, pageSize))), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, \"Records Per Page\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer__right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page__enter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, \"Page\", ' '), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }, \"of \", pageOptions.length))), /*#__PURE__*/React.createElement(\"nav\", {\n    \"aria-label\": \"Page navigation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    class: \"page-item\",\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"page-link\",\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 107\n    }\n  }, \"First\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"page-item\",\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"page-link\",\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 114\n    }\n  }, \"Prev\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"page-item\",\n    onClick: () => gotoPage(pageIndex + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"page-link\",\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 95\n    }\n  }, pageIndex + 1)), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"page-item\",\n    onClick: () => gotoPage(pageIndex + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"page-link\",\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 95\n    }\n  }, pageIndex + 2)), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"page-item\",\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"page-link\",\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 106\n    }\n  }, \"Next\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"page-item\",\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"page-link\",\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 119\n    }\n  }, \"Last\")))), \" \")));\n}\n\nfunction DataGrid(props) {\n  const columnList = props.columns;\n  let columns = [];\n  columnList.forEach(element => {\n    const obj = {};\n    obj.Header = element.Header;\n    obj.accessor = element.accessor;\n\n    if (element.filterable) {\n      obj.filterable = true;\n    }\n\n    if (element.width) {\n      obj.width = element.width;\n    }\n\n    if (element.disableSortBy) {\n      obj.disableSortBy = true;\n    }\n\n    if (element.accessor === 'index') {\n      obj.Cell = row => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 24\n          }\n        }, row.row.index + 1);\n      };\n    } // if (element.accessor === 'count') {\n    //     obj.Cell = param => {\n    //         const rowData = param.row.original;\n    //         return <div className=\"add-material\"><a href=\"#\" onClick={() => props.onGetList(rowData.id)}>{rowData.subRowsCount}</a>\n    //             <a\n    //                 href=\"#\"\n    //                 onClick={() => props.onOpenModal(rowData.id)}\n    //             >\n    //                 <img src={process.env.PUBLIC_URL + \"/images/plus.svg\"} alt />\n    //                 <span>Add More</span>\n    //             </a>\n    //         </div>\n    //     }\n    // }\n    // if (element.accessor === 'dataStatus') {\n    //     obj.Cell = param => {\n    //         const rowData = param.row.original;\n    //         const status = rowData.dataStatus ? parseInt(rowData.dataStatus) : 0;\n    //         return (<div className=\"cell-components\">\n    //             <div className=\"custom-control custom-switch\">\n    //                 <input\n    //                     type=\"checkbox\"\n    //                     className=\"custom-control-input\"\n    //                     id={`changeStatus-${rowData.id}`}\n    //                     onChange={() => props.onChangeStatus(rowData.id, !status)}\n    //                     checked={status}\n    //                 />\n    //                 <label\n    //                     className=\"custom-control-label\"\n    //                     htmlFor={`changeStatus-${rowData.id}`}\n    //                 />\n    //             </div>\n    //         </div>\n    //         )\n    //     }\n    // }\n    // if (element.accessor === 'dataSelect') {\n    //     obj.Cell = param => {\n    //         const rowData = param.row.original;\n    //         return (<div className=\"cell-components\">\n    //             <div className=\"custom-control custom-switch\">\n    //                 <button className=\"btn accept-btn\" onClick={() => props.onChangeSelect(rowData.id, 1)}>Accept</button>\n    //                 <button className=\"btn reject-btn\" onClick={() => props.setRejectionId(rowData.id)}>Reject</button>\n    //             </div>\n    //         </div>\n    //         )\n    //     }\n    // }\n    // if (element.accessor === 'view') {\n    //     obj.Cell = param => {\n    //         const rowData = param.row.original;\n    //         return (<div className=\"cell-components\">\n    //             <button className=\"btn btn-action\" onClick={() => props.onOpenMaterialViewModal(rowData.id)}>\n    //                 <span className=\"fa fa-eye light-grey\"></span>\n    //             </button>\n    //         </div>\n    //         )\n    //     }\n    // }\n    // if (element.accessor === 'edit') {\n    //     obj.Cell = param => {\n    //         const rowData = param.row.original;\n    //         return (<div className=\"cell-components\">\n    //             <button className=\"btn\"\n    //                 data-toggle=\"modal\"\n    //                 data-target=\"#moduleedit\"\n    //                 onClick={() => props.onEdit(rowData.id)}\n    //             >\n    //                 <img src={process.env.PUBLIC_URL + \"/images/edit.svg\"} alt />\n    //             </button></div>\n    //         )\n    //     }\n    // }\n    // if (element.accessor === 'delete') {\n    //     obj.Cell = param => {\n    //         const rowData = param.row.original;\n    //         return (<div className=\"cell-components\">\n    //             <button className=\"btn\"\n    //                 onClick={() => props.onDelete(rowData.id)}\n    //             >\n    //                 <img src={process.env.PUBLIC_URL + \"/images/delete.svg\"} alt />\n    //             </button></div>\n    //         )\n    //     }\n    // }\n\n\n    columns.push(obj);\n  });\n  columns = React.useMemo(() => columns);\n  return (\n    /*#__PURE__*/\n    // <div></div>\n    React.createElement(Table, {\n      columns: columns,\n      data: props.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    })\n  );\n}\n\nexport default DataGrid;","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/inventory/returntest/Datagrid.js"],"names":["React","useState","useTable","useSortBy","useExpanded","usePagination","Link","Table","columns","userColumns","data","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","initialState","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","e","Number","target","value","length","DataGrid","props","columnList","forEach","element","obj","Header","accessor","filterable","width","disableSortBy","Cell","index","push","useMemo"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react'\nimport { useTable, useSortBy, useExpanded, usePagination } from 'react-table'\nimport { Link } from 'react-router-dom';\nfunction Table({ columns: userColumns, data }) {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n\n        prepareRow,\n        page,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: { pageIndex, pageSize },\n    } = useTable(\n        {\n            columns: userColumns,\n            data,\n            initialState: { pageIndex: 0 },\n        },\n        useSortBy,\n        usePagination // We can useExpanded to track the expanded state\n        // for sub components too!\n    )\n\n    return (\n        <div class=\"table-responsive\">\n            <table {...getTableProps()} className=\"data-table dataTable-mainTable table table-hover\">\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                    {column.render('Header')}\n                                    <span>\n                                        {column.isSorted ? (!column.isSortedDesc ? ' ðŸ”¼' : ' ðŸ”½') : ''}\n                                    </span>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            // Use a React.Fragment here so the table markup is still valid\n                            <React.Fragment {...row.getRowProps()}>\n                                <tr>\n                                    {row.cells.map(cell => {\n                                        return (\n                                            <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                        )\n                                    })}\n                                </tr>\n                            </React.Fragment>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <br />\n            <div className=\"table__fixed__footer\">\n                <div className=\"footer__left\">\n                    <select className=\"custom-select\"\n                        value={pageSize}\n                        onChange={e => {\n                            setPageSize(Number(e.target.value))\n                        }}\n                    >\n                        {[3, 5, 10].map(pageSize => (\n                            <option key={pageSize} value={pageSize}>\n                                {pageSize}\n                            </option>\n                        ))}\n                    </select>\n                    <label>Records Per Page</label>\n                    {/* <span className='m-l-10'>Records Per Page</span> */}\n\n                    <div className=\"footer__right\">\n                        <div className=\"page__enter\">\n                            <span>\n                                Page{' '}\n                            </span>\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                defaultValue={pageIndex + 1}\n                                onChange={e => {\n                                    const page = e.target.value ? Number(e.target.value) - 1 : 0\n                                    gotoPage(page)\n                                }}\n                            />\n                            <span>of {pageOptions.length}</span>\n                        </div></div>\n\n                    <nav aria-label=\"Page navigation\">\n                        <ul className=\"pagination\">\n                            <li class=\"page-item\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}><a className=\"page-link\" href=\"#\">First</a></li>\n                            <li className=\"page-item\" onClick={() => previousPage()} disabled={!canPreviousPage}><a className=\"page-link\" href=\"#\">Prev</a></li>\n                            <li className=\"page-item\" onClick={() => gotoPage(pageIndex + 1)}><a className=\"page-link\" href=\"#\">{pageIndex + 1}</a></li>\n                            <li className=\"page-item\" onClick={() => gotoPage(pageIndex + 1)}><a className=\"page-link\" href=\"#\">{pageIndex + 2}</a></li>\n                            <li className=\"page-item\" onClick={() => nextPage()} disabled={!canNextPage}><a className=\"page-link\" href=\"#\">Next</a></li>\n                            <li className=\"page-item\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}><a className=\"page-link\" href=\"#\">Last</a></li>\n                        </ul>\n\n                    </nav> </div>\n            </div>\n        </div>\n    )\n}\nfunction DataGrid(props) {\n    const columnList = props.columns;\n    let columns = [];\n    columnList.forEach(element => {\n        const obj = {};\n        obj.Header = element.Header;\n        obj.accessor = element.accessor;\n        if (element.filterable) {\n            obj.filterable = true;\n        }\n        if (element.width) {\n            obj.width = element.width;\n        }\n        if (element.disableSortBy) {\n            obj.disableSortBy = true;\n        }\n        if (element.accessor === 'index') {\n            obj.Cell = (row) => {\n                return <div>{row.row.index + 1}</div>;\n            }\n        }\n        // if (element.accessor === 'count') {\n        //     obj.Cell = param => {\n        //         const rowData = param.row.original;\n        //         return <div className=\"add-material\"><a href=\"#\" onClick={() => props.onGetList(rowData.id)}>{rowData.subRowsCount}</a>\n        //             <a\n        //                 href=\"#\"\n        //                 onClick={() => props.onOpenModal(rowData.id)}\n        //             >\n        //                 <img src={process.env.PUBLIC_URL + \"/images/plus.svg\"} alt />\n        //                 <span>Add More</span>\n        //             </a>\n        //         </div>\n        //     }\n        // }\n        // if (element.accessor === 'dataStatus') {\n        //     obj.Cell = param => {\n        //         const rowData = param.row.original;\n        //         const status = rowData.dataStatus ? parseInt(rowData.dataStatus) : 0;\n        //         return (<div className=\"cell-components\">\n        //             <div className=\"custom-control custom-switch\">\n        //                 <input\n        //                     type=\"checkbox\"\n        //                     className=\"custom-control-input\"\n        //                     id={`changeStatus-${rowData.id}`}\n        //                     onChange={() => props.onChangeStatus(rowData.id, !status)}\n        //                     checked={status}\n        //                 />\n        //                 <label\n        //                     className=\"custom-control-label\"\n        //                     htmlFor={`changeStatus-${rowData.id}`}\n        //                 />\n        //             </div>\n        //         </div>\n        //         )\n        //     }\n        // }\n        // if (element.accessor === 'dataSelect') {\n        //     obj.Cell = param => {\n        //         const rowData = param.row.original;\n        //         return (<div className=\"cell-components\">\n        //             <div className=\"custom-control custom-switch\">\n        //                 <button className=\"btn accept-btn\" onClick={() => props.onChangeSelect(rowData.id, 1)}>Accept</button>\n        //                 <button className=\"btn reject-btn\" onClick={() => props.setRejectionId(rowData.id)}>Reject</button>\n        //             </div>\n        //         </div>\n        //         )\n        //     }\n        // }\n        // if (element.accessor === 'view') {\n        //     obj.Cell = param => {\n        //         const rowData = param.row.original;\n        //         return (<div className=\"cell-components\">\n\n        //             <button className=\"btn btn-action\" onClick={() => props.onOpenMaterialViewModal(rowData.id)}>\n        //                 <span className=\"fa fa-eye light-grey\"></span>\n        //             </button>\n        //         </div>\n        //         )\n        //     }\n        // }\n        // if (element.accessor === 'edit') {\n        //     obj.Cell = param => {\n        //         const rowData = param.row.original;\n        //         return (<div className=\"cell-components\">\n        //             <button className=\"btn\"\n        //                 data-toggle=\"modal\"\n        //                 data-target=\"#moduleedit\"\n        //                 onClick={() => props.onEdit(rowData.id)}\n        //             >\n        //                 <img src={process.env.PUBLIC_URL + \"/images/edit.svg\"} alt />\n        //             </button></div>\n        //         )\n        //     }\n        // }\n\n        // if (element.accessor === 'delete') {\n        //     obj.Cell = param => {\n        //         const rowData = param.row.original;\n        //         return (<div className=\"cell-components\">\n        //             <button className=\"btn\"\n        //                 onClick={() => props.onDelete(rowData.id)}\n        //             >\n        //                 <img src={process.env.PUBLIC_URL + \"/images/delete.svg\"} alt />\n        //             </button></div>\n        //         )\n        //     }\n        // }\n\n        columns.push(obj);\n\n    });\n    columns = React.useMemo(() => columns)\n\n    return (\n        // <div></div>\n        <Table columns={columns} data={props.data} />\n    )\n}\n\nexport default DataGrid\n"]},"metadata":{},"sourceType":"module"}
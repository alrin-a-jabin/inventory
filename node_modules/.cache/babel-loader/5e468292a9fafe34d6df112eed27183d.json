{"ast":null,"code":"var _jsxFileName = \"/home/alrin/Downloads/INVENTORY22/src/components/inventory/allocation-return-log/components/partials/RenderAllocationAndReturnsListTable.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport { UncontrolledTooltip } from 'reactstrap';\nexport default function RenderAllocationAndReturnsListTable(props) {\n  let response = [];\n\n  const retry = vlaue => {\n    console.log(vlaue);\n  };\n\n  if (props.data.length <= 0) {\n    response.push(React.createElement(\"tr\", {\n      key: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      colSpan: \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"No Data\")));\n  } else {\n    response = props.data.map((row, index) => React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, index + 1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, row.fileName), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, moment(row.date, 'YYYY-MM-DD h:mm:ss').format('DD-MM-YYYY h:mm a')), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, row.fileType), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, row.totalRecords), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, row.status == 'SUCCESS' ? React.createElement(\"span\", {\n      className: \"text-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, row.status) : React.createElement(\"span\", {\n      className: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"FAILED\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: row.status == 'SUCCESS' ? \"btn-action btn-action-desabled\" : \"cursor-pointer btn-action btn-action-active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-repeat\",\n      \"aria-hidden\": \"true\",\n      id: \"UncontrolledTooltipExample\",\n      onClick: () => props.retry(row.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }))), React.createElement(UncontrolledTooltip, {\n      placement: \"bottom\",\n      target: \"UncontrolledTooltipExample\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Retry\")));\n  }\n\n  return response;\n}","map":{"version":3,"sources":["/home/alrin/Downloads/INVENTORY22/src/components/inventory/allocation-return-log/components/partials/RenderAllocationAndReturnsListTable.js"],"names":["React","moment","UncontrolledTooltip","RenderAllocationAndReturnsListTable","props","response","retry","vlaue","console","log","data","length","push","map","row","index","fileName","date","format","fileType","totalRecords","status","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,mBAAT,QAAoC,YAApC;AAGA,eAAe,SAASC,mCAAT,CAA6CC,KAA7C,EAAoD;AACjE,MAAIC,QAAQ,GAAG,EAAf;;AAEA,QAAMC,KAAK,GAAIC,KAAD,IAAU;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GAFD;;AAGA,MAAIH,KAAK,CAACM,IAAN,CAAWC,MAAX,IAAqB,CAAzB,EAA4B;AAC1BN,IAAAA,QAAQ,CAACO,IAAT,CACE;AAAI,MAAA,GAAG,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,OAAO,EAAC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADF;AAKD,GAND,MAMO;AACLP,IAAAA,QAAQ,GAAGD,KAAK,CAACM,IAAN,CAAWG,GAAX,CAAe,CAACC,GAAD,EAAMC,KAAN,KACxB;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAK,GAAG,CAAb,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,GAAG,CAACE,QAAT,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKf,MAAM,CAACa,GAAG,CAACG,IAAL,EAAW,oBAAX,CAAN,CAAuCC,MAAvC,CAA8C,mBAA9C,CAAL,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,GAAG,CAACK,QAAT,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAML,GAAG,CAACM,YAAV,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMN,GAAG,CAACO,MAAJ,IAAc,SAAf,GAA6B;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCP,GAAG,CAACO,MAApC,CAA7B,GAAoF;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAzF,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAGP,GAAG,CAACO,MAAJ,IAAc,SAAf,GAA4B,gCAA5B,GAA+D,6CAD5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE;AAAG,MAAA,SAAS,EAAC,cAAb;AAA4B,qBAAY,MAAxC;AAAgD,MAAA,EAAE,EAAC,4BAAnD;AAAkF,MAAA,OAAO,EAAE,MAAIjB,KAAK,CAACE,KAAN,CAAYQ,GAAG,CAACQ,EAAhB,CAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,CAPF,EAeE,oBAAC,mBAAD;AAAqB,MAAA,SAAS,EAAC,QAA/B;AAAwC,MAAA,MAAM,EAAC,4BAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAfF,CADS,CAAX;AAsBD;;AACD,SACEjB,QADF;AAGD","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport { UncontrolledTooltip } from 'reactstrap';\n\n\nexport default function RenderAllocationAndReturnsListTable(props) {\n  let response = [];\n\n  const retry = (vlaue) =>{\n    console.log(vlaue);\n  }\n  if (props.data.length <= 0) {\n    response.push(\n      <tr key=\"1\">\n        <td colSpan=\"12\">No Data</td>\n      </tr>\n    )\n  } else {\n    response = props.data.map((row, index) => (\n      <tr key={index}>\n        <td>{index + 1}</td>\n        <td>{row.fileName}</td>\n        <td>{moment(row.date, 'YYYY-MM-DD h:mm:ss').format('DD-MM-YYYY h:mm a')}</td>\n        <td>{row.fileType}</td>\n        <td >{row.totalRecords}</td>\n        <td>{(row.status == 'SUCCESS') ? (<span className=\"text-success\">{row.status}</span>) : (<span className=\"text-danger\">FAILED</span>)}</td>\n        <td >\n          <button\n            className={(row.status == 'SUCCESS') ? \"btn-action btn-action-desabled\" : \"cursor-pointer btn-action btn-action-active\"}\n          >\n            <i className=\"fa fa-repeat\" aria-hidden=\"true\"  id=\"UncontrolledTooltipExample\"   onClick={()=>props.retry(row.id)}>\n            </i>\n          </button>\n        </td>\n        <UncontrolledTooltip placement='bottom' target='UncontrolledTooltipExample'>\n        Retry\n      </UncontrolledTooltip>\n      \n      </tr>\n    ))\n  }\n  return (\n    response\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}